/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/domready/ready.js":
/***/ (function(module, exports, __webpack_require__) {

/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function (name, definition) {

  if (true) module.exports = definition()
  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
  else this[name] = definition()

}('domready', function () {

  var fns = [], listener
    , doc = document
    , hack = doc.documentElement.doScroll
    , domContentLoaded = 'DOMContentLoaded'
    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)


  if (!loaded)
  doc.addEventListener(domContentLoaded, listener = function () {
    doc.removeEventListener(domContentLoaded, listener)
    loaded = 1
    while (listener = fns.shift()) listener()
  })

  return function (fn) {
    loaded ? setTimeout(fn, 0) : fns.push(fn)
  }

});


/***/ }),

/***/ "./node_modules/ev-emitter/ev-emitter.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */

( function( global, factory ) {
  // universal module definition
  /* jshint strict: false */ /* globals define, module, window */
  if ( true ) {
    // AMD - RequireJS
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }

}( typeof window != 'undefined' ? window : this, function() {

"use strict";

function EvEmitter() {}

var proto = EvEmitter.prototype;

proto.on = function( eventName, listener ) {
  if ( !eventName || !listener ) {
    return;
  }
  // set events hash
  var events = this._events = this._events || {};
  // set listeners array
  var listeners = events[ eventName ] = events[ eventName ] || [];
  // only add once
  if ( listeners.indexOf( listener ) == -1 ) {
    listeners.push( listener );
  }

  return this;
};

proto.once = function( eventName, listener ) {
  if ( !eventName || !listener ) {
    return;
  }
  // add event
  this.on( eventName, listener );
  // set once flag
  // set onceEvents hash
  var onceEvents = this._onceEvents = this._onceEvents || {};
  // set onceListeners object
  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};
  // set flag
  onceListeners[ listener ] = true;

  return this;
};

proto.off = function( eventName, listener ) {
  var listeners = this._events && this._events[ eventName ];
  if ( !listeners || !listeners.length ) {
    return;
  }
  var index = listeners.indexOf( listener );
  if ( index != -1 ) {
    listeners.splice( index, 1 );
  }

  return this;
};

proto.emitEvent = function( eventName, args ) {
  var listeners = this._events && this._events[ eventName ];
  if ( !listeners || !listeners.length ) {
    return;
  }
  var i = 0;
  var listener = listeners[i];
  args = args || [];
  // once stuff
  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];

  while ( listener ) {
    var isOnce = onceListeners && onceListeners[ listener ];
    if ( isOnce ) {
      // remove listener
      // remove before trigger to prevent recursion
      this.off( eventName, listener );
      // unset once flag
      delete onceListeners[ listener ];
    }
    // trigger listener
    listener.apply( this, args );
    // get next listener
    i += isOnce ? 0 : 1;
    listener = listeners[i];
  }

  return this;
};

proto.allOff =
proto.removeAllListeners = function() {
  delete this._events;
  delete this._onceEvents;
};

return EvEmitter;

}));


/***/ }),

/***/ "./node_modules/fastclick/lib/fastclick.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

		// Don't send a synthetic click to disabled inputs (issue #62)
		case 'button':
		case 'select':
		case 'textarea':
			if (target.disabled) {
				return true;
			}

			break;
		case 'input':

			// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
			if ((deviceIsIOS && target.type === 'file') || target.disabled) {
				return true;
			}

			break;
		case 'label':
		case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
		case 'video':
			return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
		case 'textarea':
			return true;
		case 'select':
			return !deviceIsAndroid;
		case 'input':
			switch (target.type) {
			case 'button':
			case 'checkbox':
			case 'file':
			case 'image':
			case 'radio':
			case 'submit':
				return false;
			}

			// No point in attempting to focus disabled inputs
			return !target.disabled && !target.readOnly;
		default:
			return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

			// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (true) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return FastClick;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());


/***/ }),

/***/ "./node_modules/imagesloaded/imagesloaded.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * imagesLoaded v4.1.3
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

( function( window, factory ) { 'use strict';
  // universal module definition

  /*global define: false, module: false, require: false */

  if ( true ) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
      __webpack_require__("./node_modules/ev-emitter/ev-emitter.js")
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function( EvEmitter ) {
      return factory( window, EvEmitter );
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('ev-emitter')
    );
  } else {
    // browser global
    window.imagesLoaded = factory(
      window,
      window.EvEmitter
    );
  }

})( typeof window !== 'undefined' ? window : this,

// --------------------------  factory -------------------------- //

function factory( window, EvEmitter ) {

'use strict';

var $ = window.jQuery;
var console = window.console;

// -------------------------- helpers -------------------------- //

// extend objects
function extend( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
}

// turn element or nodeList into an array
function makeArray( obj ) {
  var ary = [];
  if ( Array.isArray( obj ) ) {
    // use object if already an array
    ary = obj;
  } else if ( typeof obj.length == 'number' ) {
    // convert nodeList to array
    for ( var i=0; i < obj.length; i++ ) {
      ary.push( obj[i] );
    }
  } else {
    // array of single index
    ary.push( obj );
  }
  return ary;
}

// -------------------------- imagesLoaded -------------------------- //

/**
 * @param {Array, Element, NodeList, String} elem
 * @param {Object or Function} options - if function, use as callback
 * @param {Function} onAlways - callback function
 */
function ImagesLoaded( elem, options, onAlways ) {
  // coerce ImagesLoaded() without new, to be new ImagesLoaded()
  if ( !( this instanceof ImagesLoaded ) ) {
    return new ImagesLoaded( elem, options, onAlways );
  }
  // use elem as selector string
  if ( typeof elem == 'string' ) {
    elem = document.querySelectorAll( elem );
  }

  this.elements = makeArray( elem );
  this.options = extend( {}, this.options );

  if ( typeof options == 'function' ) {
    onAlways = options;
  } else {
    extend( this.options, options );
  }

  if ( onAlways ) {
    this.on( 'always', onAlways );
  }

  this.getImages();

  if ( $ ) {
    // add jQuery Deferred object
    this.jqDeferred = new $.Deferred();
  }

  // HACK check async to allow time to bind listeners
  setTimeout( function() {
    this.check();
  }.bind( this ));
}

ImagesLoaded.prototype = Object.create( EvEmitter.prototype );

ImagesLoaded.prototype.options = {};

ImagesLoaded.prototype.getImages = function() {
  this.images = [];

  // filter & find items if we have an item selector
  this.elements.forEach( this.addElementImages, this );
};

/**
 * @param {Node} element
 */
ImagesLoaded.prototype.addElementImages = function( elem ) {
  // filter siblings
  if ( elem.nodeName == 'IMG' ) {
    this.addImage( elem );
  }
  // get background image on element
  if ( this.options.background === true ) {
    this.addElementBackgroundImages( elem );
  }

  // find children
  // no non-element nodes, #143
  var nodeType = elem.nodeType;
  if ( !nodeType || !elementNodeTypes[ nodeType ] ) {
    return;
  }
  var childImgs = elem.querySelectorAll('img');
  // concat childElems to filterFound array
  for ( var i=0; i < childImgs.length; i++ ) {
    var img = childImgs[i];
    this.addImage( img );
  }

  // get child background images
  if ( typeof this.options.background == 'string' ) {
    var children = elem.querySelectorAll( this.options.background );
    for ( i=0; i < children.length; i++ ) {
      var child = children[i];
      this.addElementBackgroundImages( child );
    }
  }
};

var elementNodeTypes = {
  1: true,
  9: true,
  11: true
};

ImagesLoaded.prototype.addElementBackgroundImages = function( elem ) {
  var style = getComputedStyle( elem );
  if ( !style ) {
    // Firefox returns null if in a hidden iframe https://bugzil.la/548397
    return;
  }
  // get url inside url("...")
  var reURL = /url\((['"])?(.*?)\1\)/gi;
  var matches = reURL.exec( style.backgroundImage );
  while ( matches !== null ) {
    var url = matches && matches[2];
    if ( url ) {
      this.addBackground( url, elem );
    }
    matches = reURL.exec( style.backgroundImage );
  }
};

/**
 * @param {Image} img
 */
ImagesLoaded.prototype.addImage = function( img ) {
  var loadingImage = new LoadingImage( img );
  this.images.push( loadingImage );
};

ImagesLoaded.prototype.addBackground = function( url, elem ) {
  var background = new Background( url, elem );
  this.images.push( background );
};

ImagesLoaded.prototype.check = function() {
  var _this = this;
  this.progressedCount = 0;
  this.hasAnyBroken = false;
  // complete if no images
  if ( !this.images.length ) {
    this.complete();
    return;
  }

  function onProgress( image, elem, message ) {
    // HACK - Chrome triggers event before object properties have changed. #83
    setTimeout( function() {
      _this.progress( image, elem, message );
    });
  }

  this.images.forEach( function( loadingImage ) {
    loadingImage.once( 'progress', onProgress );
    loadingImage.check();
  });
};

ImagesLoaded.prototype.progress = function( image, elem, message ) {
  this.progressedCount++;
  this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
  // progress event
  this.emitEvent( 'progress', [ this, image, elem ] );
  if ( this.jqDeferred && this.jqDeferred.notify ) {
    this.jqDeferred.notify( this, image );
  }
  // check if completed
  if ( this.progressedCount == this.images.length ) {
    this.complete();
  }

  if ( this.options.debug && console ) {
    console.log( 'progress: ' + message, image, elem );
  }
};

ImagesLoaded.prototype.complete = function() {
  var eventName = this.hasAnyBroken ? 'fail' : 'done';
  this.isComplete = true;
  this.emitEvent( eventName, [ this ] );
  this.emitEvent( 'always', [ this ] );
  if ( this.jqDeferred ) {
    var jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
    this.jqDeferred[ jqMethod ]( this );
  }
};

// --------------------------  -------------------------- //

function LoadingImage( img ) {
  this.img = img;
}

LoadingImage.prototype = Object.create( EvEmitter.prototype );

LoadingImage.prototype.check = function() {
  // If complete is true and browser supports natural sizes,
  // try to check for image status manually.
  var isComplete = this.getIsImageComplete();
  if ( isComplete ) {
    // report based on naturalWidth
    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
    return;
  }

  // If none of the checks above matched, simulate loading on detached element.
  this.proxyImage = new Image();
  this.proxyImage.addEventListener( 'load', this );
  this.proxyImage.addEventListener( 'error', this );
  // bind to image as well for Firefox. #191
  this.img.addEventListener( 'load', this );
  this.img.addEventListener( 'error', this );
  this.proxyImage.src = this.img.src;
};

LoadingImage.prototype.getIsImageComplete = function() {
  return this.img.complete && this.img.naturalWidth !== undefined;
};

LoadingImage.prototype.confirm = function( isLoaded, message ) {
  this.isLoaded = isLoaded;
  this.emitEvent( 'progress', [ this, this.img, message ] );
};

// ----- events ----- //

// trigger specified handler for event type
LoadingImage.prototype.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

LoadingImage.prototype.onload = function() {
  this.confirm( true, 'onload' );
  this.unbindEvents();
};

LoadingImage.prototype.onerror = function() {
  this.confirm( false, 'onerror' );
  this.unbindEvents();
};

LoadingImage.prototype.unbindEvents = function() {
  this.proxyImage.removeEventListener( 'load', this );
  this.proxyImage.removeEventListener( 'error', this );
  this.img.removeEventListener( 'load', this );
  this.img.removeEventListener( 'error', this );
};

// -------------------------- Background -------------------------- //

function Background( url, element ) {
  this.url = url;
  this.element = element;
  this.img = new Image();
}

// inherit LoadingImage prototype
Background.prototype = Object.create( LoadingImage.prototype );

Background.prototype.check = function() {
  this.img.addEventListener( 'load', this );
  this.img.addEventListener( 'error', this );
  this.img.src = this.url;
  // check if image is already complete
  var isComplete = this.getIsImageComplete();
  if ( isComplete ) {
    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
    this.unbindEvents();
  }
};

Background.prototype.unbindEvents = function() {
  this.img.removeEventListener( 'load', this );
  this.img.removeEventListener( 'error', this );
};

Background.prototype.confirm = function( isLoaded, message ) {
  this.isLoaded = isLoaded;
  this.emitEvent( 'progress', [ this, this.element, message ] );
};

// -------------------------- jQuery -------------------------- //

ImagesLoaded.makeJQueryPlugin = function( jQuery ) {
  jQuery = jQuery || window.jQuery;
  if ( !jQuery ) {
    return;
  }
  // set local variable
  $ = jQuery;
  // $().imagesLoaded()
  $.fn.imagesLoaded = function( options, callback ) {
    var instance = new ImagesLoaded( this, options, callback );
    return instance.jqDeferred.promise( $(this) );
  };
};
// try making plugin
ImagesLoaded.makeJQueryPlugin();

// --------------------------  -------------------------- //

return ImagesLoaded;

});


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.2.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( ">tbody", elem )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with computed style
	var valueIsBorderBox,
		styles = getStyles( elem ),
		val = curCSS( elem, name, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test( val ) ) {
		return val;
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = isBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ name ] );

	// Fall back to offsetWidth/Height when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	if ( val === "auto" ) {
		val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var doc, docElem, rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		doc = elem.ownerDocument;
		docElem = doc.documentElement;
		win = doc.defaultView;

		return {
			top: rect.top + win.pageYOffset - docElem.clientTop,
			left: rect.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( jQuery.isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/slick-carousel/slick/slick.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function(factory) {
    'use strict';
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__("./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }

}(function($) {
    'use strict';
    var Slick = window.Slick || {};

    Slick = (function() {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this, dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function(slider, i) {
                    return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            _.registerBreakpoints();
            _.init(true);

        }

        return Slick;

    }());

    Slick.prototype.activateADA = function() {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });

    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || (index >= _.slideCount)) {
            return false;
        }

        _.unload();

        if (typeof(index) === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function(index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function(targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }

        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -(_.currentLeft);
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' +
                                now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' +
                                now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });

            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function() {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }

            }

        }

    };

    Slick.prototype.getNavTarget = function() {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if ( asNavFor && asNavFor !== null ) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;

    };

    Slick.prototype.asNavFor = function(index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if ( asNavFor !== null && typeof asNavFor === 'object' ) {
            asNavFor.each(function() {
                var target = $(this).slick('getSlick');
                if(!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }

    };

    Slick.prototype.applyTransition = function(slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.autoPlay = function() {

        var _ = this;

        _.autoPlayClear();

        if ( _.slideCount > _.options.slidesToShow ) {
            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
        }

    };

    Slick.prototype.autoPlayClear = function() {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }

    };

    Slick.prototype.autoPlayIterator = function() {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if ( !_.paused && !_.interrupted && !_.focussed ) {

            if ( _.options.infinite === false ) {

                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                    _.direction = 0;
                }

                else if ( _.direction === 0 ) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if ( _.currentSlide - 1 === 0 ) {
                        _.direction = 1;
                    }

                }

            }

            _.slideHandler( slideTo );

        }

    };

    Slick.prototype.buildArrows = function() {

        var _ = this;

        if (_.options.arrows === true ) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if( _.slideCount > _.options.slidesToShow ) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow
                        .addClass('slick-disabled')
                        .attr('aria-disabled', 'true');
                }

            } else {

                _.$prevArrow.add( _.$nextArrow )

                    .addClass('slick-hidden')
                    .attr({
                        'aria-disabled': 'true',
                        'tabindex': '-1'
                    });

            }

        }

    };

    Slick.prototype.buildDots = function() {

        var _ = this,
            i, dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');

        }

    };

    Slick.prototype.buildOut = function() {

        var _ = this;

        _.$slides =
            _.$slider
                .children( _.options.slide + ':not(.slick-cloned)')
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function(index, element) {
            $(element)
                .attr('data-slick-index', index)
                .data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = (_.slideCount === 0) ?
            $('<div class="slick-track"/>').appendTo(_.$slider) :
            _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap(
            '<div aria-live="polite" class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();


        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }

    };

    Slick.prototype.buildRows = function() {

        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if(_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(
                originalSlides.length / slidesPerSection
            );

            for(a = 0; a < numOfSlides; a++){
                var slide = document.createElement('div');
                for(b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for(c = 0; c < _.options.slidesPerRow; c++) {
                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children()
                .css({
                    'width':(100 / _.options.slidesPerRow) + '%',
                    'display': 'inline-block'
                });

        }

    };

    Slick.prototype.checkResponsive = function(initial, forceUpdate) {

        var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if ( _.options.responsive &&
            _.options.responsive.length &&
            _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint =
                            targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings,
                            _.breakpointSettings[
                                targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if( !initial && triggerBreakpoint !== false ) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }

    };

    Slick.prototype.changeSlide = function(event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset, slideOffset, unevenOffset;

        // If target is a link, prevent default action.
        if($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if(!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                    event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }

    };

    Slick.prototype.checkNavigable = function(index) {

        var _ = this,
            navigables, prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function() {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots)
                .off('click.slick', _.changeSlide)
                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.cleanUpSlideEvents = function() {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

    };

    Slick.prototype.cleanUpRows = function() {

        var _ = this, originalSlides;

        if(_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }

    };

    Slick.prototype.clickHandler = function(event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }

    };

    Slick.prototype.destroy = function(refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }


        if ( _.$prevArrow && _.$prevArrow.length ) {

            _.$prevArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.prevArrow )) {
                _.$prevArrow.remove();
            }
        }

        if ( _.$nextArrow && _.$nextArrow.length ) {

            _.$nextArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.nextArrow )) {
                _.$nextArrow.remove();
            }

        }


        if (_.$slides) {

            _.$slides
                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                .removeAttr('aria-hidden')
                .removeAttr('data-slick-index')
                .each(function(){
                    $(this).attr('style', $(this).data('originalStyling'));
                });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if(!refresh) {
            _.$slider.trigger('destroy', [_]);
        }

    };

    Slick.prototype.disableTransition = function(slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.fadeSlide = function(slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function() {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }

        }

    };

    Slick.prototype.fadeSlideOut = function(slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });

        }

    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.focusHandler = function() {

        var _ = this;

        _.$slider
            .off('focus.slick blur.slick')
            .on('focus.slick blur.slick',
                '*:not(.slick-arrow)', function(event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function() {

                if( _.options.pauseOnFocus ) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }

            }, 0);

        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

        var _ = this;
        return _.currentSlide;

    };

    Slick.prototype.getDotCount = function() {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if(!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        }else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;

    };

    Slick.prototype.getLeft = function(slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                    } else {
                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
        } else {
            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft =  0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft =  0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;

    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

        var _ = this;

        return _.options[option];

    };

    Slick.prototype.getNavigableIndexes = function() {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;

    };

    Slick.prototype.getSlick = function() {

        return this;

    };

    Slick.prototype.getSlideCount = function() {

        var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;

        } else {
            return _.options.slidesToScroll;
        }

    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);

    };

    Slick.prototype.init = function(creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();

        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if ( _.options.autoplay ) {

            _.paused = false;
            _.autoPlay();

        }

    };

    Slick.prototype.initADA = function() {
        var _ = this;
        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        _.$slideTrack.attr('role', 'listbox');

        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
            $(this).attr({
                'role': 'option',
                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''
            });
        });

        if (_.$dots !== null) {
            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                $(this).attr({
                    'role': 'presentation',
                    'aria-selected': 'false',
                    'aria-controls': 'navigation' + _.instanceUid + i + '',
                    'id': 'slick-slide' + _.instanceUid + i + ''
                });
            })
                .first().attr('aria-selected', 'true').end()
                .find('button').attr('role', 'button').end()
                .closest('div').attr('role', 'toolbar');
        }
        _.activateADA();

    };

    Slick.prototype.initArrowEvents = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'previous'
               }, _.changeSlide);
            _.$nextArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'next'
               }, _.changeSlide);
        }

    };

    Slick.prototype.initDotEvents = function() {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);
        }

        if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {

            $('li', _.$dots)
                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initSlideEvents = function() {

        var _ = this;

        if ( _.options.pauseOnHover ) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initializeEvents = function() {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.initUI = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();

        }

    };

    Slick.prototype.keyHandler = function(event) {

        var _ = this;
         //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' :  'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }

    };

    Slick.prototype.lazyLoad = function() {

        var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function() {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function() {

                    image
                        .animate({ opacity: 0 }, 100, function() {
                            image
                                .attr('src', imageSource)
                                .animate({ opacity: 1 }, 200, function() {
                                    image
                                        .removeAttr('data-lazy')
                                        .removeClass('slick-loading');
                                });
                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                        });

                };

                imageToLoad.onerror = function() {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                };

                imageToLoad.src = imageSource;

            });

        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else
        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }

    };

    Slick.prototype.loadSlider = function() {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }

    };

    Slick.prototype.next = Slick.prototype.slickNext = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });

    };

    Slick.prototype.orientationChange = function() {

        var _ = this;

        _.checkResponsive();
        _.setPosition();

    };

    Slick.prototype.pause = Slick.prototype.slickPause = function() {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;

    };

    Slick.prototype.play = Slick.prototype.slickPlay = function() {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;

    };

    Slick.prototype.postSlide = function(index) {

        var _ = this;

        if( !_.unslicked ) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            _.setPosition();

            _.swipeLeft = null;

            if ( _.options.autoplay ) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }

        }

    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });

    };

    Slick.prototype.preventDefault = function(event) {

        event.preventDefault();

    };

    Slick.prototype.progressiveLazyLoad = function( tryCount ) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
            image,
            imageSource,
            imageToLoad;

        if ( $imgsToLoad.length ) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function() {

                image
                    .attr( 'src', imageSource )
                    .removeAttr('data-lazy')
                    .removeClass('slick-loading');

                if ( _.options.adaptiveHeight === true ) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                _.progressiveLazyLoad();

            };

            imageToLoad.onerror = function() {

                if ( tryCount < 3 ) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout( function() {
                        _.progressiveLazyLoad( tryCount + 1 );
                    }, 500 );

                } else {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                    _.progressiveLazyLoad();

                }

            };

            imageToLoad.src = imageSource;

        } else {

            _.$slider.trigger('allImagesLoaded', [ _ ]);

        }

    };

    Slick.prototype.refresh = function( initializing ) {

        var _ = this, currentSlide, lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if ( _.slideCount <= _.options.slidesToShow ) {
            _.currentSlide = 0;

        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if( !initializing ) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);

        }

    };

    Slick.prototype.registerBreakpoints = function() {

        var _ = this, breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {

            _.respondTo = _.options.respondTo || 'window';

            for ( breakpoint in responsiveSettings ) {

                l = _.breakpoints.length-1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while( l >= 0 ) {
                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                            _.breakpoints.splice(l,1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                }

            }

            _.breakpoints.sort(function(a, b) {
                return ( _.options.mobileFirst ) ? a-b : b-a;
            });

        }

    };

    Slick.prototype.reinit = function() {

        var _ = this;

        _.$slides =
            _.$slideTrack
                .children(_.options.slide)
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);

    };

    Slick.prototype.resize = function() {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if( !_.unslicked ) { _.setPosition(); }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.setCSS = function(position) {

        var _ = this,
            positionProps = {},
            x, y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }

    };

    Slick.prototype.setDimensions = function() {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: ('0px ' + _.options.centerPadding)
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: (_.options.centerPadding + ' 0px')
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();


        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

    };

    Slick.prototype.setFade = function() {

        var _ = this,
            targetLeft;

        _.$slides.each(function(index, element) {
            targetLeft = (_.slideWidth * index) * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });

    };

    Slick.prototype.setHeight = function() {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }

    };

    Slick.prototype.setOption =
    Slick.prototype.slickSetOption = function() {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this, l, item, option, value, refresh = false, type;

        if( $.type( arguments[0] ) === 'object' ) {

            option =  arguments[0];
            refresh = arguments[1];
            type = 'multiple';

        } else if ( $.type( arguments[0] ) === 'string' ) {

            option =  arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {

                type = 'responsive';

            } else if ( typeof arguments[1] !== 'undefined' ) {

                type = 'single';

            }

        }

        if ( type === 'single' ) {

            _.options[option] = value;


        } else if ( type === 'multiple' ) {

            $.each( option , function( opt, val ) {

                _.options[opt] = val;

            });


        } else if ( type === 'responsive' ) {

            for ( item in value ) {

                if( $.type( _.options.responsive ) !== 'array' ) {

                    _.options.responsive = [ value[item] ];

                } else {

                    l = _.options.responsive.length-1;

                    // loop through the responsive object and splice out duplicates.
                    while( l >= 0 ) {

                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {

                            _.options.responsive.splice(l,1);

                        }

                        l--;

                    }

                    _.options.responsive.push( value[item] );

                }

            }

        }

        if ( refresh ) {

            _.unload();
            _.reinit();

        }

    };

    Slick.prototype.setPosition = function() {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);

    };

    Slick.prototype.setProps = function() {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined ||
            bodyStyle.MozTransition !== undefined ||
            bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if ( _.options.fade ) {
            if ( typeof _.options.zIndex === 'number' ) {
                if( _.options.zIndex < 3 ) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
    };


    Slick.prototype.setSlideClasses = function(index) {

        var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

        allSlides = _.$slider
            .find('.slick-slide')
            .removeClass('slick-active slick-center slick-current')
            .attr('aria-hidden', 'true');

        _.$slides
            .eq(index)
            .addClass('slick-current');

        if (_.options.centerMode === true) {

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {

                    _.$slides
                        .slice(index - centerOffset, index + centerOffset + 1)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides
                        .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

                if (index === 0) {

                    allSlides
                        .eq(allSlides.length - 1 - _.options.slidesToShow)
                        .addClass('slick-center');

                } else if (index === _.slideCount - 1) {

                    allSlides
                        .eq(_.options.slidesToShow)
                        .addClass('slick-center');

                }

            }

            _.$slides
                .eq(index)
                .addClass('slick-center');

        } else {

            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                _.$slides
                    .slice(index, index + _.options.slidesToShow)
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                    allSlides
                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    allSlides
                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

            }

        }

        if (_.options.lazyLoad === 'ondemand') {
            _.lazyLoad();
        }

    };

    Slick.prototype.setupInfinite = function() {

        var _ = this,
            i, slideIndex, infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > (_.slideCount -
                        infiniteCount); i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex - _.slideCount)
                        .prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex + _.slideCount)
                        .appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                    $(this).attr('id', '');
                });

            }

        }

    };

    Slick.prototype.interrupt = function( toggle ) {

        var _ = this;

        if( !toggle ) {
            _.autoPlay();
        }
        _.interrupted = toggle;

    };

    Slick.prototype.selectHandler = function(event) {

        var _ = this;

        var targetElement =
            $(event.target).is('.slick-slide') ?
                $(event.target) :
                $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.setSlideClasses(index);
            _.asNavFor(index);
            return;

        }

        _.slideHandler(index);

    };

    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this, navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if ( _.options.autoplay ) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if ( _.options.asNavFor ) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                navTarget.setSlideClasses(_.currentSlide);
            }

        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide);
                });

            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }

    };

    Slick.prototype.startLoad = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();

        }

        _.$slider.addClass('slick-loading');

    };

    Slick.prototype.swipeDirection = function() {

        var xDist, yDist, r, swipeAngle, _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
            return (_.options.rtl === false ? 'right' : 'left');
        }
        if (_.options.verticalSwiping === true) {
            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';

    };

    Slick.prototype.swipeEnd = function(event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.interrupted = false;
        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

        if ( _.touchObject.curX === undefined ) {
            return false;
        }

        if ( _.touchObject.edgeHit === true ) {
            _.$slider.trigger('edge', [_, _.swipeDirection() ]);
        }

        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {

            direction = _.swipeDirection();

            switch ( direction ) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                            _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                            _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:


            }

            if( direction != 'vertical' ) {

                _.slideHandler( slideCount );
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction ]);

            }

        } else {

            if ( _.touchObject.startX !== _.touchObject.curX ) {

                _.slideHandler( _.currentSlide );
                _.touchObject = {};

            }

        }

    };

    Slick.prototype.swipeHandler = function(event) {

        var _ = this;

        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
            event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options
            .touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options
                .touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }

    };

    Slick.prototype.swipeMove = function(event) {

        var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
        }

        swipeDirection = _.swipeDirection();

        if (swipeDirection === 'vertical') {
            return;
        }

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }


        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);

    };

    Slick.prototype.swipeStart = function(event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;

    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.unload = function() {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides
            .removeClass('slick-slide slick-active slick-visible slick-current')
            .attr('aria-hidden', 'true')
            .css('width', '');

    };

    Slick.prototype.unslick = function(fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();

    };

    Slick.prototype.updateArrows = function() {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if ( _.options.arrows === true &&
            _.slideCount > _.options.slidesToShow &&
            !_.options.infinite ) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            }

        }

    };

    Slick.prototype.updateDots = function() {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots
                .find('li')
                .removeClass('slick-active')
                .attr('aria-hidden', 'true');

            _.$dots
                .find('li')
                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                .addClass('slick-active')
                .attr('aria-hidden', 'false');

        }

    };

    Slick.prototype.visibility = function() {

        var _ = this;

        if ( _.options.autoplay ) {

            if ( document[_.hidden] ) {

                _.interrupted = true;

            } else {

                _.interrupted = false;

            }

        }

    };

    $.fn.slick = function() {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined')
                _[i].slick = new Slick(_[i], opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };

}));


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),

/***/ "./node_modules/wolfy87-eventemitter/EventEmitter.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * EventEmitter v5.2.1 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */

;(function (exports) {
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */
    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        }
        else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    function isValidListener (listener) {
        if (typeof listener === 'function' || listener instanceof RegExp) {
            return true
        } else if (listener && typeof listener === 'object') {
            return isValidListener(listener.listener)
        } else {
            return false
        }
    }

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        if (!isValidListener(listener)) {
            throw new TypeError('listener must be a function');
        }

        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = typeof listener === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    }
                    else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        }
        else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt;
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        }
        else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        }
        else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listenersMap = this.getListenersAsObject(evt);
        var listeners;
        var listener;
        var i;
        var key;
        var response;

        for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
                listeners = listenersMap[key].slice(0);

                for (i = 0; i < listeners.length; i++) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        }
        else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return EventEmitter;
        }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = EventEmitter;
    }
    else {
        exports.EventEmitter = EventEmitter;
    }
}(this || {}));


/***/ }),

/***/ "./resources/scripts/components/about.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__("./node_modules/jquery/dist/jquery.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ee__ = __webpack_require__("./resources/scripts/components/ee.js");



var $aboutCopyOpener = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-about-copy-opener');
var $aboutBody = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-about-body');

function openMoreCopy() {
  var aboutHeight = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-about-copy').height();
  $aboutBody.addClass('active').height(aboutHeight);
}

function addReadMore() {
  var aboutHeight = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-about-copy').height();
  if (aboutHeight < 180) {
    $aboutBody.addClass('active').height(aboutHeight);
  }
}

function setHeight() {
  if ($aboutBody.hasClass('active')) {
    var aboutHeight = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-about-body.active .js-about-copy').height();
    $aboutBody.height(aboutHeight);
  }
}

function init() {
  addReadMore();
  $aboutCopyOpener.click(openMoreCopy);

  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(window).resize(setHeight);
  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(window).on('orientationchange', setHeight);
}

__WEBPACK_IMPORTED_MODULE_1__ee__["a" /* default */].addListener('init', init);

/***/ }),

/***/ "./resources/scripts/components/accordion-nav.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__("./node_modules/jquery/dist/jquery.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ee__ = __webpack_require__("./resources/scripts/components/ee.js");



function setHeight() {
  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-accordion-nav-item.active').each(function (i, el) {
    var activeCarouselHeight = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(el).find('.js-carousel-slide.slick-active').height();
    __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(el).find('.js-accordion-nav-content').height(activeCarouselHeight);
  });
}

function openNav() {
  var $selectedItem = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(this).closest('.js-accordion-nav-item');
  if ($selectedItem.hasClass('active')) {
    $selectedItem.removeClass('active');
    $selectedItem.find('.js-accordion-nav-content').css('height', 0);
  } else {
    $selectedItem.addClass('active');
  }
}

function draw() {
  requestAnimationFrame(draw);
  setHeight();
}

function init() {
  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(document).off().on('click', '.js-accordion-nav-opener', openNav);
  draw();
}

__WEBPACK_IMPORTED_MODULE_1__ee__["a" /* default */].addListener('init', init);

/***/ }),

/***/ "./resources/scripts/components/bg-music.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bgMute;
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__("./node_modules/jquery/dist/jquery.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ee__ = __webpack_require__("./resources/scripts/components/ee.js");



var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('body');
var mutedBgMusic = 'muted-bg-mucic';

function isMuted() {
  return $body.hasClass(mutedBgMusic);
}

function bgMute() {
  $body.addClass(mutedBgMusic);
  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-bg-music').animate({ volume: 0 }, 500);
}

function bgPlay() {
  $body.removeClass(mutedBgMusic);
  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-bg-music').animate({ volume: 1 }, 500);
}

function toggleBgMusic() {
  if (!isMuted()) {
    bgMute();
  } else {
    bgPlay();
  }
}

function addHandlers() {
  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(document).on('click', '.js-bg-music-control', toggleBgMusic);
}

function init() {
  addHandlers();
}

function destroy() {
  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(document).off('click');
}

__WEBPACK_IMPORTED_MODULE_1__ee__["a" /* default */].addListener('init', init);
__WEBPACK_IMPORTED_MODULE_1__ee__["a" /* default */].addListener('destroy', destroy);

/***/ }),

/***/ "./resources/scripts/components/carousels.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__("./node_modules/jquery/dist/jquery.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_slick_carousel__ = __webpack_require__("./node_modules/slick-carousel/slick/slick.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_slick_carousel___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_slick_carousel__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ee__ = __webpack_require__("./resources/scripts/components/ee.js");




var $carousels = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.js-carousel');

function carouselsInit() {
  $carousels.each(function (i, el) {
    __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(el).slick({
      dots: false,
      fade: true,
      slidesToShow: 1,
      slide: '.js-carousel-slide',
      draggable: false,
      prevArrow: __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(el).find('.js-carousel-prev'),
      nextArrow: __WEBPACK_IMPORTED_MODULE_0_jquery___default.a(el).find('.js-carousel-next')
    });
  });
}

function init() {
  carouselsInit();
}

__WEBPACK_IMPORTED_MODULE_2__ee__["a" /* default */].addListener('init', init);

/***/ }),

/***/ "./resources/scripts/components/ee.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var EventEmitter = __webpack_require__("./node_modules/wolfy87-eventemitter/EventEmitter.js");

var ee = new EventEmitter();

/* harmony default export */ __webpack_exports__["a"] = (ee);

/***/ }),

/***/ "./resources/scripts/components/mixcloud-player.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__("./node_modules/jquery/dist/jquery.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ee__ = __webpack_require__("./resources/scripts/components/ee.js");



function init() {
  var widget = Mixcloud.PlayerWidget(document.getElementById('foo'));

  widget.ready.then(function () {
    __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('.c-mixcloud-player__controller').on('click', function () {
      console.log('clicked');
      widget.play();
    });
  });
}

__WEBPACK_IMPORTED_MODULE_1__ee__["a" /* default */].addListener('init', init);

/***/ }),

/***/ "./resources/scripts/components/preloader.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__("./node_modules/jquery/dist/jquery.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_imagesloaded__ = __webpack_require__("./node_modules/imagesloaded/imagesloaded.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_imagesloaded___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_imagesloaded__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ee__ = __webpack_require__("./resources/scripts/components/ee.js");




var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a('body');

function isLoaded() {
  $body.addClass('isLoaded');
}

function hidePreloader() {
  $body.removeClass('active-preloader');
}

function init() {
  __WEBPACK_IMPORTED_MODULE_1_imagesloaded___default.a($body, function () {
    setTimeout(hidePreloader, 400);
    setTimeout(isLoaded, 1000);
  });
}

__WEBPACK_IMPORTED_MODULE_2__ee__["a" /* default */].addListener('init', init);

/***/ }),

/***/ "./resources/scripts/libs/jquery.min.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! jQuery v1.9.0 | (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license */(function (e, t) {
  "use strict";
  function n(e) {
    var t = e.length,
        n = st.type(e);return st.isWindow(e) ? !1 : 1 === e.nodeType && t ? !0 : "array" === n || "function" !== n && (0 === t || "number" == typeof t && t > 0 && t - 1 in e);
  }function r(e) {
    var t = Tt[e] = {};return st.each(e.match(lt) || [], function (e, n) {
      t[n] = !0;
    }), t;
  }function i(e, n, r, i) {
    if (st.acceptData(e)) {
      var o,
          a,
          s = st.expando,
          u = "string" == typeof n,
          l = e.nodeType,
          c = l ? st.cache : e,
          f = l ? e[s] : e[s] && s;if (f && c[f] && (i || c[f].data) || !u || r !== t) return f || (l ? e[s] = f = K.pop() || st.guid++ : f = s), c[f] || (c[f] = {}, l || (c[f].toJSON = st.noop)), ("object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) || "function" == typeof n) && (i ? c[f] = st.extend(c[f], n) : c[f].data = st.extend(c[f].data, n)), o = c[f], i || (o.data || (o.data = {}), o = o.data), r !== t && (o[st.camelCase(n)] = r), u ? (a = o[n], null == a && (a = o[st.camelCase(n)])) : a = o, a;
    }
  }function o(e, t, n) {
    if (st.acceptData(e)) {
      var r,
          i,
          o,
          a = e.nodeType,
          u = a ? st.cache : e,
          l = a ? e[st.expando] : st.expando;if (u[l]) {
        if (t && (r = n ? u[l] : u[l].data)) {
          st.isArray(t) ? t = t.concat(st.map(t, st.camelCase)) : t in r ? t = [t] : (t = st.camelCase(t), t = t in r ? [t] : t.split(" "));for (i = 0, o = t.length; o > i; i++) {
            delete r[t[i]];
          }if (!(n ? s : st.isEmptyObject)(r)) return;
        }(n || (delete u[l].data, s(u[l]))) && (a ? st.cleanData([e], !0) : st.support.deleteExpando || u != u.window ? delete u[l] : u[l] = null);
      }
    }
  }function a(e, n, r) {
    if (r === t && 1 === e.nodeType) {
      var i = "data-" + n.replace(Nt, "-$1").toLowerCase();if (r = e.getAttribute(i), "string" == typeof r) {
        try {
          r = "true" === r ? !0 : "false" === r ? !1 : "null" === r ? null : +r + "" === r ? +r : wt.test(r) ? st.parseJSON(r) : r;
        } catch (o) {}st.data(e, n, r);
      } else r = t;
    }return r;
  }function s(e) {
    var t;for (t in e) {
      if (("data" !== t || !st.isEmptyObject(e[t])) && "toJSON" !== t) return !1;
    }return !0;
  }function u() {
    return !0;
  }function l() {
    return !1;
  }function c(e, t) {
    do {
      e = e[t];
    } while (e && 1 !== e.nodeType);return e;
  }function f(e, t, n) {
    if (t = t || 0, st.isFunction(t)) return st.grep(e, function (e, r) {
      var i = !!t.call(e, r, e);return i === n;
    });if (t.nodeType) return st.grep(e, function (e) {
      return e === t === n;
    });if ("string" == typeof t) {
      var r = st.grep(e, function (e) {
        return 1 === e.nodeType;
      });if (Wt.test(t)) return st.filter(t, r, !n);t = st.filter(t, r);
    }return st.grep(e, function (e) {
      return st.inArray(e, t) >= 0 === n;
    });
  }function p(e) {
    var t = zt.split("|"),
        n = e.createDocumentFragment();if (n.createElement) for (; t.length;) {
      n.createElement(t.pop());
    }return n;
  }function d(e, t) {
    return e.getElementsByTagName(t)[0] || e.appendChild(e.ownerDocument.createElement(t));
  }function h(e) {
    var t = e.getAttributeNode("type");return e.type = (t && t.specified) + "/" + e.type, e;
  }function g(e) {
    var t = nn.exec(e.type);return t ? e.type = t[1] : e.removeAttribute("type"), e;
  }function m(e, t) {
    for (var n, r = 0; null != (n = e[r]); r++) {
      st._data(n, "globalEval", !t || st._data(t[r], "globalEval"));
    }
  }function y(e, t) {
    if (1 === t.nodeType && st.hasData(e)) {
      var n,
          r,
          i,
          o = st._data(e),
          a = st._data(t, o),
          s = o.events;if (s) {
        delete a.handle, a.events = {};for (n in s) {
          for (r = 0, i = s[n].length; i > r; r++) {
            st.event.add(t, n, s[n][r]);
          }
        }
      }a.data && (a.data = st.extend({}, a.data));
    }
  }function v(e, t) {
    var n, r, i;if (1 === t.nodeType) {
      if (n = t.nodeName.toLowerCase(), !st.support.noCloneEvent && t[st.expando]) {
        r = st._data(t);for (i in r.events) {
          st.removeEvent(t, i, r.handle);
        }t.removeAttribute(st.expando);
      }"script" === n && t.text !== e.text ? (h(t).text = e.text, g(t)) : "object" === n ? (t.parentNode && (t.outerHTML = e.outerHTML), st.support.html5Clone && e.innerHTML && !st.trim(t.innerHTML) && (t.innerHTML = e.innerHTML)) : "input" === n && Zt.test(e.type) ? (t.defaultChecked = t.checked = e.checked, t.value !== e.value && (t.value = e.value)) : "option" === n ? t.defaultSelected = t.selected = e.defaultSelected : ("input" === n || "textarea" === n) && (t.defaultValue = e.defaultValue);
    }
  }function b(e, n) {
    var r,
        i,
        o = 0,
        a = e.getElementsByTagName !== t ? e.getElementsByTagName(n || "*") : e.querySelectorAll !== t ? e.querySelectorAll(n || "*") : t;if (!a) for (a = [], r = e.childNodes || e; null != (i = r[o]); o++) {
      !n || st.nodeName(i, n) ? a.push(i) : st.merge(a, b(i, n));
    }return n === t || n && st.nodeName(e, n) ? st.merge([e], a) : a;
  }function x(e) {
    Zt.test(e.type) && (e.defaultChecked = e.checked);
  }function T(e, t) {
    if (t in e) return t;for (var n = t.charAt(0).toUpperCase() + t.slice(1), r = t, i = Nn.length; i--;) {
      if (t = Nn[i] + n, t in e) return t;
    }return r;
  }function w(e, t) {
    return e = t || e, "none" === st.css(e, "display") || !st.contains(e.ownerDocument, e);
  }function N(e, t) {
    for (var n, r = [], i = 0, o = e.length; o > i; i++) {
      n = e[i], n.style && (r[i] = st._data(n, "olddisplay"), t ? (r[i] || "none" !== n.style.display || (n.style.display = ""), "" === n.style.display && w(n) && (r[i] = st._data(n, "olddisplay", S(n.nodeName)))) : r[i] || w(n) || st._data(n, "olddisplay", st.css(n, "display")));
    }for (i = 0; o > i; i++) {
      n = e[i], n.style && (t && "none" !== n.style.display && "" !== n.style.display || (n.style.display = t ? r[i] || "" : "none"));
    }return e;
  }function C(e, t, n) {
    var r = mn.exec(t);return r ? Math.max(0, r[1] - (n || 0)) + (r[2] || "px") : t;
  }function k(e, t, n, r, i) {
    for (var o = n === (r ? "border" : "content") ? 4 : "width" === t ? 1 : 0, a = 0; 4 > o; o += 2) {
      "margin" === n && (a += st.css(e, n + wn[o], !0, i)), r ? ("content" === n && (a -= st.css(e, "padding" + wn[o], !0, i)), "margin" !== n && (a -= st.css(e, "border" + wn[o] + "Width", !0, i))) : (a += st.css(e, "padding" + wn[o], !0, i), "padding" !== n && (a += st.css(e, "border" + wn[o] + "Width", !0, i)));
    }return a;
  }function E(e, t, n) {
    var r = !0,
        i = "width" === t ? e.offsetWidth : e.offsetHeight,
        o = ln(e),
        a = st.support.boxSizing && "border-box" === st.css(e, "boxSizing", !1, o);if (0 >= i || null == i) {
      if (i = un(e, t, o), (0 > i || null == i) && (i = e.style[t]), yn.test(i)) return i;r = a && (st.support.boxSizingReliable || i === e.style[t]), i = parseFloat(i) || 0;
    }return i + k(e, t, n || (a ? "border" : "content"), r, o) + "px";
  }function S(e) {
    var t = V,
        n = bn[e];return n || (n = A(e, t), "none" !== n && n || (cn = (cn || st("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(t.documentElement), t = (cn[0].contentWindow || cn[0].contentDocument).document, t.write("<!doctype html><html><body>"), t.close(), n = A(e, t), cn.detach()), bn[e] = n), n;
  }function A(e, t) {
    var n = st(t.createElement(e)).appendTo(t.body),
        r = st.css(n[0], "display");return n.remove(), r;
  }function j(e, t, n, r) {
    var i;if (st.isArray(t)) st.each(t, function (t, i) {
      n || kn.test(e) ? r(e, i) : j(e + "[" + ("object" == (typeof i === "undefined" ? "undefined" : _typeof(i)) ? t : "") + "]", i, n, r);
    });else if (n || "object" !== st.type(t)) r(e, t);else for (i in t) {
      j(e + "[" + i + "]", t[i], n, r);
    }
  }function D(e) {
    return function (t, n) {
      "string" != typeof t && (n = t, t = "*");var r,
          i = 0,
          o = t.toLowerCase().match(lt) || [];if (st.isFunction(n)) for (; r = o[i++];) {
        "+" === r[0] ? (r = r.slice(1) || "*", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
      }
    };
  }function L(e, n, r, i) {
    function o(u) {
      var l;return a[u] = !0, st.each(e[u] || [], function (e, u) {
        var c = u(n, r, i);return "string" != typeof c || s || a[c] ? s ? !(l = c) : t : (n.dataTypes.unshift(c), o(c), !1);
      }), l;
    }var a = {},
        s = e === $n;return o(n.dataTypes[0]) || !a["*"] && o("*");
  }function H(e, n) {
    var r,
        i,
        o = st.ajaxSettings.flatOptions || {};for (r in n) {
      n[r] !== t && ((o[r] ? e : i || (i = {}))[r] = n[r]);
    }return i && st.extend(!0, e, i), e;
  }function M(e, n, r) {
    var i,
        o,
        a,
        s,
        u = e.contents,
        l = e.dataTypes,
        c = e.responseFields;for (o in c) {
      o in r && (n[c[o]] = r[o]);
    }for (; "*" === l[0];) {
      l.shift(), i === t && (i = e.mimeType || n.getResponseHeader("Content-Type"));
    }if (i) for (o in u) {
      if (u[o] && u[o].test(i)) {
        l.unshift(o);break;
      }
    }if (l[0] in r) a = l[0];else {
      for (o in r) {
        if (!l[0] || e.converters[o + " " + l[0]]) {
          a = o;break;
        }s || (s = o);
      }a = a || s;
    }return a ? (a !== l[0] && l.unshift(a), r[a]) : t;
  }function q(e, t) {
    var n,
        r,
        i,
        o,
        a = {},
        s = 0,
        u = e.dataTypes.slice(),
        l = u[0];if (e.dataFilter && (t = e.dataFilter(t, e.dataType)), u[1]) for (n in e.converters) {
      a[n.toLowerCase()] = e.converters[n];
    }for (; i = u[++s];) {
      if ("*" !== i) {
        if ("*" !== l && l !== i) {
          if (n = a[l + " " + i] || a["* " + i], !n) for (r in a) {
            if (o = r.split(" "), o[1] === i && (n = a[l + " " + o[0]] || a["* " + o[0]])) {
              n === !0 ? n = a[r] : a[r] !== !0 && (i = o[0], u.splice(s--, 0, i));break;
            }
          }if (n !== !0) if (n && e["throws"]) t = n(t);else try {
            t = n(t);
          } catch (c) {
            return { state: "parsererror", error: n ? c : "No conversion from " + l + " to " + i };
          }
        }l = i;
      }
    }return { state: "success", data: t };
  }function _() {
    try {
      return new e.XMLHttpRequest();
    } catch (t) {}
  }function F() {
    try {
      return new e.ActiveXObject("Microsoft.XMLHTTP");
    } catch (t) {}
  }function O() {
    return setTimeout(function () {
      Qn = t;
    }), Qn = st.now();
  }function B(e, t) {
    st.each(t, function (t, n) {
      for (var r = (rr[t] || []).concat(rr["*"]), i = 0, o = r.length; o > i; i++) {
        if (r[i].call(e, t, n)) return;
      }
    });
  }function P(e, t, n) {
    var r,
        i,
        o = 0,
        a = nr.length,
        s = st.Deferred().always(function () {
      delete u.elem;
    }),
        u = function u() {
      if (i) return !1;for (var t = Qn || O(), n = Math.max(0, l.startTime + l.duration - t), r = n / l.duration || 0, o = 1 - r, a = 0, u = l.tweens.length; u > a; a++) {
        l.tweens[a].run(o);
      }return s.notifyWith(e, [l, o, n]), 1 > o && u ? n : (s.resolveWith(e, [l]), !1);
    },
        l = s.promise({ elem: e, props: st.extend({}, t), opts: st.extend(!0, { specialEasing: {} }, n), originalProperties: t, originalOptions: n, startTime: Qn || O(), duration: n.duration, tweens: [], createTween: function createTween(t, n) {
        var r = st.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing);return l.tweens.push(r), r;
      }, stop: function stop(t) {
        var n = 0,
            r = t ? l.tweens.length : 0;if (i) return this;for (i = !0; r > n; n++) {
          l.tweens[n].run(1);
        }return t ? s.resolveWith(e, [l, t]) : s.rejectWith(e, [l, t]), this;
      } }),
        c = l.props;for (R(c, l.opts.specialEasing); a > o; o++) {
      if (r = nr[o].call(l, e, c, l.opts)) return r;
    }return B(l, c), st.isFunction(l.opts.start) && l.opts.start.call(e, l), st.fx.timer(st.extend(u, { elem: e, anim: l, queue: l.opts.queue })), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always);
  }function R(e, t) {
    var n, r, i, o, a;for (n in e) {
      if (r = st.camelCase(n), i = t[r], o = e[n], st.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), a = st.cssHooks[r], a && "expand" in a) {
        o = a.expand(o), delete e[r];for (n in o) {
          n in e || (e[n] = o[n], t[n] = i);
        }
      } else t[r] = i;
    }
  }function W(e, t, n) {
    var r,
        i,
        o,
        a,
        s,
        u,
        l,
        c,
        f,
        p = this,
        d = e.style,
        h = {},
        g = [],
        m = e.nodeType && w(e);n.queue || (c = st._queueHooks(e, "fx"), null == c.unqueued && (c.unqueued = 0, f = c.empty.fire, c.empty.fire = function () {
      c.unqueued || f();
    }), c.unqueued++, p.always(function () {
      p.always(function () {
        c.unqueued--, st.queue(e, "fx").length || c.empty.fire();
      });
    })), 1 === e.nodeType && ("height" in t || "width" in t) && (n.overflow = [d.overflow, d.overflowX, d.overflowY], "inline" === st.css(e, "display") && "none" === st.css(e, "float") && (st.support.inlineBlockNeedsLayout && "inline" !== S(e.nodeName) ? d.zoom = 1 : d.display = "inline-block")), n.overflow && (d.overflow = "hidden", st.support.shrinkWrapBlocks || p.done(function () {
      d.overflow = n.overflow[0], d.overflowX = n.overflow[1], d.overflowY = n.overflow[2];
    }));for (r in t) {
      if (o = t[r], Zn.exec(o)) {
        if (delete t[r], u = u || "toggle" === o, o === (m ? "hide" : "show")) continue;g.push(r);
      }
    }if (a = g.length) {
      s = st._data(e, "fxshow") || st._data(e, "fxshow", {}), "hidden" in s && (m = s.hidden), u && (s.hidden = !m), m ? st(e).show() : p.done(function () {
        st(e).hide();
      }), p.done(function () {
        var t;st._removeData(e, "fxshow");for (t in h) {
          st.style(e, t, h[t]);
        }
      });for (r = 0; a > r; r++) {
        i = g[r], l = p.createTween(i, m ? s[i] : 0), h[i] = s[i] || st.style(e, i), i in s || (s[i] = l.start, m && (l.end = l.start, l.start = "width" === i || "height" === i ? 1 : 0));
      }
    }
  }function $(e, t, n, r, i) {
    return new $.prototype.init(e, t, n, r, i);
  }function I(e, t) {
    var n,
        r = { height: e },
        i = 0;for (t = t ? 1 : 0; 4 > i; i += 2 - t) {
      n = wn[i], r["margin" + n] = r["padding" + n] = e;
    }return t && (r.opacity = r.width = e), r;
  }function z(e) {
    return st.isWindow(e) ? e : 9 === e.nodeType ? e.defaultView || e.parentWindow : !1;
  }var X,
      U,
      V = e.document,
      Y = e.location,
      J = e.jQuery,
      G = e.$,
      Q = {},
      K = [],
      Z = "1.9.0",
      et = K.concat,
      tt = K.push,
      nt = K.slice,
      rt = K.indexOf,
      it = Q.toString,
      ot = Q.hasOwnProperty,
      at = Z.trim,
      st = function st(e, t) {
    return new st.fn.init(e, t, X);
  },
      ut = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      lt = /\S+/g,
      ct = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      ft = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,
      pt = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
      dt = /^[\],:{}\s]*$/,
      ht = /(?:^|:|,)(?:\s*\[)+/g,
      gt = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
      mt = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,
      yt = /^-ms-/,
      vt = /-([\da-z])/gi,
      bt = function bt(e, t) {
    return t.toUpperCase();
  },
      xt = function xt() {
    V.addEventListener ? (V.removeEventListener("DOMContentLoaded", xt, !1), st.ready()) : "complete" === V.readyState && (V.detachEvent("onreadystatechange", xt), st.ready());
  };st.fn = st.prototype = { jquery: Z, constructor: st, init: function init(e, n, r) {
      var i, o;if (!e) return this;if ("string" == typeof e) {
        if (i = "<" === e.charAt(0) && ">" === e.charAt(e.length - 1) && e.length >= 3 ? [null, e, null] : ft.exec(e), !i || !i[1] && n) return !n || n.jquery ? (n || r).find(e) : this.constructor(n).find(e);if (i[1]) {
          if (n = n instanceof st ? n[0] : n, st.merge(this, st.parseHTML(i[1], n && n.nodeType ? n.ownerDocument || n : V, !0)), pt.test(i[1]) && st.isPlainObject(n)) for (i in n) {
            st.isFunction(this[i]) ? this[i](n[i]) : this.attr(i, n[i]);
          }return this;
        }if (o = V.getElementById(i[2]), o && o.parentNode) {
          if (o.id !== i[2]) return r.find(e);this.length = 1, this[0] = o;
        }return this.context = V, this.selector = e, this;
      }return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : st.isFunction(e) ? r.ready(e) : (e.selector !== t && (this.selector = e.selector, this.context = e.context), st.makeArray(e, this));
    }, selector: "", length: 0, size: function size() {
      return this.length;
    }, toArray: function toArray() {
      return nt.call(this);
    }, get: function get(e) {
      return null == e ? this.toArray() : 0 > e ? this[this.length + e] : this[e];
    }, pushStack: function pushStack(e) {
      var t = st.merge(this.constructor(), e);return t.prevObject = this, t.context = this.context, t;
    }, each: function each(e, t) {
      return st.each(this, e, t);
    }, ready: function ready(e) {
      return st.ready.promise().done(e), this;
    }, slice: function slice() {
      return this.pushStack(nt.apply(this, arguments));
    }, first: function first() {
      return this.eq(0);
    }, last: function last() {
      return this.eq(-1);
    }, eq: function eq(e) {
      var t = this.length,
          n = +e + (0 > e ? t : 0);return this.pushStack(n >= 0 && t > n ? [this[n]] : []);
    }, map: function map(e) {
      return this.pushStack(st.map(this, function (t, n) {
        return e.call(t, n, t);
      }));
    }, end: function end() {
      return this.prevObject || this.constructor(null);
    }, push: tt, sort: [].sort, splice: [].splice }, st.fn.init.prototype = st.fn, st.extend = st.fn.extend = function () {
    var e,
        n,
        r,
        i,
        o,
        a,
        s = arguments[0] || {},
        u = 1,
        l = arguments.length,
        c = !1;for ("boolean" == typeof s && (c = s, s = arguments[1] || {}, u = 2), "object" == (typeof s === "undefined" ? "undefined" : _typeof(s)) || st.isFunction(s) || (s = {}), l === u && (s = this, --u); l > u; u++) {
      if (null != (e = arguments[u])) for (n in e) {
        r = s[n], i = e[n], s !== i && (c && i && (st.isPlainObject(i) || (o = st.isArray(i))) ? (o ? (o = !1, a = r && st.isArray(r) ? r : []) : a = r && st.isPlainObject(r) ? r : {}, s[n] = st.extend(c, a, i)) : i !== t && (s[n] = i));
      }
    }return s;
  }, st.extend({ noConflict: function noConflict(t) {
      return e.$ === st && (e.$ = G), t && e.jQuery === st && (e.jQuery = J), st;
    }, isReady: !1, readyWait: 1, holdReady: function holdReady(e) {
      e ? st.readyWait++ : st.ready(!0);
    }, ready: function ready(e) {
      if (e === !0 ? ! --st.readyWait : !st.isReady) {
        if (!V.body) return setTimeout(st.ready);st.isReady = !0, e !== !0 && --st.readyWait > 0 || (U.resolveWith(V, [st]), st.fn.trigger && st(V).trigger("ready").off("ready"));
      }
    }, isFunction: function isFunction(e) {
      return "function" === st.type(e);
    }, isArray: Array.isArray || function (e) {
      return "array" === st.type(e);
    }, isWindow: function isWindow(e) {
      return null != e && e == e.window;
    }, isNumeric: function isNumeric(e) {
      return !isNaN(parseFloat(e)) && isFinite(e);
    }, type: function type(e) {
      return null == e ? e + "" : "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) || "function" == typeof e ? Q[it.call(e)] || "object" : typeof e === "undefined" ? "undefined" : _typeof(e);
    }, isPlainObject: function isPlainObject(e) {
      if (!e || "object" !== st.type(e) || e.nodeType || st.isWindow(e)) return !1;try {
        if (e.constructor && !ot.call(e, "constructor") && !ot.call(e.constructor.prototype, "isPrototypeOf")) return !1;
      } catch (n) {
        return !1;
      }var r;for (r in e) {}return r === t || ot.call(e, r);
    }, isEmptyObject: function isEmptyObject(e) {
      var t;for (t in e) {
        return !1;
      }return !0;
    }, error: function error(e) {
      throw Error(e);
    }, parseHTML: function parseHTML(e, t, n) {
      if (!e || "string" != typeof e) return null;"boolean" == typeof t && (n = t, t = !1), t = t || V;var r = pt.exec(e),
          i = !n && [];return r ? [t.createElement(r[1])] : (r = st.buildFragment([e], t, i), i && st(i).remove(), st.merge([], r.childNodes));
    }, parseJSON: function parseJSON(n) {
      return e.JSON && e.JSON.parse ? e.JSON.parse(n) : null === n ? n : "string" == typeof n && (n = st.trim(n), n && dt.test(n.replace(gt, "@").replace(mt, "]").replace(ht, ""))) ? Function("return " + n)() : (st.error("Invalid JSON: " + n), t);
    }, parseXML: function parseXML(n) {
      var r, i;if (!n || "string" != typeof n) return null;try {
        e.DOMParser ? (i = new DOMParser(), r = i.parseFromString(n, "text/xml")) : (r = new ActiveXObject("Microsoft.XMLDOM"), r.async = "false", r.loadXML(n));
      } catch (o) {
        r = t;
      }return r && r.documentElement && !r.getElementsByTagName("parsererror").length || st.error("Invalid XML: " + n), r;
    }, noop: function noop() {}, globalEval: function globalEval(t) {
      t && st.trim(t) && (e.execScript || function (t) {
        e.eval.call(e, t);
      })(t);
    }, camelCase: function camelCase(e) {
      return e.replace(yt, "ms-").replace(vt, bt);
    }, nodeName: function nodeName(e, t) {
      return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }, each: function each(e, t, r) {
      var i,
          o = 0,
          a = e.length,
          s = n(e);if (r) {
        if (s) for (; a > o && (i = t.apply(e[o], r), i !== !1); o++) {} else for (o in e) {
          if (i = t.apply(e[o], r), i === !1) break;
        }
      } else if (s) for (; a > o && (i = t.call(e[o], o, e[o]), i !== !1); o++) {} else for (o in e) {
        if (i = t.call(e[o], o, e[o]), i === !1) break;
      }return e;
    }, trim: at && !at.call("\uFEFF\xA0") ? function (e) {
      return null == e ? "" : at.call(e);
    } : function (e) {
      return null == e ? "" : (e + "").replace(ct, "");
    }, makeArray: function makeArray(e, t) {
      var r = t || [];return null != e && (n(Object(e)) ? st.merge(r, "string" == typeof e ? [e] : e) : tt.call(r, e)), r;
    }, inArray: function inArray(e, t, n) {
      var r;if (t) {
        if (rt) return rt.call(t, e, n);for (r = t.length, n = n ? 0 > n ? Math.max(0, r + n) : n : 0; r > n; n++) {
          if (n in t && t[n] === e) return n;
        }
      }return -1;
    }, merge: function merge(e, n) {
      var r = n.length,
          i = e.length,
          o = 0;if ("number" == typeof r) for (; r > o; o++) {
        e[i++] = n[o];
      } else for (; n[o] !== t;) {
        e[i++] = n[o++];
      }return e.length = i, e;
    }, grep: function grep(e, t, n) {
      var r,
          i = [],
          o = 0,
          a = e.length;for (n = !!n; a > o; o++) {
        r = !!t(e[o], o), n !== r && i.push(e[o]);
      }return i;
    }, map: function map(e, t, r) {
      var i,
          o = 0,
          a = e.length,
          s = n(e),
          u = [];if (s) for (; a > o; o++) {
        i = t(e[o], o, r), null != i && (u[u.length] = i);
      } else for (o in e) {
        i = t(e[o], o, r), null != i && (u[u.length] = i);
      }return et.apply([], u);
    }, guid: 1, proxy: function proxy(e, n) {
      var r, i, o;return "string" == typeof n && (r = e[n], n = e, e = r), st.isFunction(e) ? (i = nt.call(arguments, 2), o = function o() {
        return e.apply(n || this, i.concat(nt.call(arguments)));
      }, o.guid = e.guid = e.guid || st.guid++, o) : t;
    }, access: function access(e, n, r, i, o, a, s) {
      var u = 0,
          l = e.length,
          c = null == r;if ("object" === st.type(r)) {
        o = !0;for (u in r) {
          st.access(e, n, u, r[u], !0, a, s);
        }
      } else if (i !== t && (o = !0, st.isFunction(i) || (s = !0), c && (s ? (n.call(e, i), n = null) : (c = n, n = function n(e, t, _n2) {
        return c.call(st(e), _n2);
      })), n)) for (; l > u; u++) {
        n(e[u], r, s ? i : i.call(e[u], u, n(e[u], r)));
      }return o ? e : c ? n.call(e) : l ? n(e[0], r) : a;
    }, now: function now() {
      return new Date().getTime();
    } }), st.ready.promise = function (t) {
    if (!U) if (U = st.Deferred(), "complete" === V.readyState) setTimeout(st.ready);else if (V.addEventListener) V.addEventListener("DOMContentLoaded", xt, !1), e.addEventListener("load", st.ready, !1);else {
      V.attachEvent("onreadystatechange", xt), e.attachEvent("onload", st.ready);var n = !1;try {
        n = null == e.frameElement && V.documentElement;
      } catch (r) {}n && n.doScroll && function i() {
        if (!st.isReady) {
          try {
            n.doScroll("left");
          } catch (e) {
            return setTimeout(i, 50);
          }st.ready();
        }
      }();
    }return U.promise(t);
  }, st.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (e, t) {
    Q["[object " + t + "]"] = t.toLowerCase();
  }), X = st(V);var Tt = {};st.Callbacks = function (e) {
    e = "string" == typeof e ? Tt[e] || r(e) : st.extend({}, e);var n,
        i,
        o,
        a,
        s,
        u,
        l = [],
        c = !e.once && [],
        f = function f(t) {
      for (n = e.memory && t, i = !0, u = a || 0, a = 0, s = l.length, o = !0; l && s > u; u++) {
        if (l[u].apply(t[0], t[1]) === !1 && e.stopOnFalse) {
          n = !1;break;
        }
      }o = !1, l && (c ? c.length && f(c.shift()) : n ? l = [] : p.disable());
    },
        p = { add: function add() {
        if (l) {
          var t = l.length;(function r(t) {
            st.each(t, function (t, n) {
              var i = st.type(n);"function" === i ? e.unique && p.has(n) || l.push(n) : n && n.length && "string" !== i && r(n);
            });
          })(arguments), o ? s = l.length : n && (a = t, f(n));
        }return this;
      }, remove: function remove() {
        return l && st.each(arguments, function (e, t) {
          for (var n; (n = st.inArray(t, l, n)) > -1;) {
            l.splice(n, 1), o && (s >= n && s--, u >= n && u--);
          }
        }), this;
      }, has: function has(e) {
        return st.inArray(e, l) > -1;
      }, empty: function empty() {
        return l = [], this;
      }, disable: function disable() {
        return l = c = n = t, this;
      }, disabled: function disabled() {
        return !l;
      }, lock: function lock() {
        return c = t, n || p.disable(), this;
      }, locked: function locked() {
        return !c;
      }, fireWith: function fireWith(e, t) {
        return t = t || [], t = [e, t.slice ? t.slice() : t], !l || i && !c || (o ? c.push(t) : f(t)), this;
      }, fire: function fire() {
        return p.fireWith(this, arguments), this;
      }, fired: function fired() {
        return !!i;
      } };return p;
  }, st.extend({ Deferred: function Deferred(e) {
      var t = [["resolve", "done", st.Callbacks("once memory"), "resolved"], ["reject", "fail", st.Callbacks("once memory"), "rejected"], ["notify", "progress", st.Callbacks("memory")]],
          n = "pending",
          r = { state: function state() {
          return n;
        }, always: function always() {
          return i.done(arguments).fail(arguments), this;
        }, then: function then() {
          var e = arguments;return st.Deferred(function (n) {
            st.each(t, function (t, o) {
              var a = o[0],
                  s = st.isFunction(e[t]) && e[t];i[o[1]](function () {
                var e = s && s.apply(this, arguments);e && st.isFunction(e.promise) ? e.promise().done(n.resolve).fail(n.reject).progress(n.notify) : n[a + "With"](this === r ? n.promise() : this, s ? [e] : arguments);
              });
            }), e = null;
          }).promise();
        }, promise: function promise(e) {
          return null != e ? st.extend(e, r) : r;
        } },
          i = {};return r.pipe = r.then, st.each(t, function (e, o) {
        var a = o[2],
            s = o[3];r[o[1]] = a.add, s && a.add(function () {
          n = s;
        }, t[1 ^ e][2].disable, t[2][2].lock), i[o[0]] = function () {
          return i[o[0] + "With"](this === i ? r : this, arguments), this;
        }, i[o[0] + "With"] = a.fireWith;
      }), r.promise(i), e && e.call(i, i), i;
    }, when: function when(e) {
      var t,
          n,
          r,
          i = 0,
          o = nt.call(arguments),
          a = o.length,
          s = 1 !== a || e && st.isFunction(e.promise) ? a : 0,
          u = 1 === s ? e : st.Deferred(),
          l = function l(e, n, r) {
        return function (i) {
          n[e] = this, r[e] = arguments.length > 1 ? nt.call(arguments) : i, r === t ? u.notifyWith(n, r) : --s || u.resolveWith(n, r);
        };
      };if (a > 1) for (t = Array(a), n = Array(a), r = Array(a); a > i; i++) {
        o[i] && st.isFunction(o[i].promise) ? o[i].promise().done(l(i, r, o)).fail(u.reject).progress(l(i, n, t)) : --s;
      }return s || u.resolveWith(r, o), u.promise();
    } }), st.support = function () {
    var n,
        r,
        i,
        o,
        a,
        s,
        u,
        l,
        c,
        f,
        p = V.createElement("div");if (p.setAttribute("className", "t"), p.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", r = p.getElementsByTagName("*"), i = p.getElementsByTagName("a")[0], !r || !i || !r.length) return {};o = V.createElement("select"), a = o.appendChild(V.createElement("option")), s = p.getElementsByTagName("input")[0], i.style.cssText = "top:1px;float:left;opacity:.5", n = { getSetAttribute: "t" !== p.className, leadingWhitespace: 3 === p.firstChild.nodeType, tbody: !p.getElementsByTagName("tbody").length, htmlSerialize: !!p.getElementsByTagName("link").length, style: /top/.test(i.getAttribute("style")), hrefNormalized: "/a" === i.getAttribute("href"), opacity: /^0.5/.test(i.style.opacity), cssFloat: !!i.style.cssFloat, checkOn: !!s.value, optSelected: a.selected, enctype: !!V.createElement("form").enctype, html5Clone: "<:nav></:nav>" !== V.createElement("nav").cloneNode(!0).outerHTML, boxModel: "CSS1Compat" === V.compatMode, deleteExpando: !0, noCloneEvent: !0, inlineBlockNeedsLayout: !1, shrinkWrapBlocks: !1, reliableMarginRight: !0, boxSizingReliable: !0, pixelPosition: !1 }, s.checked = !0, n.noCloneChecked = s.cloneNode(!0).checked, o.disabled = !0, n.optDisabled = !a.disabled;try {
      delete p.test;
    } catch (d) {
      n.deleteExpando = !1;
    }s = V.createElement("input"), s.setAttribute("value", ""), n.input = "" === s.getAttribute("value"), s.value = "t", s.setAttribute("type", "radio"), n.radioValue = "t" === s.value, s.setAttribute("checked", "t"), s.setAttribute("name", "t"), u = V.createDocumentFragment(), u.appendChild(s), n.appendChecked = s.checked, n.checkClone = u.cloneNode(!0).cloneNode(!0).lastChild.checked, p.attachEvent && (p.attachEvent("onclick", function () {
      n.noCloneEvent = !1;
    }), p.cloneNode(!0).click());for (f in { submit: !0, change: !0, focusin: !0 }) {
      p.setAttribute(l = "on" + f, "t"), n[f + "Bubbles"] = l in e || p.attributes[l].expando === !1;
    }return p.style.backgroundClip = "content-box", p.cloneNode(!0).style.backgroundClip = "", n.clearCloneStyle = "content-box" === p.style.backgroundClip, st(function () {
      var r,
          i,
          o,
          a = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
          s = V.getElementsByTagName("body")[0];s && (r = V.createElement("div"), r.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px", s.appendChild(r).appendChild(p), p.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", o = p.getElementsByTagName("td"), o[0].style.cssText = "padding:0;margin:0;border:0;display:none", c = 0 === o[0].offsetHeight, o[0].style.display = "", o[1].style.display = "none", n.reliableHiddenOffsets = c && 0 === o[0].offsetHeight, p.innerHTML = "", p.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;", n.boxSizing = 4 === p.offsetWidth, n.doesNotIncludeMarginInBodyOffset = 1 !== s.offsetTop, e.getComputedStyle && (n.pixelPosition = "1%" !== (e.getComputedStyle(p, null) || {}).top, n.boxSizingReliable = "4px" === (e.getComputedStyle(p, null) || { width: "4px" }).width, i = p.appendChild(V.createElement("div")), i.style.cssText = p.style.cssText = a, i.style.marginRight = i.style.width = "0", p.style.width = "1px", n.reliableMarginRight = !parseFloat((e.getComputedStyle(i, null) || {}).marginRight)), p.style.zoom !== t && (p.innerHTML = "", p.style.cssText = a + "width:1px;padding:1px;display:inline;zoom:1", n.inlineBlockNeedsLayout = 3 === p.offsetWidth, p.style.display = "block", p.innerHTML = "<div></div>", p.firstChild.style.width = "5px", n.shrinkWrapBlocks = 3 !== p.offsetWidth, s.style.zoom = 1), s.removeChild(r), r = p = o = i = null);
    }), r = o = u = a = i = s = null, n;
  }();var wt = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
      Nt = /([A-Z])/g;st.extend({ cache: {}, expando: "jQuery" + (Z + Math.random()).replace(/\D/g, ""), noData: { embed: !0, object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000", applet: !0 }, hasData: function hasData(e) {
      return e = e.nodeType ? st.cache[e[st.expando]] : e[st.expando], !!e && !s(e);
    }, data: function data(e, t, n) {
      return i(e, t, n, !1);
    }, removeData: function removeData(e, t) {
      return o(e, t, !1);
    }, _data: function _data(e, t, n) {
      return i(e, t, n, !0);
    }, _removeData: function _removeData(e, t) {
      return o(e, t, !0);
    }, acceptData: function acceptData(e) {
      var t = e.nodeName && st.noData[e.nodeName.toLowerCase()];return !t || t !== !0 && e.getAttribute("classid") === t;
    } }), st.fn.extend({ data: function data(e, n) {
      var r,
          i,
          o = this[0],
          s = 0,
          u = null;if (e === t) {
        if (this.length && (u = st.data(o), 1 === o.nodeType && !st._data(o, "parsedAttrs"))) {
          for (r = o.attributes; r.length > s; s++) {
            i = r[s].name, i.indexOf("data-") || (i = st.camelCase(i.substring(5)), a(o, i, u[i]));
          }st._data(o, "parsedAttrs", !0);
        }return u;
      }return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? this.each(function () {
        st.data(this, e);
      }) : st.access(this, function (n) {
        return n === t ? o ? a(o, e, st.data(o, e)) : null : (this.each(function () {
          st.data(this, e, n);
        }), t);
      }, null, n, arguments.length > 1, null, !0);
    }, removeData: function removeData(e) {
      return this.each(function () {
        st.removeData(this, e);
      });
    } }), st.extend({ queue: function queue(e, n, r) {
      var i;return e ? (n = (n || "fx") + "queue", i = st._data(e, n), r && (!i || st.isArray(r) ? i = st._data(e, n, st.makeArray(r)) : i.push(r)), i || []) : t;
    }, dequeue: function dequeue(e, t) {
      t = t || "fx";var n = st.queue(e, t),
          r = n.length,
          i = n.shift(),
          o = st._queueHooks(e, t),
          a = function a() {
        st.dequeue(e, t);
      };"inprogress" === i && (i = n.shift(), r--), o.cur = i, i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire();
    }, _queueHooks: function _queueHooks(e, t) {
      var n = t + "queueHooks";return st._data(e, n) || st._data(e, n, { empty: st.Callbacks("once memory").add(function () {
          st._removeData(e, t + "queue"), st._removeData(e, n);
        }) });
    } }), st.fn.extend({ queue: function queue(e, n) {
      var r = 2;return "string" != typeof e && (n = e, e = "fx", r--), r > arguments.length ? st.queue(this[0], e) : n === t ? this : this.each(function () {
        var t = st.queue(this, e, n);st._queueHooks(this, e), "fx" === e && "inprogress" !== t[0] && st.dequeue(this, e);
      });
    }, dequeue: function dequeue(e) {
      return this.each(function () {
        st.dequeue(this, e);
      });
    }, delay: function delay(e, t) {
      return e = st.fx ? st.fx.speeds[e] || e : e, t = t || "fx", this.queue(t, function (t, n) {
        var r = setTimeout(t, e);n.stop = function () {
          clearTimeout(r);
        };
      });
    }, clearQueue: function clearQueue(e) {
      return this.queue(e || "fx", []);
    }, promise: function promise(e, n) {
      var r,
          i = 1,
          o = st.Deferred(),
          a = this,
          s = this.length,
          u = function u() {
        --i || o.resolveWith(a, [a]);
      };for ("string" != typeof e && (n = e, e = t), e = e || "fx"; s--;) {
        r = st._data(a[s], e + "queueHooks"), r && r.empty && (i++, r.empty.add(u));
      }return u(), o.promise(n);
    } });var Ct,
      kt,
      Et = /[\t\r\n]/g,
      St = /\r/g,
      At = /^(?:input|select|textarea|button|object)$/i,
      jt = /^(?:a|area)$/i,
      Dt = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
      Lt = /^(?:checked|selected)$/i,
      Ht = st.support.getSetAttribute,
      Mt = st.support.input;st.fn.extend({ attr: function attr(e, t) {
      return st.access(this, st.attr, e, t, arguments.length > 1);
    }, removeAttr: function removeAttr(e) {
      return this.each(function () {
        st.removeAttr(this, e);
      });
    }, prop: function prop(e, t) {
      return st.access(this, st.prop, e, t, arguments.length > 1);
    }, removeProp: function removeProp(e) {
      return e = st.propFix[e] || e, this.each(function () {
        try {
          this[e] = t, delete this[e];
        } catch (n) {}
      });
    }, addClass: function addClass(e) {
      var t,
          n,
          r,
          i,
          o,
          a = 0,
          s = this.length,
          u = "string" == typeof e && e;if (st.isFunction(e)) return this.each(function (t) {
        st(this).addClass(e.call(this, t, this.className));
      });if (u) for (t = (e || "").match(lt) || []; s > a; a++) {
        if (n = this[a], r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(Et, " ") : " ")) {
          for (o = 0; i = t[o++];) {
            0 > r.indexOf(" " + i + " ") && (r += i + " ");
          }n.className = st.trim(r);
        }
      }return this;
    }, removeClass: function removeClass(e) {
      var t,
          n,
          r,
          i,
          o,
          a = 0,
          s = this.length,
          u = 0 === arguments.length || "string" == typeof e && e;if (st.isFunction(e)) return this.each(function (t) {
        st(this).removeClass(e.call(this, t, this.className));
      });if (u) for (t = (e || "").match(lt) || []; s > a; a++) {
        if (n = this[a], r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(Et, " ") : "")) {
          for (o = 0; i = t[o++];) {
            for (; r.indexOf(" " + i + " ") >= 0;) {
              r = r.replace(" " + i + " ", " ");
            }
          }n.className = e ? st.trim(r) : "";
        }
      }return this;
    }, toggleClass: function toggleClass(e, t) {
      var n = typeof e === "undefined" ? "undefined" : _typeof(e),
          r = "boolean" == typeof t;return st.isFunction(e) ? this.each(function (n) {
        st(this).toggleClass(e.call(this, n, this.className, t), t);
      }) : this.each(function () {
        if ("string" === n) for (var i, o = 0, a = st(this), s = t, u = e.match(lt) || []; i = u[o++];) {
          s = r ? s : !a.hasClass(i), a[s ? "addClass" : "removeClass"](i);
        } else ("undefined" === n || "boolean" === n) && (this.className && st._data(this, "__className__", this.className), this.className = this.className || e === !1 ? "" : st._data(this, "__className__") || "");
      });
    }, hasClass: function hasClass(e) {
      for (var t = " " + e + " ", n = 0, r = this.length; r > n; n++) {
        if (1 === this[n].nodeType && (" " + this[n].className + " ").replace(Et, " ").indexOf(t) >= 0) return !0;
      }return !1;
    }, val: function val(e) {
      var n,
          r,
          i,
          o = this[0];{
        if (arguments.length) return i = st.isFunction(e), this.each(function (r) {
          var o,
              a = st(this);1 === this.nodeType && (o = i ? e.call(this, r, a.val()) : e, null == o ? o = "" : "number" == typeof o ? o += "" : st.isArray(o) && (o = st.map(o, function (e) {
            return null == e ? "" : e + "";
          })), n = st.valHooks[this.type] || st.valHooks[this.nodeName.toLowerCase()], n && "set" in n && n.set(this, o, "value") !== t || (this.value = o));
        });if (o) return n = st.valHooks[o.type] || st.valHooks[o.nodeName.toLowerCase()], n && "get" in n && (r = n.get(o, "value")) !== t ? r : (r = o.value, "string" == typeof r ? r.replace(St, "") : null == r ? "" : r);
      }
    } }), st.extend({ valHooks: { option: { get: function get(e) {
          var t = e.attributes.value;return !t || t.specified ? e.value : e.text;
        } }, select: { get: function get(e) {
          for (var t, n, r = e.options, i = e.selectedIndex, o = "select-one" === e.type || 0 > i, a = o ? null : [], s = o ? i + 1 : r.length, u = 0 > i ? s : o ? i : 0; s > u; u++) {
            if (n = r[u], !(!n.selected && u !== i || (st.support.optDisabled ? n.disabled : null !== n.getAttribute("disabled")) || n.parentNode.disabled && st.nodeName(n.parentNode, "optgroup"))) {
              if (t = st(n).val(), o) return t;a.push(t);
            }
          }return a;
        }, set: function set(e, t) {
          var n = st.makeArray(t);return st(e).find("option").each(function () {
            this.selected = st.inArray(st(this).val(), n) >= 0;
          }), n.length || (e.selectedIndex = -1), n;
        } } }, attr: function attr(e, n, r) {
      var i,
          o,
          a,
          s = e.nodeType;if (e && 3 !== s && 8 !== s && 2 !== s) return e.getAttribute === t ? st.prop(e, n, r) : (a = 1 !== s || !st.isXMLDoc(e), a && (n = n.toLowerCase(), o = st.attrHooks[n] || (Dt.test(n) ? kt : Ct)), r === t ? o && a && "get" in o && null !== (i = o.get(e, n)) ? i : (e.getAttribute !== t && (i = e.getAttribute(n)), null == i ? t : i) : null !== r ? o && a && "set" in o && (i = o.set(e, r, n)) !== t ? i : (e.setAttribute(n, r + ""), r) : (st.removeAttr(e, n), t));
    }, removeAttr: function removeAttr(e, t) {
      var n,
          r,
          i = 0,
          o = t && t.match(lt);if (o && 1 === e.nodeType) for (; n = o[i++];) {
        r = st.propFix[n] || n, Dt.test(n) ? !Ht && Lt.test(n) ? e[st.camelCase("default-" + n)] = e[r] = !1 : e[r] = !1 : st.attr(e, n, ""), e.removeAttribute(Ht ? n : r);
      }
    }, attrHooks: { type: { set: function set(e, t) {
          if (!st.support.radioValue && "radio" === t && st.nodeName(e, "input")) {
            var n = e.value;return e.setAttribute("type", t), n && (e.value = n), t;
          }
        } } }, propFix: { tabindex: "tabIndex", readonly: "readOnly", "for": "htmlFor", "class": "className", maxlength: "maxLength", cellspacing: "cellSpacing", cellpadding: "cellPadding", rowspan: "rowSpan", colspan: "colSpan", usemap: "useMap", frameborder: "frameBorder", contenteditable: "contentEditable" }, prop: function prop(e, n, r) {
      var i,
          o,
          a,
          s = e.nodeType;if (e && 3 !== s && 8 !== s && 2 !== s) return a = 1 !== s || !st.isXMLDoc(e), a && (n = st.propFix[n] || n, o = st.propHooks[n]), r !== t ? o && "set" in o && (i = o.set(e, r, n)) !== t ? i : e[n] = r : o && "get" in o && null !== (i = o.get(e, n)) ? i : e[n];
    }, propHooks: { tabIndex: { get: function get(e) {
          var n = e.getAttributeNode("tabindex");return n && n.specified ? parseInt(n.value, 10) : At.test(e.nodeName) || jt.test(e.nodeName) && e.href ? 0 : t;
        } } } }), kt = { get: function get(e, n) {
      var r = st.prop(e, n),
          i = "boolean" == typeof r && e.getAttribute(n),
          o = "boolean" == typeof r ? Mt && Ht ? null != i : Lt.test(n) ? e[st.camelCase("default-" + n)] : !!i : e.getAttributeNode(n);return o && o.value !== !1 ? n.toLowerCase() : t;
    }, set: function set(e, t, n) {
      return t === !1 ? st.removeAttr(e, n) : Mt && Ht || !Lt.test(n) ? e.setAttribute(!Ht && st.propFix[n] || n, n) : e[st.camelCase("default-" + n)] = e[n] = !0, n;
    } }, Mt && Ht || (st.attrHooks.value = { get: function get(e, n) {
      var r = e.getAttributeNode(n);return st.nodeName(e, "input") ? e.defaultValue : r && r.specified ? r.value : t;
    }, set: function set(e, n, r) {
      return st.nodeName(e, "input") ? (e.defaultValue = n, t) : Ct && Ct.set(e, n, r);
    } }), Ht || (Ct = st.valHooks.button = { get: function get(e, n) {
      var r = e.getAttributeNode(n);return r && ("id" === n || "name" === n || "coords" === n ? "" !== r.value : r.specified) ? r.value : t;
    }, set: function set(e, n, r) {
      var i = e.getAttributeNode(r);return i || e.setAttributeNode(i = e.ownerDocument.createAttribute(r)), i.value = n += "", "value" === r || n === e.getAttribute(r) ? n : t;
    } }, st.attrHooks.contenteditable = { get: Ct.get, set: function set(e, t, n) {
      Ct.set(e, "" === t ? !1 : t, n);
    } }, st.each(["width", "height"], function (e, n) {
    st.attrHooks[n] = st.extend(st.attrHooks[n], { set: function set(e, r) {
        return "" === r ? (e.setAttribute(n, "auto"), r) : t;
      } });
  })), st.support.hrefNormalized || (st.each(["href", "src", "width", "height"], function (e, n) {
    st.attrHooks[n] = st.extend(st.attrHooks[n], { get: function get(e) {
        var r = e.getAttribute(n, 2);return null == r ? t : r;
      } });
  }), st.each(["href", "src"], function (e, t) {
    st.propHooks[t] = { get: function get(e) {
        return e.getAttribute(t, 4);
      } };
  })), st.support.style || (st.attrHooks.style = { get: function get(e) {
      return e.style.cssText || t;
    }, set: function set(e, t) {
      return e.style.cssText = t + "";
    } }), st.support.optSelected || (st.propHooks.selected = st.extend(st.propHooks.selected, { get: function get(e) {
      var t = e.parentNode;return t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex), null;
    } })), st.support.enctype || (st.propFix.enctype = "encoding"), st.support.checkOn || st.each(["radio", "checkbox"], function () {
    st.valHooks[this] = { get: function get(e) {
        return null === e.getAttribute("value") ? "on" : e.value;
      } };
  }), st.each(["radio", "checkbox"], function () {
    st.valHooks[this] = st.extend(st.valHooks[this], { set: function set(e, n) {
        return st.isArray(n) ? e.checked = st.inArray(st(e).val(), n) >= 0 : t;
      } });
  });var qt = /^(?:input|select|textarea)$/i,
      _t = /^key/,
      Ft = /^(?:mouse|contextmenu)|click/,
      Ot = /^(?:focusinfocus|focusoutblur)$/,
      Bt = /^([^.]*)(?:\.(.+)|)$/;st.event = { global: {}, add: function add(e, n, r, i, o) {
      var a,
          s,
          u,
          l,
          c,
          f,
          p,
          d,
          h,
          g,
          m,
          y = 3 !== e.nodeType && 8 !== e.nodeType && st._data(e);if (y) {
        for (r.handler && (a = r, r = a.handler, o = a.selector), r.guid || (r.guid = st.guid++), (l = y.events) || (l = y.events = {}), (s = y.handle) || (s = y.handle = function (e) {
          return st === t || e && st.event.triggered === e.type ? t : st.event.dispatch.apply(s.elem, arguments);
        }, s.elem = e), n = (n || "").match(lt) || [""], c = n.length; c--;) {
          u = Bt.exec(n[c]) || [], h = m = u[1], g = (u[2] || "").split(".").sort(), p = st.event.special[h] || {}, h = (o ? p.delegateType : p.bindType) || h, p = st.event.special[h] || {}, f = st.extend({ type: h, origType: m, data: i, handler: r, guid: r.guid, selector: o, needsContext: o && st.expr.match.needsContext.test(o), namespace: g.join(".") }, a), (d = l[h]) || (d = l[h] = [], d.delegateCount = 0, p.setup && p.setup.call(e, i, g, s) !== !1 || (e.addEventListener ? e.addEventListener(h, s, !1) : e.attachEvent && e.attachEvent("on" + h, s))), p.add && (p.add.call(e, f), f.handler.guid || (f.handler.guid = r.guid)), o ? d.splice(d.delegateCount++, 0, f) : d.push(f), st.event.global[h] = !0;
        }e = null;
      }
    }, remove: function remove(e, t, n, r, i) {
      var o,
          a,
          s,
          u,
          l,
          c,
          f,
          p,
          d,
          h,
          g,
          m = st.hasData(e) && st._data(e);if (m && (u = m.events)) {
        for (t = (t || "").match(lt) || [""], l = t.length; l--;) {
          if (s = Bt.exec(t[l]) || [], d = g = s[1], h = (s[2] || "").split(".").sort(), d) {
            for (f = st.event.special[d] || {}, d = (r ? f.delegateType : f.bindType) || d, p = u[d] || [], s = s[2] && RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = p.length; o--;) {
              c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
            }a && !p.length && (f.teardown && f.teardown.call(e, h, m.handle) !== !1 || st.removeEvent(e, d, m.handle), delete u[d]);
          } else for (d in u) {
            st.event.remove(e, d + t[l], n, r, !0);
          }
        }st.isEmptyObject(u) && (delete m.handle, st._removeData(e, "events"));
      }
    }, trigger: function trigger(n, r, i, o) {
      var a,
          s,
          u,
          l,
          c,
          f,
          p,
          d = [i || V],
          h = n.type || n,
          g = n.namespace ? n.namespace.split(".") : [];if (s = u = i = i || V, 3 !== i.nodeType && 8 !== i.nodeType && !Ot.test(h + st.event.triggered) && (h.indexOf(".") >= 0 && (g = h.split("."), h = g.shift(), g.sort()), c = 0 > h.indexOf(":") && "on" + h, n = n[st.expando] ? n : new st.Event(h, "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && n), n.isTrigger = !0, n.namespace = g.join("."), n.namespace_re = n.namespace ? RegExp("(^|\\.)" + g.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, n.result = t, n.target || (n.target = i), r = null == r ? [n] : st.makeArray(r, [n]), p = st.event.special[h] || {}, o || !p.trigger || p.trigger.apply(i, r) !== !1)) {
        if (!o && !p.noBubble && !st.isWindow(i)) {
          for (l = p.delegateType || h, Ot.test(l + h) || (s = s.parentNode); s; s = s.parentNode) {
            d.push(s), u = s;
          }u === (i.ownerDocument || V) && d.push(u.defaultView || u.parentWindow || e);
        }for (a = 0; (s = d[a++]) && !n.isPropagationStopped();) {
          n.type = a > 1 ? l : p.bindType || h, f = (st._data(s, "events") || {})[n.type] && st._data(s, "handle"), f && f.apply(s, r), f = c && s[c], f && st.acceptData(s) && f.apply && f.apply(s, r) === !1 && n.preventDefault();
        }if (n.type = h, !(o || n.isDefaultPrevented() || p._default && p._default.apply(i.ownerDocument, r) !== !1 || "click" === h && st.nodeName(i, "a") || !st.acceptData(i) || !c || !i[h] || st.isWindow(i))) {
          u = i[c], u && (i[c] = null), st.event.triggered = h;try {
            i[h]();
          } catch (m) {}st.event.triggered = t, u && (i[c] = u);
        }return n.result;
      }
    }, dispatch: function dispatch(e) {
      e = st.event.fix(e);var n,
          r,
          i,
          o,
          a,
          s = [],
          u = nt.call(arguments),
          l = (st._data(this, "events") || {})[e.type] || [],
          c = st.event.special[e.type] || {};if (u[0] = e, e.delegateTarget = this, !c.preDispatch || c.preDispatch.call(this, e) !== !1) {
        for (s = st.event.handlers.call(this, e, l), n = 0; (o = s[n++]) && !e.isPropagationStopped();) {
          for (e.currentTarget = o.elem, r = 0; (a = o.handlers[r++]) && !e.isImmediatePropagationStopped();) {
            (!e.namespace_re || e.namespace_re.test(a.namespace)) && (e.handleObj = a, e.data = a.data, i = ((st.event.special[a.origType] || {}).handle || a.handler).apply(o.elem, u), i !== t && (e.result = i) === !1 && (e.preventDefault(), e.stopPropagation()));
          }
        }return c.postDispatch && c.postDispatch.call(this, e), e.result;
      }
    }, handlers: function handlers(e, n) {
      var r,
          i,
          o,
          a,
          s = [],
          u = n.delegateCount,
          l = e.target;if (u && l.nodeType && (!e.button || "click" !== e.type)) for (; l != this; l = l.parentNode || this) {
        if (l.disabled !== !0 || "click" !== e.type) {
          for (i = [], r = 0; u > r; r++) {
            a = n[r], o = a.selector + " ", i[o] === t && (i[o] = a.needsContext ? st(o, this).index(l) >= 0 : st.find(o, this, null, [l]).length), i[o] && i.push(a);
          }i.length && s.push({ elem: l, handlers: i });
        }
      }return n.length > u && s.push({ elem: this, handlers: n.slice(u) }), s;
    }, fix: function fix(e) {
      if (e[st.expando]) return e;var t,
          n,
          r = e,
          i = st.event.fixHooks[e.type] || {},
          o = i.props ? this.props.concat(i.props) : this.props;for (e = new st.Event(r), t = o.length; t--;) {
        n = o[t], e[n] = r[n];
      }return e.target || (e.target = r.srcElement || V), 3 === e.target.nodeType && (e.target = e.target.parentNode), e.metaKey = !!e.metaKey, i.filter ? i.filter(e, r) : e;
    }, props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function filter(e, t) {
        return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), e;
      } }, mouseHooks: { props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function filter(e, n) {
        var r,
            i,
            o,
            a = n.button,
            s = n.fromElement;return null == e.pageX && null != n.clientX && (r = e.target.ownerDocument || V, i = r.documentElement, o = r.body, e.pageX = n.clientX + (i && i.scrollLeft || o && o.scrollLeft || 0) - (i && i.clientLeft || o && o.clientLeft || 0), e.pageY = n.clientY + (i && i.scrollTop || o && o.scrollTop || 0) - (i && i.clientTop || o && o.clientTop || 0)), !e.relatedTarget && s && (e.relatedTarget = s === e.target ? n.toElement : s), e.which || a === t || (e.which = 1 & a ? 1 : 2 & a ? 3 : 4 & a ? 2 : 0), e;
      } }, special: { load: { noBubble: !0 }, click: { trigger: function trigger() {
          return st.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : t;
        } }, focus: { trigger: function trigger() {
          if (this !== V.activeElement && this.focus) try {
            return this.focus(), !1;
          } catch (e) {}
        }, delegateType: "focusin" }, blur: { trigger: function trigger() {
          return this === V.activeElement && this.blur ? (this.blur(), !1) : t;
        }, delegateType: "focusout" }, beforeunload: { postDispatch: function postDispatch(e) {
          e.result !== t && (e.originalEvent.returnValue = e.result);
        } } }, simulate: function simulate(e, t, n, r) {
      var i = st.extend(new st.Event(), n, { type: e, isSimulated: !0, originalEvent: {} });r ? st.event.trigger(i, null, t) : st.event.dispatch.call(t, i), i.isDefaultPrevented() && n.preventDefault();
    } }, st.removeEvent = V.removeEventListener ? function (e, t, n) {
    e.removeEventListener && e.removeEventListener(t, n, !1);
  } : function (e, n, r) {
    var i = "on" + n;e.detachEvent && (e[i] === t && (e[i] = null), e.detachEvent(i, r));
  }, st.Event = function (e, n) {
    return this instanceof st.Event ? (e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || e.returnValue === !1 || e.getPreventDefault && e.getPreventDefault() ? u : l) : this.type = e, n && st.extend(this, n), this.timeStamp = e && e.timeStamp || st.now(), this[st.expando] = !0, t) : new st.Event(e, n);
  }, st.Event.prototype = { isDefaultPrevented: l, isPropagationStopped: l, isImmediatePropagationStopped: l, preventDefault: function preventDefault() {
      var e = this.originalEvent;this.isDefaultPrevented = u, e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1);
    }, stopPropagation: function stopPropagation() {
      var e = this.originalEvent;this.isPropagationStopped = u, e && (e.stopPropagation && e.stopPropagation(), e.cancelBubble = !0);
    }, stopImmediatePropagation: function stopImmediatePropagation() {
      this.isImmediatePropagationStopped = u, this.stopPropagation();
    } }, st.each({ mouseenter: "mouseover", mouseleave: "mouseout" }, function (e, t) {
    st.event.special[e] = { delegateType: t, bindType: t, handle: function handle(e) {
        var n,
            r = this,
            i = e.relatedTarget,
            o = e.handleObj;return (!i || i !== r && !st.contains(r, i)) && (e.type = o.origType, n = o.handler.apply(this, arguments), e.type = t), n;
      } };
  }), st.support.submitBubbles || (st.event.special.submit = { setup: function setup() {
      return st.nodeName(this, "form") ? !1 : (st.event.add(this, "click._submit keypress._submit", function (e) {
        var n = e.target,
            r = st.nodeName(n, "input") || st.nodeName(n, "button") ? n.form : t;r && !st._data(r, "submitBubbles") && (st.event.add(r, "submit._submit", function (e) {
          e._submit_bubble = !0;
        }), st._data(r, "submitBubbles", !0));
      }), t);
    }, postDispatch: function postDispatch(e) {
      e._submit_bubble && (delete e._submit_bubble, this.parentNode && !e.isTrigger && st.event.simulate("submit", this.parentNode, e, !0));
    }, teardown: function teardown() {
      return st.nodeName(this, "form") ? !1 : (st.event.remove(this, "._submit"), t);
    } }), st.support.changeBubbles || (st.event.special.change = { setup: function setup() {
      return qt.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (st.event.add(this, "propertychange._change", function (e) {
        "checked" === e.originalEvent.propertyName && (this._just_changed = !0);
      }), st.event.add(this, "click._change", function (e) {
        this._just_changed && !e.isTrigger && (this._just_changed = !1), st.event.simulate("change", this, e, !0);
      })), !1) : (st.event.add(this, "beforeactivate._change", function (e) {
        var t = e.target;qt.test(t.nodeName) && !st._data(t, "changeBubbles") && (st.event.add(t, "change._change", function (e) {
          !this.parentNode || e.isSimulated || e.isTrigger || st.event.simulate("change", this.parentNode, e, !0);
        }), st._data(t, "changeBubbles", !0));
      }), t);
    }, handle: function handle(e) {
      var n = e.target;return this !== n || e.isSimulated || e.isTrigger || "radio" !== n.type && "checkbox" !== n.type ? e.handleObj.handler.apply(this, arguments) : t;
    }, teardown: function teardown() {
      return st.event.remove(this, "._change"), !qt.test(this.nodeName);
    } }), st.support.focusinBubbles || st.each({ focus: "focusin", blur: "focusout" }, function (e, t) {
    var n = 0,
        r = function r(e) {
      st.event.simulate(t, e.target, st.event.fix(e), !0);
    };st.event.special[t] = { setup: function setup() {
        0 === n++ && V.addEventListener(e, r, !0);
      }, teardown: function teardown() {
        0 === --n && V.removeEventListener(e, r, !0);
      } };
  }), st.fn.extend({ on: function on(e, n, r, i, o) {
      var a, s;if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        "string" != typeof n && (r = r || n, n = t);for (s in e) {
          this.on(s, n, r, e[s], o);
        }return this;
      }if (null == r && null == i ? (i = n, r = n = t) : null == i && ("string" == typeof n ? (i = r, r = t) : (i = r, r = n, n = t)), i === !1) i = l;else if (!i) return this;return 1 === o && (a = i, i = function i(e) {
        return st().off(e), a.apply(this, arguments);
      }, i.guid = a.guid || (a.guid = st.guid++)), this.each(function () {
        st.event.add(this, e, i, r, n);
      });
    }, one: function one(e, t, n, r) {
      return this.on(e, t, n, r, 1);
    }, off: function off(e, n, r) {
      var i, o;if (e && e.preventDefault && e.handleObj) return i = e.handleObj, st(e.delegateTarget).off(i.namespace ? i.origType + "." + i.namespace : i.origType, i.selector, i.handler), this;if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        for (o in e) {
          this.off(o, n, e[o]);
        }return this;
      }return (n === !1 || "function" == typeof n) && (r = n, n = t), r === !1 && (r = l), this.each(function () {
        st.event.remove(this, e, r, n);
      });
    }, bind: function bind(e, t, n) {
      return this.on(e, null, t, n);
    }, unbind: function unbind(e, t) {
      return this.off(e, null, t);
    }, delegate: function delegate(e, t, n, r) {
      return this.on(t, e, n, r);
    }, undelegate: function undelegate(e, t, n) {
      return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
    }, trigger: function trigger(e, t) {
      return this.each(function () {
        st.event.trigger(e, t, this);
      });
    }, triggerHandler: function triggerHandler(e, n) {
      var r = this[0];return r ? st.event.trigger(e, n, r, !0) : t;
    }, hover: function hover(e, t) {
      return this.mouseenter(e).mouseleave(t || e);
    } }), st.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (e, t) {
    st.fn[t] = function (e, n) {
      return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t);
    }, _t.test(t) && (st.event.fixHooks[t] = st.event.keyHooks), Ft.test(t) && (st.event.fixHooks[t] = st.event.mouseHooks);
  }), function (e, t) {
    function n(e) {
      return ht.test(e + "");
    }function r() {
      var _e,
          t = [];return _e = function e(n, r) {
        return t.push(n += " ") > C.cacheLength && delete _e[t.shift()], _e[n] = r;
      };
    }function i(e) {
      return e[P] = !0, e;
    }function o(e) {
      var t = L.createElement("div");try {
        return e(t);
      } catch (n) {
        return !1;
      } finally {
        t = null;
      }
    }function a(e, t, n, r) {
      var i, o, a, s, u, l, c, d, h, g;if ((t ? t.ownerDocument || t : R) !== L && D(t), t = t || L, n = n || [], !e || "string" != typeof e) return n;if (1 !== (s = t.nodeType) && 9 !== s) return [];if (!M && !r) {
        if (i = gt.exec(e)) if (a = i[1]) {
          if (9 === s) {
            if (o = t.getElementById(a), !o || !o.parentNode) return n;if (o.id === a) return n.push(o), n;
          } else if (t.ownerDocument && (o = t.ownerDocument.getElementById(a)) && O(t, o) && o.id === a) return n.push(o), n;
        } else {
          if (i[2]) return Q.apply(n, K.call(t.getElementsByTagName(e), 0)), n;if ((a = i[3]) && W.getByClassName && t.getElementsByClassName) return Q.apply(n, K.call(t.getElementsByClassName(a), 0)), n;
        }if (W.qsa && !q.test(e)) {
          if (c = !0, d = P, h = t, g = 9 === s && e, 1 === s && "object" !== t.nodeName.toLowerCase()) {
            for (l = f(e), (c = t.getAttribute("id")) ? d = c.replace(vt, "\\$&") : t.setAttribute("id", d), d = "[id='" + d + "'] ", u = l.length; u--;) {
              l[u] = d + p(l[u]);
            }h = dt.test(e) && t.parentNode || t, g = l.join(",");
          }if (g) try {
            return Q.apply(n, K.call(h.querySelectorAll(g), 0)), n;
          } catch (m) {} finally {
            c || t.removeAttribute("id");
          }
        }
      }return x(e.replace(at, "$1"), t, n, r);
    }function s(e, t) {
      for (var n = e && t && e.nextSibling; n; n = n.nextSibling) {
        if (n === t) return -1;
      }return e ? 1 : -1;
    }function u(e) {
      return function (t) {
        var n = t.nodeName.toLowerCase();return "input" === n && t.type === e;
      };
    }function l(e) {
      return function (t) {
        var n = t.nodeName.toLowerCase();return ("input" === n || "button" === n) && t.type === e;
      };
    }function c(e) {
      return i(function (t) {
        return t = +t, i(function (n, r) {
          for (var i, o = e([], n.length, t), a = o.length; a--;) {
            n[i = o[a]] && (n[i] = !(r[i] = n[i]));
          }
        });
      });
    }function f(e, t) {
      var n,
          r,
          i,
          o,
          s,
          u,
          l,
          c = X[e + " "];if (c) return t ? 0 : c.slice(0);for (s = e, u = [], l = C.preFilter; s;) {
        (!n || (r = ut.exec(s))) && (r && (s = s.slice(r[0].length) || s), u.push(i = [])), n = !1, (r = lt.exec(s)) && (n = r.shift(), i.push({ value: n, type: r[0].replace(at, " ") }), s = s.slice(n.length));for (o in C.filter) {
          !(r = pt[o].exec(s)) || l[o] && !(r = l[o](r)) || (n = r.shift(), i.push({ value: n, type: o, matches: r }), s = s.slice(n.length));
        }if (!n) break;
      }return t ? s.length : s ? a.error(e) : X(e, u).slice(0);
    }function p(e) {
      for (var t = 0, n = e.length, r = ""; n > t; t++) {
        r += e[t].value;
      }return r;
    }function d(e, t, n) {
      var r = t.dir,
          i = n && "parentNode" === t.dir,
          o = I++;return t.first ? function (t, n, o) {
        for (; t = t[r];) {
          if (1 === t.nodeType || i) return e(t, n, o);
        }
      } : function (t, n, a) {
        var s,
            u,
            l,
            c = $ + " " + o;if (a) {
          for (; t = t[r];) {
            if ((1 === t.nodeType || i) && e(t, n, a)) return !0;
          }
        } else for (; t = t[r];) {
          if (1 === t.nodeType || i) if (l = t[P] || (t[P] = {}), (u = l[r]) && u[0] === c) {
            if ((s = u[1]) === !0 || s === N) return s === !0;
          } else if (u = l[r] = [c], u[1] = e(t, n, a) || N, u[1] === !0) return !0;
        }
      };
    }function h(e) {
      return e.length > 1 ? function (t, n, r) {
        for (var i = e.length; i--;) {
          if (!e[i](t, n, r)) return !1;
        }return !0;
      } : e[0];
    }function g(e, t, n, r, i) {
      for (var o, a = [], s = 0, u = e.length, l = null != t; u > s; s++) {
        (o = e[s]) && (!n || n(o, r, i)) && (a.push(o), l && t.push(s));
      }return a;
    }function m(e, t, n, r, o, a) {
      return r && !r[P] && (r = m(r)), o && !o[P] && (o = m(o, a)), i(function (i, a, s, u) {
        var l,
            c,
            f,
            p = [],
            d = [],
            h = a.length,
            m = i || b(t || "*", s.nodeType ? [s] : s, []),
            y = !e || !i && t ? m : g(m, p, e, s, u),
            v = n ? o || (i ? e : h || r) ? [] : a : y;if (n && n(y, v, s, u), r) for (l = g(v, d), r(l, [], s, u), c = l.length; c--;) {
          (f = l[c]) && (v[d[c]] = !(y[d[c]] = f));
        }if (i) {
          if (o || e) {
            if (o) {
              for (l = [], c = v.length; c--;) {
                (f = v[c]) && l.push(y[c] = f);
              }o(null, v = [], l, u);
            }for (c = v.length; c--;) {
              (f = v[c]) && (l = o ? Z.call(i, f) : p[c]) > -1 && (i[l] = !(a[l] = f));
            }
          }
        } else v = g(v === a ? v.splice(h, v.length) : v), o ? o(null, a, v, u) : Q.apply(a, v);
      });
    }function y(e) {
      for (var t, n, r, i = e.length, o = C.relative[e[0].type], a = o || C.relative[" "], s = o ? 1 : 0, u = d(function (e) {
        return e === t;
      }, a, !0), l = d(function (e) {
        return Z.call(t, e) > -1;
      }, a, !0), c = [function (e, n, r) {
        return !o && (r || n !== j) || ((t = n).nodeType ? u(e, n, r) : l(e, n, r));
      }]; i > s; s++) {
        if (n = C.relative[e[s].type]) c = [d(h(c), n)];else {
          if (n = C.filter[e[s].type].apply(null, e[s].matches), n[P]) {
            for (r = ++s; i > r && !C.relative[e[r].type]; r++) {}return m(s > 1 && h(c), s > 1 && p(e.slice(0, s - 1)).replace(at, "$1"), n, r > s && y(e.slice(s, r)), i > r && y(e = e.slice(r)), i > r && p(e));
          }c.push(n);
        }
      }return h(c);
    }function v(e, t) {
      var n = 0,
          r = t.length > 0,
          o = e.length > 0,
          s = function s(i, _s, u, l, c) {
        var f,
            p,
            d,
            h = [],
            m = 0,
            y = "0",
            v = i && [],
            b = null != c,
            x = j,
            T = i || o && C.find.TAG("*", c && _s.parentNode || _s),
            w = $ += null == x ? 1 : Math.E;for (b && (j = _s !== L && _s, N = n); null != (f = T[y]); y++) {
          if (o && f) {
            for (p = 0; d = e[p]; p++) {
              if (d(f, _s, u)) {
                l.push(f);break;
              }
            }b && ($ = w, N = ++n);
          }r && ((f = !d && f) && m--, i && v.push(f));
        }if (m += y, r && y !== m) {
          for (p = 0; d = t[p]; p++) {
            d(v, h, _s, u);
          }if (i) {
            if (m > 0) for (; y--;) {
              v[y] || h[y] || (h[y] = G.call(l));
            }h = g(h);
          }Q.apply(l, h), b && !i && h.length > 0 && m + t.length > 1 && a.uniqueSort(l);
        }return b && ($ = w, j = x), v;
      };return r ? i(s) : s;
    }function b(e, t, n) {
      for (var r = 0, i = t.length; i > r; r++) {
        a(e, t[r], n);
      }return n;
    }function x(e, t, n, r) {
      var i,
          o,
          a,
          s,
          u,
          l = f(e);if (!r && 1 === l.length) {
        if (o = l[0] = l[0].slice(0), o.length > 2 && "ID" === (a = o[0]).type && 9 === t.nodeType && !M && C.relative[o[1].type]) {
          if (t = C.find.ID(a.matches[0].replace(xt, Tt), t)[0], !t) return n;e = e.slice(o.shift().value.length);
        }for (i = pt.needsContext.test(e) ? -1 : o.length - 1; i >= 0 && (a = o[i], !C.relative[s = a.type]); i--) {
          if ((u = C.find[s]) && (r = u(a.matches[0].replace(xt, Tt), dt.test(o[0].type) && t.parentNode || t))) {
            if (o.splice(i, 1), e = r.length && p(o), !e) return Q.apply(n, K.call(r, 0)), n;break;
          }
        }
      }return S(e, l)(r, t, M, n, dt.test(e)), n;
    }function T() {}var w,
        N,
        C,
        k,
        E,
        S,
        A,
        j,
        D,
        L,
        H,
        M,
        q,
        _,
        F,
        O,
        B,
        P = "sizzle" + -new Date(),
        R = e.document,
        W = {},
        $ = 0,
        I = 0,
        z = r(),
        X = r(),
        U = r(),
        V = typeof t === "undefined" ? "undefined" : _typeof(t),
        Y = 1 << 31,
        J = [],
        G = J.pop,
        Q = J.push,
        K = J.slice,
        Z = J.indexOf || function (e) {
      for (var t = 0, n = this.length; n > t; t++) {
        if (this[t] === e) return t;
      }return -1;
    },
        et = "[\\x20\\t\\r\\n\\f]",
        tt = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
        nt = tt.replace("w", "w#"),
        rt = "([*^$|!~]?=)",
        it = "\\[" + et + "*(" + tt + ")" + et + "*(?:" + rt + et + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + nt + ")|)|)" + et + "*\\]",
        ot = ":(" + tt + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + it.replace(3, 8) + ")*)|.*)\\)|)",
        at = RegExp("^" + et + "+|((?:^|[^\\\\])(?:\\\\.)*)" + et + "+$", "g"),
        ut = RegExp("^" + et + "*," + et + "*"),
        lt = RegExp("^" + et + "*([\\x20\\t\\r\\n\\f>+~])" + et + "*"),
        ct = RegExp(ot),
        ft = RegExp("^" + nt + "$"),
        pt = { ID: RegExp("^#(" + tt + ")"), CLASS: RegExp("^\\.(" + tt + ")"), NAME: RegExp("^\\[name=['\"]?(" + tt + ")['\"]?\\]"), TAG: RegExp("^(" + tt.replace("w", "w*") + ")"), ATTR: RegExp("^" + it), PSEUDO: RegExp("^" + ot), CHILD: RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + et + "*(even|odd|(([+-]|)(\\d*)n|)" + et + "*(?:([+-]|)" + et + "*(\\d+)|))" + et + "*\\)|)", "i"), needsContext: RegExp("^" + et + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + et + "*((?:-\\d)?\\d*)" + et + "*\\)|)(?=[^-]|$)", "i") },
        dt = /[\x20\t\r\n\f]*[+~]/,
        ht = /\{\s*\[native code\]\s*\}/,
        gt = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        mt = /^(?:input|select|textarea|button)$/i,
        yt = /^h\d$/i,
        vt = /'|\\/g,
        bt = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
        xt = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
        Tt = function Tt(e, t) {
      var n = "0x" + t - 65536;return n !== n ? t : 0 > n ? String.fromCharCode(n + 65536) : String.fromCharCode(55296 | n >> 10, 56320 | 1023 & n);
    };try {
      K.call(H.childNodes, 0)[0].nodeType;
    } catch (wt) {
      K = function K(e) {
        for (var t, n = []; t = this[e]; e++) {
          n.push(t);
        }return n;
      };
    }E = a.isXML = function (e) {
      var t = e && (e.ownerDocument || e).documentElement;return t ? "HTML" !== t.nodeName : !1;
    }, D = a.setDocument = function (e) {
      var r = e ? e.ownerDocument || e : R;return r !== L && 9 === r.nodeType && r.documentElement ? (L = r, H = r.documentElement, M = E(r), W.tagNameNoComments = o(function (e) {
        return e.appendChild(r.createComment("")), !e.getElementsByTagName("*").length;
      }), W.attributes = o(function (e) {
        e.innerHTML = "<select></select>";var t = _typeof(e.lastChild.getAttribute("multiple"));return "boolean" !== t && "string" !== t;
      }), W.getByClassName = o(function (e) {
        return e.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>", e.getElementsByClassName && e.getElementsByClassName("e").length ? (e.lastChild.className = "e", 2 === e.getElementsByClassName("e").length) : !1;
      }), W.getByName = o(function (e) {
        e.id = P + 0, e.innerHTML = "<a name='" + P + "'></a><div name='" + P + "'></div>", H.insertBefore(e, H.firstChild);var t = r.getElementsByName && r.getElementsByName(P).length === 2 + r.getElementsByName(P + 0).length;return W.getIdNotName = !r.getElementById(P), H.removeChild(e), t;
      }), C.attrHandle = o(function (e) {
        return e.innerHTML = "<a href='#'></a>", e.firstChild && _typeof(e.firstChild.getAttribute) !== V && "#" === e.firstChild.getAttribute("href");
      }) ? {} : { href: function href(e) {
          return e.getAttribute("href", 2);
        }, type: function type(e) {
          return e.getAttribute("type");
        } }, W.getIdNotName ? (C.find.ID = function (e, t) {
        if (_typeof(t.getElementById) !== V && !M) {
          var n = t.getElementById(e);return n && n.parentNode ? [n] : [];
        }
      }, C.filter.ID = function (e) {
        var t = e.replace(xt, Tt);return function (e) {
          return e.getAttribute("id") === t;
        };
      }) : (C.find.ID = function (e, n) {
        if (_typeof(n.getElementById) !== V && !M) {
          var r = n.getElementById(e);return r ? r.id === e || _typeof(r.getAttributeNode) !== V && r.getAttributeNode("id").value === e ? [r] : t : [];
        }
      }, C.filter.ID = function (e) {
        var t = e.replace(xt, Tt);return function (e) {
          var n = _typeof(e.getAttributeNode) !== V && e.getAttributeNode("id");return n && n.value === t;
        };
      }), C.find.TAG = W.tagNameNoComments ? function (e, n) {
        return _typeof(n.getElementsByTagName) !== V ? n.getElementsByTagName(e) : t;
      } : function (e, t) {
        var n,
            r = [],
            i = 0,
            o = t.getElementsByTagName(e);if ("*" === e) {
          for (; n = o[i]; i++) {
            1 === n.nodeType && r.push(n);
          }return r;
        }return o;
      }, C.find.NAME = W.getByName && function (e, n) {
        return _typeof(n.getElementsByName) !== V ? n.getElementsByName(name) : t;
      }, C.find.CLASS = W.getByClassName && function (e, n) {
        return _typeof(n.getElementsByClassName) === V || M ? t : n.getElementsByClassName(e);
      }, _ = [], q = [":focus"], (W.qsa = n(r.querySelectorAll)) && (o(function (e) {
        e.innerHTML = "<select><option selected=''></option></select>", e.querySelectorAll("[selected]").length || q.push("\\[" + et + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)"), e.querySelectorAll(":checked").length || q.push(":checked");
      }), o(function (e) {
        e.innerHTML = "<input type='hidden' i=''/>", e.querySelectorAll("[i^='']").length && q.push("[*^$]=" + et + "*(?:\"\"|'')"), e.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), q.push(",.*:");
      })), (W.matchesSelector = n(F = H.matchesSelector || H.mozMatchesSelector || H.webkitMatchesSelector || H.oMatchesSelector || H.msMatchesSelector)) && o(function (e) {
        W.disconnectedMatch = F.call(e, "div"), F.call(e, "[s!='']:x"), _.push("!=", ot);
      }), q = RegExp(q.join("|")), _ = RegExp(_.join("|")), O = n(H.contains) || H.compareDocumentPosition ? function (e, t) {
        var n = 9 === e.nodeType ? e.documentElement : e,
            r = t && t.parentNode;return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
      } : function (e, t) {
        if (t) for (; t = t.parentNode;) {
          if (t === e) return !0;
        }return !1;
      }, B = H.compareDocumentPosition ? function (e, t) {
        var n;return e === t ? (A = !0, 0) : (n = t.compareDocumentPosition && e.compareDocumentPosition && e.compareDocumentPosition(t)) ? 1 & n || e.parentNode && 11 === e.parentNode.nodeType ? e === r || O(R, e) ? -1 : t === r || O(R, t) ? 1 : 0 : 4 & n ? -1 : 1 : e.compareDocumentPosition ? -1 : 1;
      } : function (e, t) {
        var n,
            i = 0,
            o = e.parentNode,
            a = t.parentNode,
            u = [e],
            l = [t];if (e === t) return A = !0, 0;if (e.sourceIndex && t.sourceIndex) return (~t.sourceIndex || Y) - (O(R, e) && ~e.sourceIndex || Y);if (!o || !a) return e === r ? -1 : t === r ? 1 : o ? -1 : a ? 1 : 0;if (o === a) return s(e, t);for (n = e; n = n.parentNode;) {
          u.unshift(n);
        }for (n = t; n = n.parentNode;) {
          l.unshift(n);
        }for (; u[i] === l[i];) {
          i++;
        }return i ? s(u[i], l[i]) : u[i] === R ? -1 : l[i] === R ? 1 : 0;
      }, A = !1, [0, 0].sort(B), W.detectDuplicates = A, L) : L;
    }, a.matches = function (e, t) {
      return a(e, null, null, t);
    }, a.matchesSelector = function (e, t) {
      if ((e.ownerDocument || e) !== L && D(e), t = t.replace(bt, "='$1']"), !(!W.matchesSelector || M || _ && _.test(t) || q.test(t))) try {
        var n = F.call(e, t);if (n || W.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n;
      } catch (r) {}return a(t, L, null, [e]).length > 0;
    }, a.contains = function (e, t) {
      return (e.ownerDocument || e) !== L && D(e), O(e, t);
    }, a.attr = function (e, t) {
      var n;return (e.ownerDocument || e) !== L && D(e), M || (t = t.toLowerCase()), (n = C.attrHandle[t]) ? n(e) : M || W.attributes ? e.getAttribute(t) : ((n = e.getAttributeNode(t)) || e.getAttribute(t)) && e[t] === !0 ? t : n && n.specified ? n.value : null;
    }, a.error = function (e) {
      throw Error("Syntax error, unrecognized expression: " + e);
    }, a.uniqueSort = function (e) {
      var t,
          n = [],
          r = 1,
          i = 0;if (A = !W.detectDuplicates, e.sort(B), A) {
        for (; t = e[r]; r++) {
          t === e[r - 1] && (i = n.push(r));
        }for (; i--;) {
          e.splice(n[i], 1);
        }
      }return e;
    }, k = a.getText = function (e) {
      var t,
          n = "",
          r = 0,
          i = e.nodeType;if (i) {
        if (1 === i || 9 === i || 11 === i) {
          if ("string" == typeof e.textContent) return e.textContent;for (e = e.firstChild; e; e = e.nextSibling) {
            n += k(e);
          }
        } else if (3 === i || 4 === i) return e.nodeValue;
      } else for (; t = e[r]; r++) {
        n += k(t);
      }return n;
    }, C = a.selectors = { cacheLength: 50, createPseudo: i, match: pt, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(e) {
          return e[1] = e[1].replace(xt, Tt), e[3] = (e[4] || e[5] || "").replace(xt, Tt), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
        }, CHILD: function CHILD(e) {
          return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || a.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && a.error(e[0]), e;
        }, PSEUDO: function PSEUDO(e) {
          var t,
              n = !e[5] && e[2];return pt.CHILD.test(e[0]) ? null : (e[4] ? e[2] = e[4] : n && ct.test(n) && (t = f(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));
        } }, filter: { TAG: function TAG(e) {
          return "*" === e ? function () {
            return !0;
          } : (e = e.replace(xt, Tt).toLowerCase(), function (t) {
            return t.nodeName && t.nodeName.toLowerCase() === e;
          });
        }, CLASS: function CLASS(e) {
          var t = z[e + " "];return t || (t = RegExp("(^|" + et + ")" + e + "(" + et + "|$)")) && z(e, function (e) {
            return t.test(e.className || _typeof(e.getAttribute) !== V && e.getAttribute("class") || "");
          });
        }, ATTR: function ATTR(e, t, n) {
          return function (r) {
            var i = a.attr(r, e);return null == i ? "!=" === t : t ? (i += "", "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.substr(i.length - n.length) === n : "~=" === t ? (" " + i + " ").indexOf(n) > -1 : "|=" === t ? i === n || i.substr(0, n.length + 1) === n + "-" : !1) : !0;
          };
        }, CHILD: function CHILD(e, t, n, r, i) {
          var o = "nth" !== e.slice(0, 3),
              a = "last" !== e.slice(-4),
              s = "of-type" === t;return 1 === r && 0 === i ? function (e) {
            return !!e.parentNode;
          } : function (t, n, u) {
            var l,
                c,
                f,
                p,
                d,
                h,
                g = o !== a ? "nextSibling" : "previousSibling",
                m = t.parentNode,
                y = s && t.nodeName.toLowerCase(),
                v = !u && !s;if (m) {
              if (o) {
                for (; g;) {
                  for (f = t; f = f[g];) {
                    if (s ? f.nodeName.toLowerCase() === y : 1 === f.nodeType) return !1;
                  }h = g = "only" === e && !h && "nextSibling";
                }return !0;
              }if (h = [a ? m.firstChild : m.lastChild], a && v) {
                for (c = m[P] || (m[P] = {}), l = c[e] || [], d = l[0] === $ && l[1], p = l[0] === $ && l[2], f = d && m.childNodes[d]; f = ++d && f && f[g] || (p = d = 0) || h.pop();) {
                  if (1 === f.nodeType && ++p && f === t) {
                    c[e] = [$, d, p];break;
                  }
                }
              } else if (v && (l = (t[P] || (t[P] = {}))[e]) && l[0] === $) p = l[1];else for (; (f = ++d && f && f[g] || (p = d = 0) || h.pop()) && ((s ? f.nodeName.toLowerCase() !== y : 1 !== f.nodeType) || !++p || (v && ((f[P] || (f[P] = {}))[e] = [$, p]), f !== t));) {}return p -= i, p === r || 0 === p % r && p / r >= 0;
            }
          };
        }, PSEUDO: function PSEUDO(e, t) {
          var n,
              r = C.pseudos[e] || C.setFilters[e.toLowerCase()] || a.error("unsupported pseudo: " + e);return r[P] ? r(t) : r.length > 1 ? (n = [e, e, "", t], C.setFilters.hasOwnProperty(e.toLowerCase()) ? i(function (e, n) {
            for (var i, o = r(e, t), a = o.length; a--;) {
              i = Z.call(e, o[a]), e[i] = !(n[i] = o[a]);
            }
          }) : function (e) {
            return r(e, 0, n);
          }) : r;
        } }, pseudos: { not: i(function (e) {
          var t = [],
              n = [],
              r = S(e.replace(at, "$1"));return r[P] ? i(function (e, t, n, i) {
            for (var o, a = r(e, null, i, []), s = e.length; s--;) {
              (o = a[s]) && (e[s] = !(t[s] = o));
            }
          }) : function (e, i, o) {
            return t[0] = e, r(t, null, o, n), !n.pop();
          };
        }), has: i(function (e) {
          return function (t) {
            return a(e, t).length > 0;
          };
        }), contains: i(function (e) {
          return function (t) {
            return (t.textContent || t.innerText || k(t)).indexOf(e) > -1;
          };
        }), lang: i(function (e) {
          return ft.test(e || "") || a.error("unsupported lang: " + e), e = e.replace(xt, Tt).toLowerCase(), function (t) {
            var n;do {
              if (n = M ? t.getAttribute("xml:lang") || t.getAttribute("lang") : t.lang) return n = n.toLowerCase(), n === e || 0 === n.indexOf(e + "-");
            } while ((t = t.parentNode) && 1 === t.nodeType);return !1;
          };
        }), target: function target(t) {
          var n = e.location && e.location.hash;return n && n.slice(1) === t.id;
        }, root: function root(e) {
          return e === H;
        }, focus: function focus(e) {
          return e === L.activeElement && (!L.hasFocus || L.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
        }, enabled: function enabled(e) {
          return e.disabled === !1;
        }, disabled: function disabled(e) {
          return e.disabled === !0;
        }, checked: function checked(e) {
          var t = e.nodeName.toLowerCase();return "input" === t && !!e.checked || "option" === t && !!e.selected;
        }, selected: function selected(e) {
          return e.parentNode && e.parentNode.selectedIndex, e.selected === !0;
        }, empty: function empty(e) {
          for (e = e.firstChild; e; e = e.nextSibling) {
            if (e.nodeName > "@" || 3 === e.nodeType || 4 === e.nodeType) return !1;
          }return !0;
        }, parent: function parent(e) {
          return !C.pseudos.empty(e);
        }, header: function header(e) {
          return yt.test(e.nodeName);
        }, input: function input(e) {
          return mt.test(e.nodeName);
        }, button: function button(e) {
          var t = e.nodeName.toLowerCase();return "input" === t && "button" === e.type || "button" === t;
        }, text: function text(e) {
          var t;return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || t.toLowerCase() === e.type);
        }, first: c(function () {
          return [0];
        }), last: c(function (e, t) {
          return [t - 1];
        }), eq: c(function (e, t, n) {
          return [0 > n ? n + t : n];
        }), even: c(function (e, t) {
          for (var n = 0; t > n; n += 2) {
            e.push(n);
          }return e;
        }), odd: c(function (e, t) {
          for (var n = 1; t > n; n += 2) {
            e.push(n);
          }return e;
        }), lt: c(function (e, t, n) {
          for (var r = 0 > n ? n + t : n; --r >= 0;) {
            e.push(r);
          }return e;
        }), gt: c(function (e, t, n) {
          for (var r = 0 > n ? n + t : n; t > ++r;) {
            e.push(r);
          }return e;
        }) } };for (w in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
      C.pseudos[w] = u(w);
    }for (w in { submit: !0, reset: !0 }) {
      C.pseudos[w] = l(w);
    }S = a.compile = function (e, t) {
      var n,
          r = [],
          i = [],
          o = U[e + " "];if (!o) {
        for (t || (t = f(e)), n = t.length; n--;) {
          o = y(t[n]), o[P] ? r.push(o) : i.push(o);
        }o = U(e, v(i, r));
      }return o;
    }, C.pseudos.nth = C.pseudos.eq, C.filters = T.prototype = C.pseudos, C.setFilters = new T(), D(), a.attr = st.attr, st.find = a, st.expr = a.selectors, st.expr[":"] = st.expr.pseudos, st.unique = a.uniqueSort, st.text = a.getText, st.isXMLDoc = a.isXML, st.contains = a.contains;
  }(e);var Pt = /Until$/,
      Rt = /^(?:parents|prev(?:Until|All))/,
      Wt = /^.[^:#\[\.,]*$/,
      $t = st.expr.match.needsContext,
      It = { children: !0, contents: !0, next: !0, prev: !0 };st.fn.extend({ find: function find(e) {
      var t, n, r;if ("string" != typeof e) return r = this, this.pushStack(st(e).filter(function () {
        for (t = 0; r.length > t; t++) {
          if (st.contains(r[t], this)) return !0;
        }
      }));for (n = [], t = 0; this.length > t; t++) {
        st.find(e, this[t], n);
      }return n = this.pushStack(st.unique(n)), n.selector = (this.selector ? this.selector + " " : "") + e, n;
    }, has: function has(e) {
      var t,
          n = st(e, this),
          r = n.length;return this.filter(function () {
        for (t = 0; r > t; t++) {
          if (st.contains(this, n[t])) return !0;
        }
      });
    }, not: function not(e) {
      return this.pushStack(f(this, e, !1));
    }, filter: function filter(e) {
      return this.pushStack(f(this, e, !0));
    }, is: function is(e) {
      return !!e && ("string" == typeof e ? $t.test(e) ? st(e, this.context).index(this[0]) >= 0 : st.filter(e, this).length > 0 : this.filter(e).length > 0);
    }, closest: function closest(e, t) {
      for (var n, r = 0, i = this.length, o = [], a = $t.test(e) || "string" != typeof e ? st(e, t || this.context) : 0; i > r; r++) {
        for (n = this[r]; n && n.ownerDocument && n !== t && 11 !== n.nodeType;) {
          if (a ? a.index(n) > -1 : st.find.matchesSelector(n, e)) {
            o.push(n);break;
          }n = n.parentNode;
        }
      }return this.pushStack(o.length > 1 ? st.unique(o) : o);
    }, index: function index(e) {
      return e ? "string" == typeof e ? st.inArray(this[0], st(e)) : st.inArray(e.jquery ? e[0] : e, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    }, add: function add(e, t) {
      var n = "string" == typeof e ? st(e, t) : st.makeArray(e && e.nodeType ? [e] : e),
          r = st.merge(this.get(), n);return this.pushStack(st.unique(r));
    }, addBack: function addBack(e) {
      return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
    } }), st.fn.andSelf = st.fn.addBack, st.each({ parent: function parent(e) {
      var t = e.parentNode;return t && 11 !== t.nodeType ? t : null;
    }, parents: function parents(e) {
      return st.dir(e, "parentNode");
    }, parentsUntil: function parentsUntil(e, t, n) {
      return st.dir(e, "parentNode", n);
    }, next: function next(e) {
      return c(e, "nextSibling");
    }, prev: function prev(e) {
      return c(e, "previousSibling");
    }, nextAll: function nextAll(e) {
      return st.dir(e, "nextSibling");
    }, prevAll: function prevAll(e) {
      return st.dir(e, "previousSibling");
    }, nextUntil: function nextUntil(e, t, n) {
      return st.dir(e, "nextSibling", n);
    }, prevUntil: function prevUntil(e, t, n) {
      return st.dir(e, "previousSibling", n);
    }, siblings: function siblings(e) {
      return st.sibling((e.parentNode || {}).firstChild, e);
    }, children: function children(e) {
      return st.sibling(e.firstChild);
    }, contents: function contents(e) {
      return st.nodeName(e, "iframe") ? e.contentDocument || e.contentWindow.document : st.merge([], e.childNodes);
    } }, function (e, t) {
    st.fn[e] = function (n, r) {
      var i = st.map(this, t, n);return Pt.test(e) || (r = n), r && "string" == typeof r && (i = st.filter(r, i)), i = this.length > 1 && !It[e] ? st.unique(i) : i, this.length > 1 && Rt.test(e) && (i = i.reverse()), this.pushStack(i);
    };
  }), st.extend({ filter: function filter(e, t, n) {
      return n && (e = ":not(" + e + ")"), 1 === t.length ? st.find.matchesSelector(t[0], e) ? [t[0]] : [] : st.find.matches(e, t);
    }, dir: function dir(e, n, r) {
      for (var i = [], o = e[n]; o && 9 !== o.nodeType && (r === t || 1 !== o.nodeType || !st(o).is(r));) {
        1 === o.nodeType && i.push(o), o = o[n];
      }return i;
    }, sibling: function sibling(e, t) {
      for (var n = []; e; e = e.nextSibling) {
        1 === e.nodeType && e !== t && n.push(e);
      }return n;
    } });var zt = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
      Xt = / jQuery\d+="(?:null|\d+)"/g,
      Ut = RegExp("<(?:" + zt + ")[\\s/>]", "i"),
      Vt = /^\s+/,
      Yt = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      Jt = /<([\w:]+)/,
      Gt = /<tbody/i,
      Qt = /<|&#?\w+;/,
      Kt = /<(?:script|style|link)/i,
      Zt = /^(?:checkbox|radio)$/i,
      en = /checked\s*(?:[^=]|=\s*.checked.)/i,
      tn = /^$|\/(?:java|ecma)script/i,
      nn = /^true\/(.*)/,
      rn = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
      on = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], area: [1, "<map>", "</map>"], param: [1, "<object>", "</object>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: st.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"] },
      an = p(V),
      sn = an.appendChild(V.createElement("div"));on.optgroup = on.option, on.tbody = on.tfoot = on.colgroup = on.caption = on.thead, on.th = on.td, st.fn.extend({ text: function text(e) {
      return st.access(this, function (e) {
        return e === t ? st.text(this) : this.empty().append((this[0] && this[0].ownerDocument || V).createTextNode(e));
      }, null, e, arguments.length);
    }, wrapAll: function wrapAll(e) {
      if (st.isFunction(e)) return this.each(function (t) {
        st(this).wrapAll(e.call(this, t));
      });if (this[0]) {
        var t = st(e, this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode && t.insertBefore(this[0]), t.map(function () {
          for (var e = this; e.firstChild && 1 === e.firstChild.nodeType;) {
            e = e.firstChild;
          }return e;
        }).append(this);
      }return this;
    }, wrapInner: function wrapInner(e) {
      return st.isFunction(e) ? this.each(function (t) {
        st(this).wrapInner(e.call(this, t));
      }) : this.each(function () {
        var t = st(this),
            n = t.contents();n.length ? n.wrapAll(e) : t.append(e);
      });
    }, wrap: function wrap(e) {
      var t = st.isFunction(e);return this.each(function (n) {
        st(this).wrapAll(t ? e.call(this, n) : e);
      });
    }, unwrap: function unwrap() {
      return this.parent().each(function () {
        st.nodeName(this, "body") || st(this).replaceWith(this.childNodes);
      }).end();
    }, append: function append() {
      return this.domManip(arguments, !0, function (e) {
        (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && this.appendChild(e);
      });
    }, prepend: function prepend() {
      return this.domManip(arguments, !0, function (e) {
        (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && this.insertBefore(e, this.firstChild);
      });
    }, before: function before() {
      return this.domManip(arguments, !1, function (e) {
        this.parentNode && this.parentNode.insertBefore(e, this);
      });
    }, after: function after() {
      return this.domManip(arguments, !1, function (e) {
        this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
      });
    }, remove: function remove(e, t) {
      for (var n, r = 0; null != (n = this[r]); r++) {
        (!e || st.filter(e, [n]).length > 0) && (t || 1 !== n.nodeType || st.cleanData(b(n)), n.parentNode && (t && st.contains(n.ownerDocument, n) && m(b(n, "script")), n.parentNode.removeChild(n)));
      }return this;
    }, empty: function empty() {
      for (var e, t = 0; null != (e = this[t]); t++) {
        for (1 === e.nodeType && st.cleanData(b(e, !1)); e.firstChild;) {
          e.removeChild(e.firstChild);
        }e.options && st.nodeName(e, "select") && (e.options.length = 0);
      }return this;
    }, clone: function clone(e, t) {
      return e = null == e ? !1 : e, t = null == t ? e : t, this.map(function () {
        return st.clone(this, e, t);
      });
    }, html: function html(e) {
      return st.access(this, function (e) {
        var n = this[0] || {},
            r = 0,
            i = this.length;if (e === t) return 1 === n.nodeType ? n.innerHTML.replace(Xt, "") : t;if (!("string" != typeof e || Kt.test(e) || !st.support.htmlSerialize && Ut.test(e) || !st.support.leadingWhitespace && Vt.test(e) || on[(Jt.exec(e) || ["", ""])[1].toLowerCase()])) {
          e = e.replace(Yt, "<$1></$2>");try {
            for (; i > r; r++) {
              n = this[r] || {}, 1 === n.nodeType && (st.cleanData(b(n, !1)), n.innerHTML = e);
            }n = 0;
          } catch (o) {}
        }n && this.empty().append(e);
      }, null, e, arguments.length);
    }, replaceWith: function replaceWith(e) {
      var t = st.isFunction(e);return t || "string" == typeof e || (e = st(e).not(this).detach()), this.domManip([e], !0, function (e) {
        var t = this.nextSibling,
            n = this.parentNode;(n && 1 === this.nodeType || 11 === this.nodeType) && (st(this).remove(), t ? t.parentNode.insertBefore(e, t) : n.appendChild(e));
      });
    }, detach: function detach(e) {
      return this.remove(e, !0);
    }, domManip: function domManip(e, n, r) {
      e = et.apply([], e);var i,
          o,
          a,
          s,
          u,
          l,
          c = 0,
          f = this.length,
          p = this,
          m = f - 1,
          y = e[0],
          v = st.isFunction(y);if (v || !(1 >= f || "string" != typeof y || st.support.checkClone) && en.test(y)) return this.each(function (i) {
        var o = p.eq(i);v && (e[0] = y.call(this, i, n ? o.html() : t)), o.domManip(e, n, r);
      });if (f && (i = st.buildFragment(e, this[0].ownerDocument, !1, this), o = i.firstChild, 1 === i.childNodes.length && (i = o), o)) {
        for (n = n && st.nodeName(o, "tr"), a = st.map(b(i, "script"), h), s = a.length; f > c; c++) {
          u = i, c !== m && (u = st.clone(u, !0, !0), s && st.merge(a, b(u, "script"))), r.call(n && st.nodeName(this[c], "table") ? d(this[c], "tbody") : this[c], u, c);
        }if (s) for (l = a[a.length - 1].ownerDocument, st.map(a, g), c = 0; s > c; c++) {
          u = a[c], tn.test(u.type || "") && !st._data(u, "globalEval") && st.contains(l, u) && (u.src ? st.ajax({ url: u.src, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0 }) : st.globalEval((u.text || u.textContent || u.innerHTML || "").replace(rn, "")));
        }i = o = null;
      }return this;
    } }), st.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (e, t) {
    st.fn[e] = function (e) {
      for (var n, r = 0, i = [], o = st(e), a = o.length - 1; a >= r; r++) {
        n = r === a ? this : this.clone(!0), st(o[r])[t](n), tt.apply(i, n.get());
      }return this.pushStack(i);
    };
  }), st.extend({ clone: function clone(e, t, n) {
      var r,
          i,
          o,
          a,
          s,
          u = st.contains(e.ownerDocument, e);if (st.support.html5Clone || st.isXMLDoc(e) || !Ut.test("<" + e.nodeName + ">") ? s = e.cloneNode(!0) : (sn.innerHTML = e.outerHTML, sn.removeChild(s = sn.firstChild)), !(st.support.noCloneEvent && st.support.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || st.isXMLDoc(e))) for (r = b(s), i = b(e), a = 0; null != (o = i[a]); ++a) {
        r[a] && v(o, r[a]);
      }if (t) if (n) for (i = i || b(e), r = r || b(s), a = 0; null != (o = i[a]); a++) {
        y(o, r[a]);
      } else y(e, s);return r = b(s, "script"), r.length > 0 && m(r, !u && b(e, "script")), r = i = o = null, s;
    }, buildFragment: function buildFragment(e, t, n, r) {
      for (var i, o, a, s, u, l, c, f = e.length, d = p(t), h = [], g = 0; f > g; g++) {
        if (o = e[g], o || 0 === o) if ("object" === st.type(o)) st.merge(h, o.nodeType ? [o] : o);else if (Qt.test(o)) {
          for (s = s || d.appendChild(t.createElement("div")), a = (Jt.exec(o) || ["", ""])[1].toLowerCase(), u = on[a] || on._default, s.innerHTML = u[1] + o.replace(Yt, "<$1></$2>") + u[2], c = u[0]; c--;) {
            s = s.lastChild;
          }if (!st.support.leadingWhitespace && Vt.test(o) && h.push(t.createTextNode(Vt.exec(o)[0])), !st.support.tbody) for (o = "table" !== a || Gt.test(o) ? "<table>" !== u[1] || Gt.test(o) ? 0 : s : s.firstChild, c = o && o.childNodes.length; c--;) {
            st.nodeName(l = o.childNodes[c], "tbody") && !l.childNodes.length && o.removeChild(l);
          }for (st.merge(h, s.childNodes), s.textContent = ""; s.firstChild;) {
            s.removeChild(s.firstChild);
          }s = d.lastChild;
        } else h.push(t.createTextNode(o));
      }for (s && d.removeChild(s), st.support.appendChecked || st.grep(b(h, "input"), x), g = 0; o = h[g++];) {
        if ((!r || -1 === st.inArray(o, r)) && (i = st.contains(o.ownerDocument, o), s = b(d.appendChild(o), "script"), i && m(s), n)) for (c = 0; o = s[c++];) {
          tn.test(o.type || "") && n.push(o);
        }
      }return s = null, d;
    }, cleanData: function cleanData(e, n) {
      for (var r, i, o, a, s = 0, u = st.expando, l = st.cache, c = st.support.deleteExpando, f = st.event.special; null != (o = e[s]); s++) {
        if ((n || st.acceptData(o)) && (i = o[u], r = i && l[i])) {
          if (r.events) for (a in r.events) {
            f[a] ? st.event.remove(o, a) : st.removeEvent(o, a, r.handle);
          }l[i] && (delete l[i], c ? delete o[u] : o.removeAttribute !== t ? o.removeAttribute(u) : o[u] = null, K.push(i));
        }
      }
    } });var un,
      ln,
      cn,
      fn = /alpha\([^)]*\)/i,
      pn = /opacity\s*=\s*([^)]*)/,
      dn = /^(top|right|bottom|left)$/,
      hn = /^(none|table(?!-c[ea]).+)/,
      gn = /^margin/,
      mn = RegExp("^(" + ut + ")(.*)$", "i"),
      yn = RegExp("^(" + ut + ")(?!px)[a-z%]+$", "i"),
      vn = RegExp("^([+-])=(" + ut + ")", "i"),
      bn = { BODY: "block" },
      xn = { position: "absolute", visibility: "hidden", display: "block" },
      Tn = { letterSpacing: 0, fontWeight: 400 },
      wn = ["Top", "Right", "Bottom", "Left"],
      Nn = ["Webkit", "O", "Moz", "ms"];st.fn.extend({ css: function css(e, n) {
      return st.access(this, function (e, n, r) {
        var i,
            o,
            a = {},
            s = 0;if (st.isArray(n)) {
          for (i = ln(e), o = n.length; o > s; s++) {
            a[n[s]] = st.css(e, n[s], !1, i);
          }return a;
        }return r !== t ? st.style(e, n, r) : st.css(e, n);
      }, e, n, arguments.length > 1);
    }, show: function show() {
      return N(this, !0);
    }, hide: function hide() {
      return N(this);
    }, toggle: function toggle(e) {
      var t = "boolean" == typeof e;return this.each(function () {
        (t ? e : w(this)) ? st(this).show() : st(this).hide();
      });
    } }), st.extend({ cssHooks: { opacity: { get: function get(e, t) {
          if (t) {
            var n = un(e, "opacity");return "" === n ? "1" : n;
          }
        } } }, cssNumber: { columnCount: !0, fillOpacity: !0, fontWeight: !0, lineHeight: !0, opacity: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": st.support.cssFloat ? "cssFloat" : "styleFloat" }, style: function style(e, n, r, i) {
      if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
        var o,
            a,
            s,
            u = st.camelCase(n),
            l = e.style;if (n = st.cssProps[u] || (st.cssProps[u] = T(l, u)), s = st.cssHooks[n] || st.cssHooks[u], r === t) return s && "get" in s && (o = s.get(e, !1, i)) !== t ? o : l[n];if (a = typeof r === "undefined" ? "undefined" : _typeof(r), "string" === a && (o = vn.exec(r)) && (r = (o[1] + 1) * o[2] + parseFloat(st.css(e, n)), a = "number"), !(null == r || "number" === a && isNaN(r) || ("number" !== a || st.cssNumber[u] || (r += "px"), st.support.clearCloneStyle || "" !== r || 0 !== n.indexOf("background") || (l[n] = "inherit"), s && "set" in s && (r = s.set(e, r, i)) === t))) try {
          l[n] = r;
        } catch (c) {}
      }
    }, css: function css(e, n, r, i) {
      var o,
          a,
          s,
          u = st.camelCase(n);return n = st.cssProps[u] || (st.cssProps[u] = T(e.style, u)), s = st.cssHooks[n] || st.cssHooks[u], s && "get" in s && (o = s.get(e, !0, r)), o === t && (o = un(e, n, i)), "normal" === o && n in Tn && (o = Tn[n]), r ? (a = parseFloat(o), r === !0 || st.isNumeric(a) ? a || 0 : o) : o;
    }, swap: function swap(e, t, n, r) {
      var i,
          o,
          a = {};for (o in t) {
        a[o] = e.style[o], e.style[o] = t[o];
      }i = n.apply(e, r || []);for (o in t) {
        e.style[o] = a[o];
      }return i;
    } }), e.getComputedStyle ? (ln = function ln(t) {
    return e.getComputedStyle(t, null);
  }, un = function un(e, n, r) {
    var i,
        o,
        a,
        s = r || ln(e),
        u = s ? s.getPropertyValue(n) || s[n] : t,
        l = e.style;return s && ("" !== u || st.contains(e.ownerDocument, e) || (u = st.style(e, n)), yn.test(u) && gn.test(n) && (i = l.width, o = l.minWidth, a = l.maxWidth, l.minWidth = l.maxWidth = l.width = u, u = s.width, l.width = i, l.minWidth = o, l.maxWidth = a)), u;
  }) : V.documentElement.currentStyle && (ln = function ln(e) {
    return e.currentStyle;
  }, un = function un(e, n, r) {
    var i,
        o,
        a,
        s = r || ln(e),
        u = s ? s[n] : t,
        l = e.style;return null == u && l && l[n] && (u = l[n]), yn.test(u) && !dn.test(n) && (i = l.left, o = e.runtimeStyle, a = o && o.left, a && (o.left = e.currentStyle.left), l.left = "fontSize" === n ? "1em" : u, u = l.pixelLeft + "px", l.left = i, a && (o.left = a)), "" === u ? "auto" : u;
  }), st.each(["height", "width"], function (e, n) {
    st.cssHooks[n] = { get: function get(e, r, i) {
        return r ? 0 === e.offsetWidth && hn.test(st.css(e, "display")) ? st.swap(e, xn, function () {
          return E(e, n, i);
        }) : E(e, n, i) : t;
      }, set: function set(e, t, r) {
        var i = r && ln(e);return C(e, t, r ? k(e, n, r, st.support.boxSizing && "border-box" === st.css(e, "boxSizing", !1, i), i) : 0);
      } };
  }), st.support.opacity || (st.cssHooks.opacity = { get: function get(e, t) {
      return pn.test((t && e.currentStyle ? e.currentStyle.filter : e.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : t ? "1" : "";
    }, set: function set(e, t) {
      var n = e.style,
          r = e.currentStyle,
          i = st.isNumeric(t) ? "alpha(opacity=" + 100 * t + ")" : "",
          o = r && r.filter || n.filter || "";n.zoom = 1, (t >= 1 || "" === t) && "" === st.trim(o.replace(fn, "")) && n.removeAttribute && (n.removeAttribute("filter"), "" === t || r && !r.filter) || (n.filter = fn.test(o) ? o.replace(fn, i) : o + " " + i);
    } }), st(function () {
    st.support.reliableMarginRight || (st.cssHooks.marginRight = { get: function get(e, n) {
        return n ? st.swap(e, { display: "inline-block" }, un, [e, "marginRight"]) : t;
      } }), !st.support.pixelPosition && st.fn.position && st.each(["top", "left"], function (e, n) {
      st.cssHooks[n] = { get: function get(e, r) {
          return r ? (r = un(e, n), yn.test(r) ? st(e).position()[n] + "px" : r) : t;
        } };
    });
  }), st.expr && st.expr.filters && (st.expr.filters.hidden = function (e) {
    return 0 === e.offsetWidth && 0 === e.offsetHeight || !st.support.reliableHiddenOffsets && "none" === (e.style && e.style.display || st.css(e, "display"));
  }, st.expr.filters.visible = function (e) {
    return !st.expr.filters.hidden(e);
  }), st.each({ margin: "", padding: "", border: "Width" }, function (e, t) {
    st.cssHooks[e + t] = { expand: function expand(n) {
        for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [n]; 4 > r; r++) {
          i[e + wn[r] + t] = o[r] || o[r - 2] || o[0];
        }return i;
      } }, gn.test(e) || (st.cssHooks[e + t].set = C);
  });var Cn = /%20/g,
      kn = /\[\]$/,
      En = /\r?\n/g,
      Sn = /^(?:submit|button|image|reset)$/i,
      An = /^(?:input|select|textarea|keygen)/i;st.fn.extend({ serialize: function serialize() {
      return st.param(this.serializeArray());
    }, serializeArray: function serializeArray() {
      return this.map(function () {
        var e = st.prop(this, "elements");return e ? st.makeArray(e) : this;
      }).filter(function () {
        var e = this.type;return this.name && !st(this).is(":disabled") && An.test(this.nodeName) && !Sn.test(e) && (this.checked || !Zt.test(e));
      }).map(function (e, t) {
        var n = st(this).val();return null == n ? null : st.isArray(n) ? st.map(n, function (e) {
          return { name: t.name, value: e.replace(En, "\r\n") };
        }) : { name: t.name, value: n.replace(En, "\r\n") };
      }).get();
    } }), st.param = function (e, n) {
    var r,
        i = [],
        o = function o(e, t) {
      t = st.isFunction(t) ? t() : null == t ? "" : t, i[i.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t);
    };if (n === t && (n = st.ajaxSettings && st.ajaxSettings.traditional), st.isArray(e) || e.jquery && !st.isPlainObject(e)) st.each(e, function () {
      o(this.name, this.value);
    });else for (r in e) {
      j(r, e[r], n, o);
    }return i.join("&").replace(Cn, "+");
  };var jn,
      Dn,
      Ln = st.now(),
      Hn = /\?/,
      Mn = /#.*$/,
      qn = /([?&])_=[^&]*/,
      _n = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
      Fn = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      On = /^(?:GET|HEAD)$/,
      Bn = /^\/\//,
      Pn = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
      Rn = st.fn.load,
      Wn = {},
      $n = {},
      In = "*/".concat("*");try {
    Dn = Y.href;
  } catch (zn) {
    Dn = V.createElement("a"), Dn.href = "", Dn = Dn.href;
  }jn = Pn.exec(Dn.toLowerCase()) || [], st.fn.load = function (e, n, r) {
    if ("string" != typeof e && Rn) return Rn.apply(this, arguments);var i,
        o,
        a,
        s = this,
        u = e.indexOf(" ");return u >= 0 && (i = e.slice(u, e.length), e = e.slice(0, u)), st.isFunction(n) ? (r = n, n = t) : n && "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && (o = "POST"), s.length > 0 && st.ajax({ url: e, type: o, dataType: "html", data: n }).done(function (e) {
      a = arguments, s.html(i ? st("<div>").append(st.parseHTML(e)).find(i) : e);
    }).complete(r && function (e, t) {
      s.each(r, a || [e.responseText, t, e]);
    }), this;
  }, st.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, t) {
    st.fn[t] = function (e) {
      return this.on(t, e);
    };
  }), st.each(["get", "post"], function (e, n) {
    st[n] = function (e, r, i, o) {
      return st.isFunction(r) && (o = o || i, i = r, r = t), st.ajax({ url: e, type: n, dataType: o, data: r, success: i });
    };
  }), st.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: Dn, type: "GET", isLocal: Fn.test(jn[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": In, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText" }, converters: { "* text": e.String, "text html": !0, "text json": st.parseJSON, "text xml": st.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(e, t) {
      return t ? H(H(e, st.ajaxSettings), t) : H(st.ajaxSettings, e);
    }, ajaxPrefilter: D(Wn), ajaxTransport: D($n), ajax: function ajax(e, n) {
      function r(e, n, r, s) {
        var l,
            f,
            v,
            b,
            T,
            N = n;2 !== x && (x = 2, u && clearTimeout(u), i = t, a = s || "", w.readyState = e > 0 ? 4 : 0, r && (b = M(p, w, r)), e >= 200 && 300 > e || 304 === e ? (p.ifModified && (T = w.getResponseHeader("Last-Modified"), T && (st.lastModified[o] = T), T = w.getResponseHeader("etag"), T && (st.etag[o] = T)), 304 === e ? (l = !0, N = "notmodified") : (l = q(p, b), N = l.state, f = l.data, v = l.error, l = !v)) : (v = N, (e || !N) && (N = "error", 0 > e && (e = 0))), w.status = e, w.statusText = (n || N) + "", l ? g.resolveWith(d, [f, N, w]) : g.rejectWith(d, [w, N, v]), w.statusCode(y), y = t, c && h.trigger(l ? "ajaxSuccess" : "ajaxError", [w, p, l ? f : v]), m.fireWith(d, [w, N]), c && (h.trigger("ajaxComplete", [w, p]), --st.active || st.event.trigger("ajaxStop")));
      }"object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && (n = e, e = t), n = n || {};var i,
          o,
          a,
          s,
          u,
          l,
          c,
          f,
          p = st.ajaxSetup({}, n),
          d = p.context || p,
          h = p.context && (d.nodeType || d.jquery) ? st(d) : st.event,
          g = st.Deferred(),
          m = st.Callbacks("once memory"),
          y = p.statusCode || {},
          v = {},
          b = {},
          x = 0,
          T = "canceled",
          w = { readyState: 0, getResponseHeader: function getResponseHeader(e) {
          var t;if (2 === x) {
            if (!s) for (s = {}; t = _n.exec(a);) {
              s[t[1].toLowerCase()] = t[2];
            }t = s[e.toLowerCase()];
          }return null == t ? null : t;
        }, getAllResponseHeaders: function getAllResponseHeaders() {
          return 2 === x ? a : null;
        }, setRequestHeader: function setRequestHeader(e, t) {
          var n = e.toLowerCase();return x || (e = b[n] = b[n] || e, v[e] = t), this;
        }, overrideMimeType: function overrideMimeType(e) {
          return x || (p.mimeType = e), this;
        }, statusCode: function statusCode(e) {
          var t;if (e) if (2 > x) for (t in e) {
            y[t] = [y[t], e[t]];
          } else w.always(e[w.status]);return this;
        }, abort: function abort(e) {
          var t = e || T;return i && i.abort(t), r(0, t), this;
        } };if (g.promise(w).complete = m.add, w.success = w.done, w.error = w.fail, p.url = ((e || p.url || Dn) + "").replace(Mn, "").replace(Bn, jn[1] + "//"), p.type = n.method || n.type || p.method || p.type, p.dataTypes = st.trim(p.dataType || "*").toLowerCase().match(lt) || [""], null == p.crossDomain && (l = Pn.exec(p.url.toLowerCase()), p.crossDomain = !(!l || l[1] === jn[1] && l[2] === jn[2] && (l[3] || ("http:" === l[1] ? 80 : 443)) == (jn[3] || ("http:" === jn[1] ? 80 : 443)))), p.data && p.processData && "string" != typeof p.data && (p.data = st.param(p.data, p.traditional)), L(Wn, p, n, w), 2 === x) return w;c = p.global, c && 0 === st.active++ && st.event.trigger("ajaxStart"), p.type = p.type.toUpperCase(), p.hasContent = !On.test(p.type), o = p.url, p.hasContent || (p.data && (o = p.url += (Hn.test(o) ? "&" : "?") + p.data, delete p.data), p.cache === !1 && (p.url = qn.test(o) ? o.replace(qn, "$1_=" + Ln++) : o + (Hn.test(o) ? "&" : "?") + "_=" + Ln++)), p.ifModified && (st.lastModified[o] && w.setRequestHeader("If-Modified-Since", st.lastModified[o]), st.etag[o] && w.setRequestHeader("If-None-Match", st.etag[o])), (p.data && p.hasContent && p.contentType !== !1 || n.contentType) && w.setRequestHeader("Content-Type", p.contentType), w.setRequestHeader("Accept", p.dataTypes[0] && p.accepts[p.dataTypes[0]] ? p.accepts[p.dataTypes[0]] + ("*" !== p.dataTypes[0] ? ", " + In + "; q=0.01" : "") : p.accepts["*"]);for (f in p.headers) {
        w.setRequestHeader(f, p.headers[f]);
      }if (p.beforeSend && (p.beforeSend.call(d, w, p) === !1 || 2 === x)) return w.abort();T = "abort";for (f in { success: 1, error: 1, complete: 1 }) {
        w[f](p[f]);
      }if (i = L($n, p, n, w)) {
        w.readyState = 1, c && h.trigger("ajaxSend", [w, p]), p.async && p.timeout > 0 && (u = setTimeout(function () {
          w.abort("timeout");
        }, p.timeout));try {
          x = 1, i.send(v, r);
        } catch (N) {
          if (!(2 > x)) throw N;r(-1, N);
        }
      } else r(-1, "No Transport");return w;
    }, getScript: function getScript(e, n) {
      return st.get(e, t, n, "script");
    }, getJSON: function getJSON(e, t, n) {
      return st.get(e, t, n, "json");
    } }), st.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /(?:java|ecma)script/ }, converters: { "text script": function textScript(e) {
        return st.globalEval(e), e;
      } } }), st.ajaxPrefilter("script", function (e) {
    e.cache === t && (e.cache = !1), e.crossDomain && (e.type = "GET", e.global = !1);
  }), st.ajaxTransport("script", function (e) {
    if (e.crossDomain) {
      var n,
          r = V.head || st("head")[0] || V.documentElement;return { send: function send(t, i) {
          n = V.createElement("script"), n.async = !0, e.scriptCharset && (n.charset = e.scriptCharset), n.src = e.url, n.onload = n.onreadystatechange = function (e, t) {
            (t || !n.readyState || /loaded|complete/.test(n.readyState)) && (n.onload = n.onreadystatechange = null, n.parentNode && n.parentNode.removeChild(n), n = null, t || i(200, "success"));
          }, r.insertBefore(n, r.firstChild);
        }, abort: function abort() {
          n && n.onload(t, !0);
        } };
    }
  });var Xn = [],
      Un = /(=)\?(?=&|$)|\?\?/;st.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
      var e = Xn.pop() || st.expando + "_" + Ln++;return this[e] = !0, e;
    } }), st.ajaxPrefilter("json jsonp", function (n, r, i) {
    var o,
        a,
        s,
        u = n.jsonp !== !1 && (Un.test(n.url) ? "url" : "string" == typeof n.data && !(n.contentType || "").indexOf("application/x-www-form-urlencoded") && Un.test(n.data) && "data");return u || "jsonp" === n.dataTypes[0] ? (o = n.jsonpCallback = st.isFunction(n.jsonpCallback) ? n.jsonpCallback() : n.jsonpCallback, u ? n[u] = n[u].replace(Un, "$1" + o) : n.jsonp !== !1 && (n.url += (Hn.test(n.url) ? "&" : "?") + n.jsonp + "=" + o), n.converters["script json"] = function () {
      return s || st.error(o + " was not called"), s[0];
    }, n.dataTypes[0] = "json", a = e[o], e[o] = function () {
      s = arguments;
    }, i.always(function () {
      e[o] = a, n[o] && (n.jsonpCallback = r.jsonpCallback, Xn.push(o)), s && st.isFunction(a) && a(s[0]), s = a = t;
    }), "script") : t;
  });var Vn,
      Yn,
      Jn = 0,
      Gn = e.ActiveXObject && function () {
    var e;for (e in Vn) {
      Vn[e](t, !0);
    }
  };st.ajaxSettings.xhr = e.ActiveXObject ? function () {
    return !this.isLocal && _() || F();
  } : _, Yn = st.ajaxSettings.xhr(), st.support.cors = !!Yn && "withCredentials" in Yn, Yn = st.support.ajax = !!Yn, Yn && st.ajaxTransport(function (n) {
    if (!n.crossDomain || st.support.cors) {
      var _r;return { send: function send(i, o) {
          var a,
              s,
              u = n.xhr();if (n.username ? u.open(n.type, n.url, n.async, n.username, n.password) : u.open(n.type, n.url, n.async), n.xhrFields) for (s in n.xhrFields) {
            u[s] = n.xhrFields[s];
          }n.mimeType && u.overrideMimeType && u.overrideMimeType(n.mimeType), n.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest");try {
            for (s in i) {
              u.setRequestHeader(s, i[s]);
            }
          } catch (l) {}u.send(n.hasContent && n.data || null), _r = function r(e, i) {
            var s, l, c, f, p;try {
              if (_r && (i || 4 === u.readyState)) if (_r = t, a && (u.onreadystatechange = st.noop, Gn && delete Vn[a]), i) 4 !== u.readyState && u.abort();else {
                f = {}, s = u.status, p = u.responseXML, c = u.getAllResponseHeaders(), p && p.documentElement && (f.xml = p), "string" == typeof u.responseText && (f.text = u.responseText);try {
                  l = u.statusText;
                } catch (d) {
                  l = "";
                }s || !n.isLocal || n.crossDomain ? 1223 === s && (s = 204) : s = f.text ? 200 : 404;
              }
            } catch (h) {
              i || o(-1, h);
            }f && o(s, l, f, c);
          }, n.async ? 4 === u.readyState ? setTimeout(_r) : (a = ++Jn, Gn && (Vn || (Vn = {}, st(e).unload(Gn)), Vn[a] = _r), u.onreadystatechange = _r) : _r();
        }, abort: function abort() {
          _r && _r(t, !0);
        } };
    }
  });var Qn,
      Kn,
      Zn = /^(?:toggle|show|hide)$/,
      er = RegExp("^(?:([+-])=|)(" + ut + ")([a-z%]*)$", "i"),
      tr = /queueHooks$/,
      nr = [W],
      rr = { "*": [function (e, t) {
      var n,
          r,
          i = this.createTween(e, t),
          o = er.exec(t),
          a = i.cur(),
          s = +a || 0,
          u = 1,
          l = 20;if (o) {
        if (n = +o[2], r = o[3] || (st.cssNumber[e] ? "" : "px"), "px" !== r && s) {
          s = st.css(i.elem, e, !0) || n || 1;do {
            u = u || ".5", s /= u, st.style(i.elem, e, s + r);
          } while (u !== (u = i.cur() / a) && 1 !== u && --l);
        }i.unit = r, i.start = s, i.end = o[1] ? s + (o[1] + 1) * n : n;
      }return i;
    }] };st.Animation = st.extend(P, { tweener: function tweener(e, t) {
      st.isFunction(e) ? (t = e, e = ["*"]) : e = e.split(" ");for (var n, r = 0, i = e.length; i > r; r++) {
        n = e[r], rr[n] = rr[n] || [], rr[n].unshift(t);
      }
    }, prefilter: function prefilter(e, t) {
      t ? nr.unshift(e) : nr.push(e);
    } }), st.Tween = $, $.prototype = { constructor: $, init: function init(e, t, n, r, i, o) {
      this.elem = e, this.prop = n, this.easing = i || "swing", this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (st.cssNumber[n] ? "" : "px");
    }, cur: function cur() {
      var e = $.propHooks[this.prop];return e && e.get ? e.get(this) : $.propHooks._default.get(this);
    }, run: function run(e) {
      var t,
          n = $.propHooks[this.prop];return this.pos = t = this.options.duration ? st.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : $.propHooks._default.set(this), this;
    } }, $.prototype.init.prototype = $.prototype, $.propHooks = { _default: { get: function get(e) {
        var t;return null == e.elem[e.prop] || e.elem.style && null != e.elem.style[e.prop] ? (t = st.css(e.elem, e.prop, "auto"), t && "auto" !== t ? t : 0) : e.elem[e.prop];
      }, set: function set(e) {
        st.fx.step[e.prop] ? st.fx.step[e.prop](e) : e.elem.style && (null != e.elem.style[st.cssProps[e.prop]] || st.cssHooks[e.prop]) ? st.style(e.elem, e.prop, e.now + e.unit) : e.elem[e.prop] = e.now;
      } } }, $.propHooks.scrollTop = $.propHooks.scrollLeft = { set: function set(e) {
      e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
    } }, st.each(["toggle", "show", "hide"], function (e, t) {
    var n = st.fn[t];st.fn[t] = function (e, r, i) {
      return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(I(t, !0), e, r, i);
    };
  }), st.fn.extend({ fadeTo: function fadeTo(e, t, n, r) {
      return this.filter(w).css("opacity", 0).show().end().animate({ opacity: t }, e, n, r);
    }, animate: function animate(e, t, n, r) {
      var i = st.isEmptyObject(e),
          o = st.speed(t, n, r),
          a = function a() {
        var t = P(this, st.extend({}, e), o);a.finish = function () {
          t.stop(!0);
        }, (i || st._data(this, "finish")) && t.stop(!0);
      };return a.finish = a, i || o.queue === !1 ? this.each(a) : this.queue(o.queue, a);
    }, stop: function stop(e, n, r) {
      var i = function i(e) {
        var t = e.stop;delete e.stop, t(r);
      };return "string" != typeof e && (r = n, n = e, e = t), n && e !== !1 && this.queue(e || "fx", []), this.each(function () {
        var t = !0,
            n = null != e && e + "queueHooks",
            o = st.timers,
            a = st._data(this);if (n) a[n] && a[n].stop && i(a[n]);else for (n in a) {
          a[n] && a[n].stop && tr.test(n) && i(a[n]);
        }for (n = o.length; n--;) {
          o[n].elem !== this || null != e && o[n].queue !== e || (o[n].anim.stop(r), t = !1, o.splice(n, 1));
        }(t || !r) && st.dequeue(this, e);
      });
    }, finish: function finish(e) {
      return e !== !1 && (e = e || "fx"), this.each(function () {
        var t,
            n = st._data(this),
            r = n[e + "queue"],
            i = n[e + "queueHooks"],
            o = st.timers,
            a = r ? r.length : 0;for (n.finish = !0, st.queue(this, e, []), i && i.cur && i.cur.finish && i.cur.finish.call(this), t = o.length; t--;) {
          o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));
        }for (t = 0; a > t; t++) {
          r[t] && r[t].finish && r[t].finish.call(this);
        }delete n.finish;
      });
    } }), st.each({ slideDown: I("show"), slideUp: I("hide"), slideToggle: I("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (e, t) {
    st.fn[e] = function (e, n, r) {
      return this.animate(t, e, n, r);
    };
  }), st.speed = function (e, t, n) {
    var r = e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? st.extend({}, e) : { complete: n || !n && t || st.isFunction(e) && e, duration: e, easing: n && t || t && !st.isFunction(t) && t };return r.duration = st.fx.off ? 0 : "number" == typeof r.duration ? r.duration : r.duration in st.fx.speeds ? st.fx.speeds[r.duration] : st.fx.speeds._default, (null == r.queue || r.queue === !0) && (r.queue = "fx"), r.old = r.complete, r.complete = function () {
      st.isFunction(r.old) && r.old.call(this), r.queue && st.dequeue(this, r.queue);
    }, r;
  }, st.easing = { linear: function linear(e) {
      return e;
    }, swing: function swing(e) {
      return .5 - Math.cos(e * Math.PI) / 2;
    } }, st.timers = [], st.fx = $.prototype.init, st.fx.tick = function () {
    var e,
        n = st.timers,
        r = 0;for (Qn = st.now(); n.length > r; r++) {
      e = n[r], e() || n[r] !== e || n.splice(r--, 1);
    }n.length || st.fx.stop(), Qn = t;
  }, st.fx.timer = function (e) {
    e() && st.timers.push(e) && st.fx.start();
  }, st.fx.interval = 13, st.fx.start = function () {
    Kn || (Kn = setInterval(st.fx.tick, st.fx.interval));
  }, st.fx.stop = function () {
    clearInterval(Kn), Kn = null;
  }, st.fx.speeds = { slow: 600, fast: 200, _default: 400 }, st.fx.step = {}, st.expr && st.expr.filters && (st.expr.filters.animated = function (e) {
    return st.grep(st.timers, function (t) {
      return e === t.elem;
    }).length;
  }), st.fn.offset = function (e) {
    if (arguments.length) return e === t ? this : this.each(function (t) {
      st.offset.setOffset(this, e, t);
    });var n,
        r,
        i = { top: 0, left: 0 },
        o = this[0],
        a = o && o.ownerDocument;if (a) return n = a.documentElement, st.contains(n, o) ? (o.getBoundingClientRect !== t && (i = o.getBoundingClientRect()), r = z(a), { top: i.top + (r.pageYOffset || n.scrollTop) - (n.clientTop || 0), left: i.left + (r.pageXOffset || n.scrollLeft) - (n.clientLeft || 0) }) : i;
  }, st.offset = { setOffset: function setOffset(e, t, n) {
      var r = st.css(e, "position");"static" === r && (e.style.position = "relative");var i,
          o,
          a = st(e),
          s = a.offset(),
          u = st.css(e, "top"),
          l = st.css(e, "left"),
          c = ("absolute" === r || "fixed" === r) && st.inArray("auto", [u, l]) > -1,
          f = {},
          p = {};c ? (p = a.position(), i = p.top, o = p.left) : (i = parseFloat(u) || 0, o = parseFloat(l) || 0), st.isFunction(t) && (t = t.call(e, n, s)), null != t.top && (f.top = t.top - s.top + i), null != t.left && (f.left = t.left - s.left + o), "using" in t ? t.using.call(e, f) : a.css(f);
    } }, st.fn.extend({ position: function position() {
      if (this[0]) {
        var e,
            t,
            n = { top: 0, left: 0 },
            r = this[0];return "fixed" === st.css(r, "position") ? t = r.getBoundingClientRect() : (e = this.offsetParent(), t = this.offset(), st.nodeName(e[0], "html") || (n = e.offset()), n.top += st.css(e[0], "borderTopWidth", !0), n.left += st.css(e[0], "borderLeftWidth", !0)), { top: t.top - n.top - st.css(r, "marginTop", !0), left: t.left - n.left - st.css(r, "marginLeft", !0) };
      }
    }, offsetParent: function offsetParent() {
      return this.map(function () {
        for (var e = this.offsetParent || V.documentElement; e && !st.nodeName(e, "html") && "static" === st.css(e, "position");) {
          e = e.offsetParent;
        }return e || V.documentElement;
      });
    } }), st.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (e, n) {
    var r = /Y/.test(n);st.fn[e] = function (i) {
      return st.access(this, function (e, i, o) {
        var a = z(e);return o === t ? a ? n in a ? a[n] : a.document.documentElement[i] : e[i] : (a ? a.scrollTo(r ? st(a).scrollLeft() : o, r ? o : st(a).scrollTop()) : e[i] = o, t);
      }, e, i, arguments.length, null);
    };
  }), st.each({ Height: "height", Width: "width" }, function (e, n) {
    st.each({ padding: "inner" + e, content: n, "": "outer" + e }, function (r, i) {
      st.fn[i] = function (i, o) {
        var a = arguments.length && (r || "boolean" != typeof i),
            s = r || (i === !0 || o === !0 ? "margin" : "border");return st.access(this, function (n, r, i) {
          var o;return st.isWindow(n) ? n.document.documentElement["client" + e] : 9 === n.nodeType ? (o = n.documentElement, Math.max(n.body["scroll" + e], o["scroll" + e], n.body["offset" + e], o["offset" + e], o["client" + e])) : i === t ? st.css(n, r, s) : st.style(n, r, i, s);
        }, n, a ? i : t, a, null);
      };
    });
  }), e.jQuery = e.$ = st, "function" == "function" && __webpack_require__("./node_modules/webpack/buildin/amd-options.js") && __webpack_require__("./node_modules/webpack/buildin/amd-options.js").jQuery && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
    return st;
  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
})(window);
//@ sourceMappingURL=jquery.min.map

/***/ }),

/***/ "./resources/scripts/libs/sc-player.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__jquery_min__ = __webpack_require__("./resources/scripts/libs/jquery.min.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__jquery_min___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__jquery_min__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_bg_music__ = __webpack_require__("./resources/scripts/components/bg-music.js");


/*
*   SoundCloud Custom Player jQuery Plugin
*   Author: Matas Petrikas, matas@soundcloud.com
*   Copyright (c) 2009  SoundCloud Ltd.
*   Licensed under the MIT license:
*   http://www.opensource.org/licenses/mit-license.php
*
*   Usage:
*   <a href="http://soundcloud.com/matas/hobnotropic" class="sc-player">My new dub track</a>
*   The link will be automatically replaced by the HTML based player
*/
(function ($) {
  // Convert milliseconds into Hours (h), Minutes (m), and Seconds (s)
  var timecode = function timecode(ms) {
    var hms = function (ms) {
      return {
        h: Math.floor(ms / (60 * 60 * 1000)),
        m: Math.floor(ms / 60000 % 60),
        s: Math.floor(ms / 1000 % 60)
      };
    }(ms),
        tc = []; // Timecode array to be joined with '.'

    if (hms.h > 0) {
      tc.push(hms.h);
    }

    tc.push(hms.m < 10 && hms.h > 0 ? "0" + hms.m : hms.m);
    tc.push(hms.s < 10 ? "0" + hms.s : hms.s);

    return tc.join('.');
  };
  // shuffle the array
  var shuffle = function shuffle(arr) {
    arr.sort(function () {
      return 1 - Math.floor(Math.random() * 3);
    });
    return arr;
  };

  var debug = true,
      useSandBox = false,
      $doc = $(document),
      log = function log(args) {
    try {
      if (debug && window.console && window.console.log) {
        window.console.log.apply(window.console, arguments);
      }
    } catch (e) {
      // no console available
    }
  },
      domain = useSandBox ? 'sandbox-soundcloud.com' : 'soundcloud.com',
      secureDocument = document.location.protocol === 'https:',

  // convert a SoundCloud resource URL to an API URL
  scApiUrl = function scApiUrl(url, apiKey) {
    var resolver = (secureDocument || /^https/i.test(url) ? 'https' : 'http') + '://api.' + domain + '/resolve?url=',
        params = 'format=json&consumer_key=' + apiKey + '&callback=?';

    // force the secure url in the secure environment
    if (secureDocument) {
      url = url.replace(/^http:/, 'https:');
    }

    // check if it's already a resolved api url
    if (/api\./.test(url)) {
      return url + '?' + params;
    } else {
      return resolver + url + '&' + params;
    }
  };

  // TODO Expose the audio engine, so it can be unit-tested
  var audioEngine = function () {
    var html5AudioAvailable = function () {
      var state = false;
      try {
        var a = new Audio();
        state = a.canPlayType && /maybe|probably/.test(a.canPlayType('audio/mpeg'));
        // uncomment the following line, if you want to enable the html5 audio only on mobile devices
        // state = state && (/iPad|iphone|mobile|pre\//i).test(navigator.userAgent);
      } catch (e) {
        // there's no audio support here sadly
      }

      return state;
    }(),
        callbacks = {
      onReady: function onReady() {
        $doc.trigger('scPlayer:onAudioReady');
      },
      onPlay: function onPlay() {
        $doc.trigger('scPlayer:onMediaPlay');
      },
      onPause: function onPause() {
        $doc.trigger('scPlayer:onMediaPause');
      },
      onEnd: function onEnd() {
        $doc.trigger('scPlayer:onMediaEnd');
      },
      onBuffer: function onBuffer(percent) {
        $doc.trigger({ type: 'scPlayer:onMediaBuffering', percent: percent });
      }
    };

    var html5Driver = function html5Driver() {
      var player = new Audio(),
          onTimeUpdate = function onTimeUpdate(event) {
        var obj = event.target,
            buffer = (obj.buffered.length && obj.buffered.end(0)) / obj.duration * 100;
        // ipad has no progress events implemented yet
        callbacks.onBuffer(buffer);
        // anounce if it's finished for the clients without 'ended' events implementation
        if (obj.currentTime === obj.duration) {
          callbacks.onEnd();
        }
      },
          onProgress = function onProgress(event) {
        var obj = event.target,
            buffer = (obj.buffered.length && obj.buffered.end(0)) / obj.duration * 100;
        callbacks.onBuffer(buffer);
      };

      $('<div class="sc-player-engine-container"></div>').appendTo(document.body).append(player);

      // prepare the listeners
      player.addEventListener('play', callbacks.onPlay, false);
      player.addEventListener('pause', callbacks.onPause, false);
      // handled in the onTimeUpdate for now untill all the browsers support 'ended' event
      // player.addEventListener('ended', callbacks.onEnd, false);
      player.addEventListener('timeupdate', onTimeUpdate, false);
      player.addEventListener('progress', onProgress, false);

      return {
        load: function load(track, apiKey) {
          player.pause();
          player.src = track.stream_url + (/\?/.test(track.stream_url) ? '&' : '?') + 'consumer_key=' + apiKey;
          player.load();
          player.play();
        },
        play: function play() {
          player.play();
        },
        pause: function pause() {
          player.pause();
        },
        stop: function stop() {
          if (player.currentTime) {
            player.currentTime = 0;
            player.pause();
          }
        },
        seek: function seek(relative) {
          player.currentTime = player.duration * relative;
          player.play();
        },
        getDuration: function getDuration() {
          return player.duration * 1000;
        },
        getPosition: function getPosition() {
          return player.currentTime * 1000;
        },
        setVolume: function setVolume(val) {
          player.volume = val / 100;
        }
      };
    };

    var flashDriver = function flashDriver() {
      var engineId = 'scPlayerEngine',
          player,
          flashHtml = function flashHtml(url) {
        var swf = (secureDocument ? 'https' : 'http') + '://player.' + domain + '/player.swf?url=' + url + '&amp;enable_api=true&amp;player_type=engine&amp;object_id=' + engineId;
        if ($.browser.msie) {
          return '<object height="100%" width="100%" id="' + engineId + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" data="' + swf + '">' + '<param name="movie" value="' + swf + '" />' + '<param name="allowscriptaccess" value="always" />' + '</object>';
        } else {
          return '<object height="100%" width="100%" id="' + engineId + '">' + '<embed allowscriptaccess="always" height="100%" width="100%" src="' + swf + '" type="application/x-shockwave-flash" name="' + engineId + '" />' + '</object>';
        }
      };

      // listen to audio engine events
      // when the loaded track is ready to play
      soundcloud.addEventListener('onPlayerReady', function (flashId, data) {
        player = soundcloud.getPlayer(engineId);
        callbacks.onReady();
      });

      // when the loaded track finished playing
      soundcloud.addEventListener('onMediaEnd', callbacks.onEnd);

      // when the loaded track is still buffering
      soundcloud.addEventListener('onMediaBuffering', function (flashId, data) {
        callbacks.onBuffer(data.percent);
      });

      // when the loaded track started to play
      soundcloud.addEventListener('onMediaPlay', callbacks.onPlay);

      // when the loaded track is was paused
      soundcloud.addEventListener('onMediaPause', callbacks.onPause);

      return {
        load: function load(track) {
          var url = track.uri;
          if (player) {
            player.api_load(url);
          } else {
            // create a container for the flash engine (IE needs this to operate properly)
            $('<div class="sc-player-engine-container"></div>').appendTo(document.body).html(flashHtml(url));
          }
        },
        play: function play() {
          player && player.api_play();
        },
        pause: function pause() {
          player && player.api_pause();
        },
        stop: function stop() {
          player && player.api_stop();
        },
        seek: function seek(relative) {
          player && player.api_seekTo(player.api_getTrackDuration() * relative);
        },
        getDuration: function getDuration() {
          return player && player.api_getTrackDuration && player.api_getTrackDuration() * 1000;
        },
        getPosition: function getPosition() {
          return player && player.api_getTrackPosition && player.api_getTrackPosition() * 1000;
        },
        setVolume: function setVolume(val) {
          if (player && player.api_setVolume) {
            player.api_setVolume(val);
          }
        }

      };
    };

    return html5AudioAvailable ? html5Driver() : flashDriver();
  }();

  var apiKey,
      didAutoPlay = false,
      players = [],
      updates = {},
      currentUrl,
      loadTracksData = function loadTracksData($player, links, key) {
    var index = 0,
        playerObj = { node: $player, tracks: [] },
        loadUrl = function loadUrl(link) {
      var apiUrl = scApiUrl(link.url, apiKey);
      $.getJSON(apiUrl, function (data) {
        // log('data loaded', link.url, data);
        index += 1;
        if (data.tracks) {
          // log('data.tracks', data.tracks);
          playerObj.tracks = playerObj.tracks.concat(data.tracks);
        } else if (data.duration) {
          // a secret link fix, till the SC API returns permalink with secret on secret response
          data.permalink_url = link.url;
          // if track, add to player
          playerObj.tracks.push(data);
        } else if (data.creator) {
          // it's a group!
          links.push({ url: data.uri + '/tracks' });
        } else if (data.username) {
          // if user, get his tracks or favorites
          if (/favorites/.test(link.url)) {
            links.push({ url: data.uri + '/favorites' });
          } else {
            links.push({ url: data.uri + '/tracks' });
          }
        } else if ($.isArray(data)) {
          playerObj.tracks = playerObj.tracks.concat(data);
        }
        if (links[index]) {
          // if there are more track to load, get them from the api
          loadUrl(links[index]);
        } else {
          // if loading finishes, anounce it to the GUI
          playerObj.node.trigger({ type: 'onTrackDataLoaded', playerObj: playerObj, url: apiUrl });
        }
      });
    };
    // update current API key
    apiKey = key;
    // update the players queue
    players.push(playerObj);
    // load first tracks
    loadUrl(links[index]);
  },
      artworkImage = function artworkImage(track, usePlaceholder) {
    if (usePlaceholder) {
      return '<div class="sc-loading-artwork">Loading Artwork</div>';
    } else if (track.artwork_url) {
      return '<img src="' + track.artwork_url.replace('-large', '-t300x300') + '"/>';
    } else {
      return '<div class="sc-no-artwork">No Artwork</div>';
    }
  },
      updateTrackInfo = function updateTrackInfo($player, track) {
    // update the current track info in the player
    // log('updateTrackInfo', track);
    $('.sc-info', $player).each(function (index) {
      $('h3', this).html('<a href="' + track.permalink_url + '">' + track.title + '</a>');
      $('h4', this).html('by <a href="' + track.user.permalink_url + '">' + track.user.username + '</a>');
      $('p', this).html(track.description || 'no Description');
    });
    // update the artwork
    $('.sc-artwork-list li', $player).each(function (index) {
      var $item = $(this),
          itemTrack = $item.data('sc-track');

      if (itemTrack === track) {
        // show track artwork
        $item.addClass('active').find('.sc-loading-artwork').each(function (index) {
          // if the image isn't loaded yet, do it now
          $(this).removeClass('sc-loading-artwork').html(artworkImage(track, false));
        });
      } else {
        // reset other artworks
        $item.removeClass('active');
      }
    });
    // update the track duration in the progress bar
    $('.sc-duration', $player).html(timecode(track.duration));
    // put the waveform into the progress bar
    $('.sc-waveform-container', $player).html('<img src="' + track.waveform_url + '" />');

    $player.trigger('onPlayerTrackSwitch.scPlayer', [track]);
  },
      play = function play(track) {
    var url = track.permalink_url;
    if (currentUrl === url) {
      // log('will play');
      audioEngine.play();
    } else {
      currentUrl = url;
      // log('will load', url);
      audioEngine.load(track, apiKey);
    }
  },
      getPlayerData = function getPlayerData(node) {
    return players[$(node).data('sc-player').id];
  },
      updatePlayStatus = function updatePlayStatus(player, status) {
    if (status) {
      // reset all other players playing status
      $('div.sc-player.playing').removeClass('playing');
    }
    $(player).toggleClass('playing', status).trigger(status ? 'onPlayerPlay' : 'onPlayerPause');
  },
      onPlay = function onPlay(player, id) {
    var track = getPlayerData(player).tracks[id || 0];
    updateTrackInfo(player, track);
    // cache the references to most updated DOM nodes in the progress bar
    updates = {
      $buffer: $('.sc-buffer', player),
      $played: $('.sc-played', player),
      position: $('.sc-position', player)[0]
    };
    updatePlayStatus(player, true);
    play(track);
  },
      onPause = function onPause(player) {
    updatePlayStatus(player, false);
    audioEngine.pause();
  },
      onFinish = function onFinish() {
    var $player = updates.$played.closest('.sc-player'),
        $nextItem;
    // update the scrubber width
    updates.$played.css('width', '0%');
    // show the position in the track position counter
    updates.position.innerHTML = timecode(0);
    // reset the player state
    updatePlayStatus($player, false);
    // stop the audio
    audioEngine.stop();
    $player.trigger('onPlayerTrackFinish');
  },
      onSeek = function onSeek(player, relative) {
    audioEngine.seek(relative);
    $(player).trigger('onPlayerSeek');
    updatePlayStatus(player, true);
  },
      onSkip = function onSkip(player) {
    var $player = $(player);
    // continue playing through all players
    log('track finished get the next one');
    $nextItem = $('.sc-trackslist li.active', $player).next('li');
    // try to find the next track in other player
    if (!$nextItem.length) {
      $nextItem = $player.nextAll('div.sc-player:first').find('.sc-trackslist li.active');
    }
    $nextItem.click();
  },
      soundVolume = function () {
    var vol = 80,
        cooks = document.cookie.split(';'),
        volRx = new RegExp('scPlayer_volume=(\\d+)');
    for (var i in cooks) {
      if (volRx.test(cooks[i])) {
        vol = parseInt(cooks[i].match(volRx)[1], 10);
        break;
      }
    }
    return vol;
  }(),
      onVolume = function onVolume(volume) {
    var vol = Math.floor(volume);
    // save the volume in the cookie
    var date = new Date();
    date.setTime(date.getTime() + 365 * 24 * 60 * 60 * 1000);
    soundVolume = vol;
    document.cookie = ['scPlayer_volume=', vol, '; expires=', date.toUTCString(), '; path="/"'].join('');
    // update the volume in the engine
    audioEngine.setVolume(soundVolume);
  },
      positionPoll;

  // listen to audio engine events
  $doc.bind('scPlayer:onAudioReady', function (event) {
    log('onPlayerReady: audio engine is ready');
    audioEngine.play();
    // set initial volume
    onVolume(soundVolume);
  })
  // when the loaded track started to play
  .bind('scPlayer:onMediaPlay', function (event) {
    clearInterval(positionPoll);
    positionPoll = setInterval(function () {
      var duration = audioEngine.getDuration(),
          position = audioEngine.getPosition(),
          relative = position / duration;

      // update the scrubber width
      updates.$played.css('width', 100 * relative + '%');
      // show the position in the track position counter
      updates.position.innerHTML = timecode(position);
      // announce the track position to the DOM
      $doc.trigger({
        type: 'onMediaTimeUpdate.scPlayer',
        duration: duration,
        position: position,
        relative: relative
      });
    }, 500);
  })
  // when the loaded track is was paused
  .bind('scPlayer:onMediaPause', function (event) {
    clearInterval(positionPoll);
    positionPoll = null;
  })
  // change the volume
  .bind('scPlayer:onVolumeChange', function (event) {
    onVolume(event.volume);
  }).bind('scPlayer:onMediaEnd', function (event) {
    onFinish();
  }).bind('scPlayer:onMediaBuffering', function (event) {
    updates.$buffer.css('width', event.percent + '%');
  });

  // Generate custom skinnable HTML/CSS/JavaScript based SoundCloud players from links to SoundCloud resources
  $.scPlayer = function (options, node) {
    var opts = $.extend({}, $.scPlayer.defaults, options),
        playerId = players.length,
        $source = node && $(node),
        sourceClasses = $source[0].className.replace('sc-player', ''),
        links = opts.links || $.map($('a', $source).add($source.filter('a')), function (val) {
      return { url: val.href, title: val.innerHTML };
    }),
        $player = $('<div class="sc-player loading"></div>').data('sc-player', { id: playerId }),
        $artworks = $('<ol class="sc-artwork-list"></ol>').appendTo($player),
        $info = $('<div class="sc-info"><h3></h3><h4></h4><p></p><a href="#" class="sc-info-close">X</a></div>').appendTo($player),
        $controls = $('<div class="sc-controls"></div>').appendTo($player),
        $list = $('<ol class="sc-trackslist"></ol>').appendTo($player);

    // add the classes of the source node to the player itself
    // the players can be indvidually styled this way
    if (sourceClasses || opts.customClass) {
      $player.addClass(sourceClasses).addClass(opts.customClass);
    }

    // adding controls to the player
    $player.find('.sc-controls').append('<a href="#play" class="sc-play">Play</a> <a href="#pause" class="sc-pause hidden">Pause</a>').end().append('<a href="#info" class="sc-info-toggle">Info</a>').append('<div class="sc-scrubber"></div>').find('.sc-scrubber').append('<div class="sc-volume-slider"><span class="sc-volume-status" style="width:' + soundVolume + '%"></span></div>').append('<div class="sc-time-span"><div class="sc-waveform-container"></div><div class="sc-buffer"></div><div class="sc-played"></div></div>').append('<div class="sc-time-indicators"><span class="sc-position"></span> | <span class="sc-duration"></span></div>');

    // load and parse the track data from SoundCloud API
    loadTracksData($player, links, opts.apiKey);
    // init the player GUI, when the tracks data was laoded
    $player.bind('onTrackDataLoaded.scPlayer', function (event) {
      // log('onTrackDataLoaded.scPlayer', event.playerObj, playerId, event.target);
      var tracks = event.playerObj.tracks;
      if (opts.randomize) {
        tracks = shuffle(tracks);
      }
      // create the playlist
      $.each(tracks, function (index, track) {
        var active = index === 0;
        // create an item in the playlist
        $('<li><a href="' + track.permalink_url + '">' + track.title + '</a><span class="sc-track-duration">' + timecode(track.duration) + '</span></li>').data('sc-track', { id: index }).toggleClass('active', active).appendTo($list);
        // create an item in the artwork list
        $('<li></li>').append(artworkImage(track, index >= opts.loadArtworks)).appendTo($artworks).toggleClass('active', active).data('sc-track', track);
      });
      // update the element before rendering it in the DOM
      $player.each(function () {
        if ($.isFunction(opts.beforeRender)) {
          opts.beforeRender.call(this, tracks);
        }
      });
      // set the first track's duration
      $('.sc-duration', $player)[0].innerHTML = timecode(tracks[0].duration);
      $('.sc-position', $player)[0].innerHTML = timecode(0);
      // set up the first track info
      updateTrackInfo($player, tracks[0]);

      // if continous play enabled always skip to the next track after one finishes
      if (opts.continuePlayback) {
        $player.bind('onPlayerTrackFinish', function (event) {
          onSkip($player);
        });
      }

      // announce the succesful initialization
      $player.removeClass('loading').trigger('onPlayerInit');

      // if auto play is enabled and it's the first player, start playing
      if (opts.autoPlay && !didAutoPlay) {
        onPlay($player);
        didAutoPlay = true;
      }
    });

    // replace the DOM source (if there's one)
    $source.each(function (index) {
      $(this).replaceWith($player);
    });

    return $player;
  };

  // stop all players, might be useful, before replacing the player dynamically
  $.scPlayer.stopAll = function () {
    $('.sc-player.playing a.sc-pause').click();
  };

  // destroy all the players and audio engine, usefull when reloading part of the page and audio has to stop
  $.scPlayer.destroy = function () {
    $('.sc-player, .sc-player-engine-container').remove();
  };

  // plugin wrapper
  $.fn.scPlayer = function (options) {
    // reset the auto play
    didAutoPlay = false;
    // create the players
    this.each(function () {
      $.scPlayer(options, this);
    });
    return this;
  };

  // default plugin options
  $.scPlayer.defaults = $.fn.scPlayer.defaults = {
    customClass: null,
    // do something with the dom object before you render it, add nodes, get more data from the services etc.
    beforeRender: function beforeRender(tracksData) {
      var $player = $(this);
    },
    // initialization, when dom is ready
    onDomReady: function onDomReady() {
      $('a.sc-player, div.sc-player').scPlayer();
    },
    autoPlay: false,
    continuePlayback: true,
    randomize: false,
    loadArtworks: 5,
    // the default Api key should be replaced by your own one
    // get it here http://soundcloud.com/you/apps/new
    apiKey: 'htuiRd1JP11Ww0X72T1C3g'
  };

  // the GUI event bindings
  //--------------------------------------------------------

  // toggling play/pause
  $(document).on('click', 'a.sc-play, a.sc-pause', function (event) {
    __WEBPACK_IMPORTED_MODULE_1__components_bg_music__["a" /* bgMute */]();
    var $list = $(this).closest('.sc-player').find('ol.sc-trackslist');
    // simulate the click in the tracklist
    $list.find('li.active').click();
    return false;
  });

  // displaying the info panel in the player
  $(document).on('click', 'a.sc-info-toggle, a.sc-info-close', function (event) {
    var $link = $(this);
    $link.closest('.sc-player').find('.sc-info').toggleClass('active').end().find('a.sc-info-toggle').toggleClass('active');
    return false;
  });

  // selecting tracks in the playlist
  $(document).on('click', '.sc-trackslist li', function (event) {
    var $track = $(this),
        $player = $track.closest('.sc-player'),
        trackId = $track.data('sc-track').id,
        play = $player.is(':not(.playing)') || $track.is(':not(.active)');
    if (play) {
      onPlay($player, trackId);
    } else {
      onPause($player);
    }
    $track.addClass('active').siblings('li').removeClass('active');
    $('.artworks li', $player).each(function (index) {
      $(this).toggleClass('active', index === trackId);
    });
    return false;
  });

  var scrub = function scrub(node, xPos) {
    var $scrubber = $(node).closest('.sc-time-span'),
        $buffer = $scrubber.find('.sc-buffer'),
        $available = $scrubber.find('.sc-waveform-container img'),
        $player = $scrubber.closest('.sc-player'),
        relative = Math.min($buffer.width(), xPos - $available.offset().left) / $available.width();
    onSeek($player, relative);
  };

  var onTouchMove = function onTouchMove(ev) {
    if (ev.targetTouches.length === 1) {
      scrub(ev.target, ev.targetTouches && ev.targetTouches.length && ev.targetTouches[0].clientX);
      ev.preventDefault();
    }
  };

  // seeking in the loaded track buffer
  $(document).on('click', '.sc-time-span', function (event) {
    scrub(this, event.pageX);
    return false;
  }).on('touchstart', '.sc-time-span', function (event) {
    this.addEventListener('touchmove', onTouchMove, false);
    event.originalEvent.preventDefault();
  }).on('touchend', '.sc-time-span', function (event) {
    this.removeEventListener('touchmove', onTouchMove, false);
    event.originalEvent.preventDefault();
  });

  // changing volume in the player
  var startVolumeTracking = function startVolumeTracking(node, startEvent) {
    var $node = $(node),
        originX = $node.offset().left,
        originWidth = $node.width(),
        getVolume = function getVolume(x) {
      return Math.floor((x - originX) / originWidth * 100);
    },
        update = function update(event) {
      $doc.trigger({ type: 'scPlayer:onVolumeChange', volume: getVolume(event.pageX) });
    };
    $node.bind('mousemove.sc-player', update);
    update(startEvent);
  };

  var stopVolumeTracking = function stopVolumeTracking(node, event) {
    $(node).unbind('mousemove.sc-player');
  };

  $(document).on('mousedown', '.sc-volume-slider', function (event) {
    startVolumeTracking(this, event);
  }).on('mouseup', '.sc-volume-slider', function (event) {
    stopVolumeTracking(this, event);
  });

  $doc.bind('scPlayer:onVolumeChange', function (event) {
    $('span.sc-volume-status').css({ width: event.volume + '%' });
  });
  // -------------------------------------------------------------------

  // the default Auto-Initialization
  $(function () {
    if ($.isFunction($.scPlayer.defaults.onDomReady)) {
      $.scPlayer.defaults.onDomReady();
    }
  });
})(jQuery);

/***/ }),

/***/ "./resources/scripts/libs/soundcloud.player.api.js":
/***/ (function(module, exports) {

/*
*   JavaScript interface for the SoundCloud Player widget
*   Author: Matas Petrikas, matas@soundcloud.com
*   Copyright (c) 2009  SoundCloud Ltd.
*   Licensed under the MIT license:
*   http://www.opensource.org/licenses/mit-license.php
*/
(function () {
  var isIE = /msie/i.test(navigator.userAgent) && !/opera/i.test(navigator.userAgent);

  var soundcloud = window.soundcloud = {
    version: "0.1",
    debug: false,
    _listeners: [],
    // re-dispatches widget events in the DOM, using JS library support, the events also should bubble up the DOM
    _redispatch: function _redispatch(eventType, flashId, data) {
      var playerNode,
          lsnrs = this._listeners[eventType] || [],

      // construct the custom eventType  e.g. 'soundcloud:onPlayerReady'
      customEventType = 'soundcloud:' + eventType;

      try {
        // find the flash player, might throw an exception
        playerNode = this.getPlayer(flashId);
      } catch (e) {
        if (this.debug && window.console) {
          console.error('unable to dispatch widget event ' + eventType + ' for the widget id ' + flashId, data, e);
        }
        return;
      }
      // re-dispatch SoundCloud events up in the DOM
      if (window.jQuery) {
        // if jQuery is available, trigger the custom event
        jQuery(playerNode).trigger(customEventType, [data]);
      } else if (window.Prototype) {
        // if Prototype.js is available, fire the custom event
        $(playerNode).fire(customEventType, data);
      } else {}
      // TODO add more JS libraries that support custom DOM events

      // if there are any listeners registered to this event, trigger them all
      for (var i = 0, l = lsnrs.length; i < l; i += 1) {
        lsnrs[i].apply(playerNode, [playerNode, data]);
      }
      // log the events in debug mode
      if (this.debug && window.console) {
        console.log(customEventType, eventType, flashId, data);
      }
    },
    // you can add multiple listeners to a certain event
    // e.g. soundcloud.addEventListener('onPlayerReady', myFunctionOne);
    //      soundcloud.addEventListener('onPlayerReady', myFunctionTwo);
    addEventListener: function addEventListener(eventType, callback) {
      if (!this._listeners[eventType]) {
        this._listeners[eventType] = [];
      }
      this._listeners[eventType].push(callback);
    },
    // you can also remove the function listener if e.g you want to trigger it only once
    // soundcloud.removeEventListener('onMediaPlay', myFunctionOne);
    removeEventListener: function removeEventListener(eventType, callback) {
      var lsnrs = this._listeners[eventType] || [];
      for (var i = 0, l = lsnrs.length; i < l; i += 1) {
        if (lsnrs[i] === callback) {
          lsnrs.splice(i, 1);
        }
      }
    },
    // get widget node based on its id (if object tag) or name (if embed tag)
    // if you're using SWFObject or other dynamic Flash generators, please make sure that you set the id parameter
    //  only if the DOM has an id/name it's possible to call player's methods.
    // Important!: because of the bug in Opera browser, the Flash can't get its own id
    // so the generator should set it additionally through flashvars parameter 'object_id'
    getPlayer: function getPlayer(id) {
      var flash;
      try {
        if (!id) {
          throw "The SoundCloud Widget DOM object needs an id atribute, please refer to SoundCloud Widget API documentation.";
        }
        flash = isIE ? window[id] : document[id];
        if (flash) {
          if (flash.api_getFlashId) {
            return flash;
          } else {
            throw "The SoundCloud Widget External Interface is not accessible. Check that allowscriptaccess is set to 'always' in embed code";
          }
        } else {
          throw "The SoundCloud Widget with an id " + id + " couldn't be found";
        }
      } catch (e) {
        if (console && console.error) {
          console.error(e);
        }
        throw e;
      }
    },
    // fired when widget has loaded its data and is ready to accept calls from outside
    // the widget will call these functions only if in it's flashvars there's a parameter enable_api=true
    // @flashId: the widget id, basically the Flash node should be accessible to JS with soundcloud.getPlayer(flashId)
    // @data: an object containing .mediaUri (eg. 'http://api.soundcloud.com/tracks/49931') .mediaId (e.g. '4532')
    // in buffering events data contains also .percent = (e.g. '99')
    onPlayerReady: function onPlayerReady(flashId, data) {
      this._redispatch('onPlayerReady', flashId, data);
    },
    // fired when widget starts playing current track (fired only once per track)
    onMediaStart: function onMediaStart(flashId, data) {
      this._redispatch('onMediaStart', flashId, data);
    },
    // fired when the track/playlist has finished playing
    onMediaEnd: function onMediaEnd(flashId, data) {
      this._redispatch('onMediaEnd', flashId, data);
    },
    // fired when widget starts playing current track (fired on every play, seek)
    onMediaPlay: function onMediaPlay(flashId, data) {
      this._redispatch('onMediaPlay', flashId, data);
    },
    // fired when track was paused
    onMediaPause: function onMediaPause(flashId, data) {
      this._redispatch('onMediaPause', flashId, data);
    },
    // fired when the widget is still buffering, means you can't seek in the track fully yet
    onMediaBuffering: function onMediaBuffering(flashId, data) {
      this._redispatch('onMediaBuffering', flashId, data);
    },
    // fired when the user seeks in the track
    onMediaSeek: function onMediaSeek(flashId, data) {
      this._redispatch('onMediaSeek', flashId, data);
    },
    // fired when the widget is done buffering and the whole track length is seekable
    onMediaDoneBuffering: function onMediaDoneBuffering(flashId, data) {
      this._redispatch('onMediaDoneBuffering', flashId, data);
    },
    // fired when the widget can't get the requested data from the server (the resource is removed, hidden, etc.)
    onPlayerError: function onPlayerError(flashId, data) {
      this._redispatch('onPlayerError', flashId, data);
    }
  };
})();

/***/ }),

/***/ "./resources/scripts/main.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_fastclick__ = __webpack_require__("./node_modules/fastclick/lib/fastclick.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_fastclick___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_fastclick__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_domready__ = __webpack_require__("./node_modules/domready/ready.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_domready___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_domready__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_ee__ = __webpack_require__("./resources/scripts/components/ee.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_about__ = __webpack_require__("./resources/scripts/components/about.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_accordion_nav__ = __webpack_require__("./resources/scripts/components/accordion-nav.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_carousels__ = __webpack_require__("./resources/scripts/components/carousels.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_preloader__ = __webpack_require__("./resources/scripts/components/preloader.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_bg_music__ = __webpack_require__("./resources/scripts/components/bg-music.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_mixcloud_player__ = __webpack_require__("./resources/scripts/components/mixcloud-player.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__libs_soundcloud_player_api__ = __webpack_require__("./resources/scripts/libs/soundcloud.player.api.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__libs_soundcloud_player_api___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__libs_soundcloud_player_api__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__libs_sc_player__ = __webpack_require__("./resources/scripts/libs/sc-player.js");









// import './components/smooth-scrollbar';






__WEBPACK_IMPORTED_MODULE_0_fastclick___default.a.attach(document.body);

__WEBPACK_IMPORTED_MODULE_1_domready___default.a(function () {
  __WEBPACK_IMPORTED_MODULE_2__components_ee__["a" /* default */].emit('init');
});

/***/ }),

/***/ "./resources/styles/main.scss":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./resources/scripts/main.js");
module.exports = __webpack_require__("./resources/styles/main.scss");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMzYwMDAzMTIzN2ZiYzQ2ZjIwZjIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbXJlYWR5L3JlYWR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zhc3RjbGljay9saWIvZmFzdGNsaWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbWFnZXNsb2FkZWQvaW1hZ2VzbG9hZGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd29sZnk4Ny1ldmVudGVtaXR0ZXIvRXZlbnRFbWl0dGVyLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zY3JpcHRzL2NvbXBvbmVudHMvYWJvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NjcmlwdHMvY29tcG9uZW50cy9hY2NvcmRpb24tbmF2LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zY3JpcHRzL2NvbXBvbmVudHMvYmctbXVzaWMuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NjcmlwdHMvY29tcG9uZW50cy9jYXJvdXNlbHMuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NjcmlwdHMvY29tcG9uZW50cy9lZS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2NyaXB0cy9jb21wb25lbnRzL21peGNsb3VkLXBsYXllci5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2NyaXB0cy9jb21wb25lbnRzL3ByZWxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2NyaXB0cy9saWJzL2pxdWVyeS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NjcmlwdHMvbGlicy9zYy1wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NjcmlwdHMvbGlicy9zb3VuZGNsb3VkLnBsYXllci5hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NjcmlwdHMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3R5bGVzL21haW4uc2Nzcz9mMzBjIl0sIm5hbWVzIjpbIiRhYm91dENvcHlPcGVuZXIiLCIkIiwiJGFib3V0Qm9keSIsIm9wZW5Nb3JlQ29weSIsImFib3V0SGVpZ2h0IiwiaGVpZ2h0IiwiYWRkQ2xhc3MiLCJhZGRSZWFkTW9yZSIsInNldEhlaWdodCIsImhhc0NsYXNzIiwiaW5pdCIsImNsaWNrIiwid2luZG93IiwicmVzaXplIiwib24iLCJlZSIsImFkZExpc3RlbmVyIiwiZWFjaCIsImkiLCJlbCIsImFjdGl2ZUNhcm91c2VsSGVpZ2h0IiwiZmluZCIsIm9wZW5OYXYiLCIkc2VsZWN0ZWRJdGVtIiwiY2xvc2VzdCIsInJlbW92ZUNsYXNzIiwiY3NzIiwiZHJhdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRvY3VtZW50Iiwib2ZmIiwiJGJvZHkiLCJtdXRlZEJnTXVzaWMiLCJpc011dGVkIiwiYmdNdXRlIiwiYW5pbWF0ZSIsInZvbHVtZSIsImJnUGxheSIsInRvZ2dsZUJnTXVzaWMiLCJhZGRIYW5kbGVycyIsImRlc3Ryb3kiLCIkY2Fyb3VzZWxzIiwiY2Fyb3VzZWxzSW5pdCIsInNsaWNrIiwiZG90cyIsImZhZGUiLCJzbGlkZXNUb1Nob3ciLCJzbGlkZSIsImRyYWdnYWJsZSIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJ3aWRnZXQiLCJNaXhjbG91ZCIsIlBsYXllcldpZGdldCIsImdldEVsZW1lbnRCeUlkIiwicmVhZHkiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsInBsYXkiLCJpc0xvYWRlZCIsImhpZGVQcmVsb2FkZXIiLCJpbWFnZXNMb2FkZWQiLCJzZXRUaW1lb3V0IiwiZSIsInQiLCJuIiwibGVuZ3RoIiwic3QiLCJ0eXBlIiwiaXNXaW5kb3ciLCJub2RlVHlwZSIsInIiLCJUdCIsIm1hdGNoIiwibHQiLCJhY2NlcHREYXRhIiwibyIsImEiLCJzIiwiZXhwYW5kbyIsInUiLCJsIiwiYyIsImNhY2hlIiwiZiIsImRhdGEiLCJLIiwicG9wIiwiZ3VpZCIsInRvSlNPTiIsIm5vb3AiLCJleHRlbmQiLCJjYW1lbENhc2UiLCJpc0FycmF5IiwiY29uY2F0IiwibWFwIiwic3BsaXQiLCJpc0VtcHR5T2JqZWN0IiwiY2xlYW5EYXRhIiwic3VwcG9ydCIsImRlbGV0ZUV4cGFuZG8iLCJyZXBsYWNlIiwiTnQiLCJ0b0xvd2VyQ2FzZSIsImdldEF0dHJpYnV0ZSIsInd0IiwidGVzdCIsInBhcnNlSlNPTiIsImlzRnVuY3Rpb24iLCJncmVwIiwiY2FsbCIsIld0IiwiZmlsdGVyIiwiaW5BcnJheSIsInAiLCJ6dCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVFbGVtZW50IiwiZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJvd25lckRvY3VtZW50IiwiaCIsImdldEF0dHJpYnV0ZU5vZGUiLCJzcGVjaWZpZWQiLCJnIiwibm4iLCJleGVjIiwicmVtb3ZlQXR0cmlidXRlIiwibSIsIl9kYXRhIiwieSIsImhhc0RhdGEiLCJldmVudHMiLCJoYW5kbGUiLCJldmVudCIsImFkZCIsInYiLCJub2RlTmFtZSIsIm5vQ2xvbmVFdmVudCIsInJlbW92ZUV2ZW50IiwidGV4dCIsInBhcmVudE5vZGUiLCJvdXRlckhUTUwiLCJodG1sNUNsb25lIiwiaW5uZXJIVE1MIiwidHJpbSIsIlp0IiwiZGVmYXVsdENoZWNrZWQiLCJjaGVja2VkIiwidmFsdWUiLCJkZWZhdWx0U2VsZWN0ZWQiLCJzZWxlY3RlZCIsImRlZmF1bHRWYWx1ZSIsImIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2hpbGROb2RlcyIsInB1c2giLCJtZXJnZSIsIngiLCJUIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIk5uIiwidyIsImNvbnRhaW5zIiwiTiIsInN0eWxlIiwiZGlzcGxheSIsIlMiLCJDIiwibW4iLCJNYXRoIiwibWF4IiwiayIsInduIiwiRSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwibG4iLCJib3hTaXppbmciLCJ1biIsInluIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0IiwiViIsImJuIiwiQSIsImNuIiwiYXBwZW5kVG8iLCJkb2N1bWVudEVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiY29udGVudERvY3VtZW50Iiwid3JpdGUiLCJjbG9zZSIsImRldGFjaCIsImJvZHkiLCJyZW1vdmUiLCJqIiwia24iLCJEIiwidW5zaGlmdCIsIkwiLCJkYXRhVHlwZXMiLCIkbiIsIkgiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsIk0iLCJjb250ZW50cyIsInJlc3BvbnNlRmllbGRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsInEiLCJkYXRhRmlsdGVyIiwiZGF0YVR5cGUiLCJzcGxpY2UiLCJzdGF0ZSIsImVycm9yIiwiXyIsIlhNTEh0dHBSZXF1ZXN0IiwiRiIsIkFjdGl2ZVhPYmplY3QiLCJPIiwiUW4iLCJub3ciLCJCIiwicnIiLCJQIiwibnIiLCJEZWZlcnJlZCIsImFsd2F5cyIsImVsZW0iLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb21pc2UiLCJwcm9wcyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiY3JlYXRlVHdlZW4iLCJUd2VlbiIsImVhc2luZyIsInN0b3AiLCJyZWplY3RXaXRoIiwiUiIsInN0YXJ0IiwiZngiLCJ0aW1lciIsImFuaW0iLCJxdWV1ZSIsInByb2dyZXNzIiwiZG9uZSIsImNvbXBsZXRlIiwiZmFpbCIsImNzc0hvb2tzIiwiZXhwYW5kIiwiVyIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImlubGluZUJsb2NrTmVlZHNMYXlvdXQiLCJ6b29tIiwic2hyaW5rV3JhcEJsb2NrcyIsIlpuIiwiaGlkZGVuIiwic2hvdyIsImhpZGUiLCJfcmVtb3ZlRGF0YSIsImVuZCIsInByb3RvdHlwZSIsIkkiLCJvcGFjaXR5Iiwid2lkdGgiLCJ6IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJYIiwiVSIsIlkiLCJsb2NhdGlvbiIsIkoiLCJqUXVlcnkiLCJHIiwiUSIsIloiLCJldCIsInR0IiwibnQiLCJydCIsImluZGV4T2YiLCJpdCIsInRvU3RyaW5nIiwib3QiLCJoYXNPd25Qcm9wZXJ0eSIsImF0IiwiZm4iLCJ1dCIsInNvdXJjZSIsImN0IiwiZnQiLCJwdCIsImR0IiwiaHQiLCJndCIsIm10IiwieXQiLCJ2dCIsImJ0IiwieHQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5U3RhdGUiLCJkZXRhY2hFdmVudCIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwicGFyc2VIVE1MIiwiaXNQbGFpbk9iamVjdCIsImF0dHIiLCJpZCIsImNvbnRleHQiLCJzZWxlY3RvciIsIm1ha2VBcnJheSIsInNpemUiLCJ0b0FycmF5IiwiZ2V0IiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJzb3J0Iiwibm9Db25mbGljdCIsImlzUmVhZHkiLCJyZWFkeVdhaXQiLCJob2xkUmVhZHkiLCJ0cmlnZ2VyIiwiQXJyYXkiLCJpc051bWVyaWMiLCJpc05hTiIsImlzRmluaXRlIiwiRXJyb3IiLCJidWlsZEZyYWdtZW50IiwiSlNPTiIsInBhcnNlIiwiRnVuY3Rpb24iLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImFzeW5jIiwibG9hZFhNTCIsImdsb2JhbEV2YWwiLCJleGVjU2NyaXB0IiwiZXZhbCIsIk9iamVjdCIsInByb3h5IiwiYWNjZXNzIiwiRGF0ZSIsImdldFRpbWUiLCJhdHRhY2hFdmVudCIsImZyYW1lRWxlbWVudCIsImRvU2Nyb2xsIiwiQ2FsbGJhY2tzIiwib25jZSIsIm1lbW9yeSIsInN0b3BPbkZhbHNlIiwiZGlzYWJsZSIsInVuaXF1ZSIsImhhcyIsImRpc2FibGVkIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwiZmlyZWQiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm90aWZ5IiwicGlwZSIsIndoZW4iLCJzZXRBdHRyaWJ1dGUiLCJjc3NUZXh0IiwiZ2V0U2V0QXR0cmlidXRlIiwiY2xhc3NOYW1lIiwibGVhZGluZ1doaXRlc3BhY2UiLCJmaXJzdENoaWxkIiwidGJvZHkiLCJodG1sU2VyaWFsaXplIiwiaHJlZk5vcm1hbGl6ZWQiLCJjc3NGbG9hdCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsImVuY3R5cGUiLCJjbG9uZU5vZGUiLCJib3hNb2RlbCIsImNvbXBhdE1vZGUiLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwicGl4ZWxQb3NpdGlvbiIsIm5vQ2xvbmVDaGVja2VkIiwib3B0RGlzYWJsZWQiLCJpbnB1dCIsInJhZGlvVmFsdWUiLCJhcHBlbmRDaGVja2VkIiwiY2hlY2tDbG9uZSIsImxhc3RDaGlsZCIsInN1Ym1pdCIsImNoYW5nZSIsImZvY3VzaW4iLCJhdHRyaWJ1dGVzIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJyZWxpYWJsZUhpZGRlbk9mZnNldHMiLCJkb2VzTm90SW5jbHVkZU1hcmdpbkluQm9keU9mZnNldCIsIm9mZnNldFRvcCIsImdldENvbXB1dGVkU3R5bGUiLCJ0b3AiLCJtYXJnaW5SaWdodCIsInJlbW92ZUNoaWxkIiwicmFuZG9tIiwibm9EYXRhIiwiZW1iZWQiLCJvYmplY3QiLCJhcHBsZXQiLCJyZW1vdmVEYXRhIiwibmFtZSIsInN1YnN0cmluZyIsImRlcXVldWUiLCJjdXIiLCJkZWxheSIsInNwZWVkcyIsImNsZWFyVGltZW91dCIsImNsZWFyUXVldWUiLCJDdCIsImt0IiwiRXQiLCJTdCIsIkF0IiwianQiLCJEdCIsIkx0IiwiSHQiLCJNdCIsInJlbW92ZUF0dHIiLCJwcm9wIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0b2dnbGVDbGFzcyIsInZhbCIsInZhbEhvb2tzIiwic2V0Iiwib3B0aW9uIiwic2VsZWN0Iiwib3B0aW9ucyIsInNlbGVjdGVkSW5kZXgiLCJpc1hNTERvYyIsImF0dHJIb29rcyIsInRhYmluZGV4IiwicmVhZG9ubHkiLCJtYXhsZW5ndGgiLCJjZWxsc3BhY2luZyIsImNlbGxwYWRkaW5nIiwicm93c3BhbiIsImNvbHNwYW4iLCJ1c2VtYXAiLCJmcmFtZWJvcmRlciIsImNvbnRlbnRlZGl0YWJsZSIsInByb3BIb29rcyIsInRhYkluZGV4IiwicGFyc2VJbnQiLCJocmVmIiwiYnV0dG9uIiwic2V0QXR0cmlidXRlTm9kZSIsImNyZWF0ZUF0dHJpYnV0ZSIsInF0IiwiX3QiLCJGdCIsIk90IiwiQnQiLCJnbG9iYWwiLCJoYW5kbGVyIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsIm5lZWRzQ29udGV4dCIsImV4cHIiLCJuYW1lc3BhY2UiLCJqb2luIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwiUmVnRXhwIiwidGVhcmRvd24iLCJFdmVudCIsImlzVHJpZ2dlciIsIm5hbWVzcGFjZV9yZSIsInJlc3VsdCIsInRhcmdldCIsIm5vQnViYmxlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIl9kZWZhdWx0IiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImhhbmRsZXJzIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiaGFuZGxlT2JqIiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwiaW5kZXgiLCJmaXhIb29rcyIsInNyY0VsZW1lbnQiLCJtZXRhS2V5Iiwia2V5SG9va3MiLCJ3aGljaCIsImNoYXJDb2RlIiwia2V5Q29kZSIsIm1vdXNlSG9va3MiLCJmcm9tRWxlbWVudCIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwicmVsYXRlZFRhcmdldCIsInRvRWxlbWVudCIsImxvYWQiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwiYmVmb3JldW5sb2FkIiwib3JpZ2luYWxFdmVudCIsInJldHVyblZhbHVlIiwic2ltdWxhdGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJnZXRQcmV2ZW50RGVmYXVsdCIsInRpbWVTdGFtcCIsImNhbmNlbEJ1YmJsZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwic3VibWl0QnViYmxlcyIsImZvcm0iLCJfc3VibWl0X2J1YmJsZSIsImNoYW5nZUJ1YmJsZXMiLCJwcm9wZXJ0eU5hbWUiLCJfanVzdF9jaGFuZ2VkIiwiZm9jdXNpbkJ1YmJsZXMiLCJvbmUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJob3ZlciIsImNhY2hlTGVuZ3RoIiwiZ2V0QnlDbGFzc05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwibmV4dFNpYmxpbmciLCJwcmVGaWx0ZXIiLCJtYXRjaGVzIiwiZGlyIiwicmVsYXRpdmUiLCJUQUciLCJ1bmlxdWVTb3J0IiwiSUQiLCJDTEFTUyIsIk5BTUUiLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJpc1hNTCIsInNldERvY3VtZW50IiwidGFnTmFtZU5vQ29tbWVudHMiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlOYW1lIiwiaW5zZXJ0QmVmb3JlIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJnZXRJZE5vdE5hbWUiLCJhdHRySGFuZGxlIiwibWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInNvdXJjZUluZGV4IiwiZGV0ZWN0RHVwbGljYXRlcyIsImdldFRleHQiLCJ0ZXh0Q29udGVudCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInN1YnN0ciIsInBzZXVkb3MiLCJzZXRGaWx0ZXJzIiwibm90IiwiaW5uZXJUZXh0IiwibGFuZyIsImhhc2giLCJyb290IiwiaGFzRm9jdXMiLCJlbmFibGVkIiwicGFyZW50IiwiaGVhZGVyIiwiZXZlbiIsIm9kZCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInJlc2V0IiwiY29tcGlsZSIsIm50aCIsImZpbHRlcnMiLCJQdCIsIlJ0IiwiJHQiLCJJdCIsImNoaWxkcmVuIiwibmV4dCIsInByZXYiLCJpcyIsInByZXZBbGwiLCJhZGRCYWNrIiwiYW5kU2VsZiIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJzaWJsaW5nIiwicmV2ZXJzZSIsIlh0IiwiVXQiLCJWdCIsIll0IiwiSnQiLCJHdCIsIlF0IiwiS3QiLCJlbiIsInRuIiwicm4iLCJsZWdlbmQiLCJhcmVhIiwicGFyYW0iLCJ0aGVhZCIsInRyIiwiY29sIiwidGQiLCJhbiIsInNuIiwib3B0Z3JvdXAiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiYXBwZW5kIiwiY3JlYXRlVGV4dE5vZGUiLCJ3cmFwQWxsIiwiY2xvbmUiLCJ3cmFwSW5uZXIiLCJ3cmFwIiwidW53cmFwIiwicmVwbGFjZVdpdGgiLCJkb21NYW5pcCIsInByZXBlbmQiLCJiZWZvcmUiLCJhZnRlciIsImh0bWwiLCJzcmMiLCJhamF4IiwidXJsIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwicG4iLCJkbiIsImhuIiwiZ24iLCJ2biIsIkJPRFkiLCJ4biIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsIlRuIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJ0b2dnbGUiLCJjc3NOdW1iZXIiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwibGluZUhlaWdodCIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJjc3NQcm9wcyIsInN3YXAiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImN1cnJlbnRTdHlsZSIsImxlZnQiLCJydW50aW1lU3R5bGUiLCJwaXhlbExlZnQiLCIkMSIsInZpc2libGUiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwiQ24iLCJFbiIsIlNuIiwiQW4iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRyYWRpdGlvbmFsIiwiam4iLCJEbiIsIkxuIiwiSG4iLCJNbiIsInFuIiwiX24iLCJGbiIsIk9uIiwiQm4iLCJQbiIsIlJuIiwiV24iLCJJbiIsInpuIiwicmVzcG9uc2VUZXh0Iiwic3VjY2VzcyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJ4bWwiLCJqc29uIiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJpZk1vZGlmaWVkIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInN0YXR1c0NvZGUiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsImFib3J0IiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJoYXNDb250ZW50IiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJ0aW1lb3V0Iiwic2VuZCIsImdldFNjcmlwdCIsImdldEpTT04iLCJzY3JpcHQiLCJoZWFkIiwic2NyaXB0Q2hhcnNldCIsImNoYXJzZXQiLCJvbmxvYWQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJYbiIsIlVuIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwiVm4iLCJZbiIsIkpuIiwiR24iLCJ4aHIiLCJjb3JzIiwidXNlcm5hbWUiLCJvcGVuIiwieGhyRmllbGRzIiwicmVzcG9uc2VYTUwiLCJ1bmxvYWQiLCJLbiIsImVyIiwidW5pdCIsIkFuaW1hdGlvbiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJwb3MiLCJzdGVwIiwiZmFkZVRvIiwic3BlZWQiLCJmaW5pc2giLCJ0aW1lcnMiLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsIm9sZCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJ0aWNrIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsInVzaW5nIiwib2Zmc2V0UGFyZW50Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImNvbnRlbnQiLCJ0aW1lY29kZSIsIm1zIiwiaG1zIiwiZmxvb3IiLCJ0YyIsInNodWZmbGUiLCJhcnIiLCJkZWJ1ZyIsInVzZVNhbmRCb3giLCIkZG9jIiwiYXJncyIsImRvbWFpbiIsInNlY3VyZURvY3VtZW50IiwicHJvdG9jb2wiLCJzY0FwaVVybCIsImFwaUtleSIsInJlc29sdmVyIiwicGFyYW1zIiwiYXVkaW9FbmdpbmUiLCJodG1sNUF1ZGlvQXZhaWxhYmxlIiwiQXVkaW8iLCJjYW5QbGF5VHlwZSIsImNhbGxiYWNrcyIsIm9uUmVhZHkiLCJvblBsYXkiLCJvblBhdXNlIiwib25FbmQiLCJvbkJ1ZmZlciIsInBlcmNlbnQiLCJodG1sNURyaXZlciIsInBsYXllciIsIm9uVGltZVVwZGF0ZSIsIm9iaiIsImJ1ZmZlciIsImJ1ZmZlcmVkIiwiY3VycmVudFRpbWUiLCJvblByb2dyZXNzIiwidHJhY2siLCJwYXVzZSIsInN0cmVhbV91cmwiLCJzZWVrIiwiZ2V0RHVyYXRpb24iLCJnZXRQb3NpdGlvbiIsInNldFZvbHVtZSIsImZsYXNoRHJpdmVyIiwiZW5naW5lSWQiLCJmbGFzaEh0bWwiLCJzd2YiLCJicm93c2VyIiwibXNpZSIsInNvdW5kY2xvdWQiLCJmbGFzaElkIiwiZ2V0UGxheWVyIiwidXJpIiwiYXBpX2xvYWQiLCJhcGlfcGxheSIsImFwaV9wYXVzZSIsImFwaV9zdG9wIiwiYXBpX3NlZWtUbyIsImFwaV9nZXRUcmFja0R1cmF0aW9uIiwiYXBpX2dldFRyYWNrUG9zaXRpb24iLCJhcGlfc2V0Vm9sdW1lIiwiZGlkQXV0b1BsYXkiLCJwbGF5ZXJzIiwidXBkYXRlcyIsImN1cnJlbnRVcmwiLCJsb2FkVHJhY2tzRGF0YSIsIiRwbGF5ZXIiLCJsaW5rcyIsImtleSIsInBsYXllck9iaiIsIm5vZGUiLCJ0cmFja3MiLCJsb2FkVXJsIiwibGluayIsImFwaVVybCIsInBlcm1hbGlua191cmwiLCJjcmVhdG9yIiwiYXJ0d29ya0ltYWdlIiwidXNlUGxhY2Vob2xkZXIiLCJhcnR3b3JrX3VybCIsInVwZGF0ZVRyYWNrSW5mbyIsInRpdGxlIiwidXNlciIsImRlc2NyaXB0aW9uIiwiJGl0ZW0iLCJpdGVtVHJhY2siLCJ3YXZlZm9ybV91cmwiLCJnZXRQbGF5ZXJEYXRhIiwidXBkYXRlUGxheVN0YXR1cyIsIiRidWZmZXIiLCIkcGxheWVkIiwib25GaW5pc2giLCIkbmV4dEl0ZW0iLCJvblNlZWsiLCJvblNraXAiLCJzb3VuZFZvbHVtZSIsInZvbCIsImNvb2tzIiwiY29va2llIiwidm9sUngiLCJvblZvbHVtZSIsImRhdGUiLCJzZXRUaW1lIiwidG9VVENTdHJpbmciLCJwb3NpdGlvblBvbGwiLCJzY1BsYXllciIsImRlZmF1bHRzIiwicGxheWVySWQiLCIkc291cmNlIiwic291cmNlQ2xhc3NlcyIsIiRhcnR3b3JrcyIsIiRpbmZvIiwiJGNvbnRyb2xzIiwiJGxpc3QiLCJjdXN0b21DbGFzcyIsInJhbmRvbWl6ZSIsImxvYWRBcnR3b3JrcyIsImJlZm9yZVJlbmRlciIsImNvbnRpbnVlUGxheWJhY2siLCJhdXRvUGxheSIsInN0b3BBbGwiLCJ0cmFja3NEYXRhIiwib25Eb21SZWFkeSIsIiRsaW5rIiwiJHRyYWNrIiwidHJhY2tJZCIsInNjcnViIiwieFBvcyIsIiRzY3J1YmJlciIsIiRhdmFpbGFibGUiLCJtaW4iLCJvblRvdWNoTW92ZSIsImV2IiwidGFyZ2V0VG91Y2hlcyIsInN0YXJ0Vm9sdW1lVHJhY2tpbmciLCJzdGFydEV2ZW50IiwiJG5vZGUiLCJvcmlnaW5YIiwib3JpZ2luV2lkdGgiLCJnZXRWb2x1bWUiLCJ1cGRhdGUiLCJzdG9wVm9sdW1lVHJhY2tpbmciLCJpc0lFIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidmVyc2lvbiIsIl9saXN0ZW5lcnMiLCJfcmVkaXNwYXRjaCIsImV2ZW50VHlwZSIsInBsYXllck5vZGUiLCJsc25ycyIsImN1c3RvbUV2ZW50VHlwZSIsIlByb3RvdHlwZSIsImNhbGxiYWNrIiwiZmxhc2giLCJhcGlfZ2V0Rmxhc2hJZCIsIm9uUGxheWVyUmVhZHkiLCJvbk1lZGlhU3RhcnQiLCJvbk1lZGlhRW5kIiwib25NZWRpYVBsYXkiLCJvbk1lZGlhUGF1c2UiLCJvbk1lZGlhQnVmZmVyaW5nIiwib25NZWRpYVNlZWsiLCJvbk1lZGlhRG9uZUJ1ZmZlcmluZyIsIm9uUGxheWVyRXJyb3IiLCJGYXN0Q2xpY2siLCJhdHRhY2giLCJkb21yZWFkeSIsImVtaXQiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBLENBQUM7Ozs7Ozs7O0FDN0JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQzs7Ozs7Ozs7QUNsSEQsbUNBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixZQUFZLE9BQU8sWUFBWTtBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQix5Q0FBeUM7QUFDL0Q7OztBQUdBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNB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bEIsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQixjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksT0FBTyxZQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQUE7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7QUN4MEJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCO0FBQy9COztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFBQTtBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDOztBQUVEOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxXQUFXLG1CQUFtQjtBQUM5QixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7O0FBRTNCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0JBQXNCO0FBQ3RDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUM7Ozs7Ozs7O0FDalhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7Ozs7QUFJQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLFlBQVk7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRixvQkFBb0I7O0FBRXBCO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUYsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsU0FBUztBQUNsQjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVMsWUFBWTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNB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O0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsYUFBYSx1QkFBdUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtB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QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxVQUFVO0FBQzNFLHNDQUFzQywyQkFBMkI7QUFDakU7QUFDQSxnQ0FBZ0MsTUFBTTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLFVBQVUsVUFBVTtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxVQUFVLGNBQWM7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxZQUFZLHVFQUF1RTtBQUNuRjtBQUNBO0FBQ0EsWUFBWSw0QkFBNEI7QUFDeEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxTQUFTO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsMkRBQTJEOztBQUUzRDtBQUNBO0FBQ0Esb0ZBQW9GOztBQUVwRjtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGlEQUFpRDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRCxVQUFVLHdDQUF3QztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBLENBQUM7Ozs7QUFJRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQSxRQUFRLEdBQUc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7OztBQUlBOztBQUVBOztBQUVBO0FBQ0E7Ozs7QUFJQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBOztBQUVBLGNBQWMsU0FBUztBQUN2QjtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsT0FBTztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxPQUFPO0FBQ2pCLDBCQUEwQix3QkFBd0I7O0FBRWxEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsY0FBYztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdDQUF3QyxzQ0FBc0M7QUFDOUUsb0NBQW9DLHVDQUF1QztBQUMzRSxvQ0FBb0Msc0NBQXNDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsT0FBTztBQUNQO0FBQ0EsTUFBTTtBQUNOLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXOztBQUVYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7O0FBRVY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEMscUNBQXFDO0FBQ3JDLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7OztBQUtBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsU0FBUztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixhQUFhO0FBQ3BDLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLFNBQVM7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7OztBQUdBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsZ0JBQWdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsRUFBRTtBQUNGOztBQUVBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLE9BQU87QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0Esc0JBQXNCOztBQUV0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxPQUFPO0FBQ2Y7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsZ0JBQWdCO0FBQ2xCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXOztBQUVYOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDs7QUFFQTtBQUNBOztBQUVBLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwrREFBK0Q7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLGNBQWM7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsdUNBQXVDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1REFBdUQ7QUFDOUU7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxjQUFjO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQyxPQUFPO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEJBQThCOztBQUU5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxV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QUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxVQUFVLFNBQVMsTUFBTSxhQUFhO0FBQzNFLGFBQWEsZUFBZTtBQUM1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLENBQUM7OztBQUdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQStEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBLFFBQVEsT0FBTzs7QUFFZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7O0FBRUEsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0EsUUFBUSxPQUFPO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdCQUFnQjtBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGlEQUFpRCwwQkFBMEI7QUFDM0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7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O0FBQzNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDO0FBQ0E7O0FBRUEsSUFBSTtBQUNKOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDs7O0FBR0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLEtBQUs7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscUNBQXFDOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLEtBQUs7QUFDTDs7QUFFQSxXQUFXO0FBQ1gsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBLHNCQUFzQjtBQUN0QiwyQkFBMkI7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUEsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyx5QkFBeUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIOztBQUVBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxxREFBcUQ7QUFDckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQiw0REFBNEQsZUFBZTtBQUMzRTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQSxjQUFjLHNEQUFzRDtBQUNwRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBLGNBQWMsbUNBQW1DO0FBQ2pELGVBQWUsNkRBQTZEO0FBQzVFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFO0FBQ0YsQ0FBQzs7O0FBR0Q7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUFBO0FBQ0Y7Ozs7O0FBS0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBLENBQUM7Ozs7Ozs7O0FDNWdVRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1DQUFtQzs7QUFFbkM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7O0FBRUEsMEJBQTBCO0FBQzFCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQSxhQUFhOztBQUViLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWIsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTs7QUFFYixTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FB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QUFFQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCOztBQUVyQixpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLFNBQVM7O0FBRVQ7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsaUNBQWlDLDZCQUE2Qjs7QUFFOUQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxpQkFBaUI7QUFDckQsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLDhCQUE4QjtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0Esb0NBQW9DLHVCQUF1QjtBQUMzRDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsYUFBYTs7QUFFYjs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7O0FBR0EsU0FBUzs7QUFFVDs7QUFFQTs7QUFFQSxhQUFhOzs7QUFHYixTQUFTOztBQUVUOztBQUVBOztBQUVBOztBQUVBLGlCQUFpQjs7QUFFakI7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxhQUFhOztBQUViO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBLHNDQUFzQztBQUN0Qyx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixtQkFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOzs7QUFHQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsU0FBUzs7QUFFVDs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQSxhQUFhOztBQUViO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFF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Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMzYwMDAzMTIzN2ZiYzQ2ZjIwZjIiLCIvKiFcbiAgKiBkb21yZWFkeSAoYykgRHVzdGluIERpYXogMjAxNCAtIExpY2Vuc2UgTUlUXG4gICovXG4hZnVuY3Rpb24gKG5hbWUsIGRlZmluaXRpb24pIHtcblxuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnKSBkZWZpbmUoZGVmaW5pdGlvbilcbiAgZWxzZSB0aGlzW25hbWVdID0gZGVmaW5pdGlvbigpXG5cbn0oJ2RvbXJlYWR5JywgZnVuY3Rpb24gKCkge1xuXG4gIHZhciBmbnMgPSBbXSwgbGlzdGVuZXJcbiAgICAsIGRvYyA9IGRvY3VtZW50XG4gICAgLCBoYWNrID0gZG9jLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbFxuICAgICwgZG9tQ29udGVudExvYWRlZCA9ICdET01Db250ZW50TG9hZGVkJ1xuICAgICwgbG9hZGVkID0gKGhhY2sgPyAvXmxvYWRlZHxeYy8gOiAvXmxvYWRlZHxeaXxeYy8pLnRlc3QoZG9jLnJlYWR5U3RhdGUpXG5cblxuICBpZiAoIWxvYWRlZClcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoZG9tQ29udGVudExvYWRlZCwgbGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoZG9tQ29udGVudExvYWRlZCwgbGlzdGVuZXIpXG4gICAgbG9hZGVkID0gMVxuICAgIHdoaWxlIChsaXN0ZW5lciA9IGZucy5zaGlmdCgpKSBsaXN0ZW5lcigpXG4gIH0pXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIGxvYWRlZCA/IHNldFRpbWVvdXQoZm4sIDApIDogZm5zLnB1c2goZm4pXG4gIH1cblxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kb21yZWFkeS9yZWFkeS5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvZG9tcmVhZHkvcmVhZHkuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBFdkVtaXR0ZXIgdjEuMS4wXG4gKiBMaWwnIGV2ZW50IGVtaXR0ZXJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuLyoganNoaW50IHVudXNlZDogdHJ1ZSwgdW5kZWY6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCB3aW5kb3cgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBnbG9iYWwuRXZFbWl0dGVyID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbnZhciBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNldCBldmVudHMgaGFzaFxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XG4gIHZhciBsaXN0ZW5lcnMgPSBldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzWyBldmVudE5hbWUgXSB8fCBbXTtcbiAgLy8gb25seSBhZGQgb25jZVxuICBpZiAoIGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApID09IC0xICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGFkZCBldmVudFxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIC8vIHNldCBvbmNlIGZsYWdcbiAgLy8gc2V0IG9uY2VFdmVudHMgaGFzaFxuICB2YXIgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgb25jZUxpc3RlbmVycyBvYmplY3RcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdIHx8IHt9O1xuICAvLyBzZXQgZmxhZ1xuICBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgYXJncyApIHtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpID0gMDtcbiAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICB2YXIgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgd2hpbGUgKCBsaXN0ZW5lciApIHtcbiAgICB2YXIgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgICAvLyBnZXQgbmV4dCBsaXN0ZW5lclxuICAgIGkgKz0gaXNPbmNlID8gMCA6IDE7XG4gICAgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmFsbE9mZiA9XG5wcm90by5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuX2V2ZW50cztcbiAgZGVsZXRlIHRoaXMuX29uY2VFdmVudHM7XG59O1xuXG5yZXR1cm4gRXZFbWl0dGVyO1xuXG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2V2LWVtaXR0ZXIvZXYtZW1pdHRlci5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI7KGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8qKlxuXHQgKiBAcHJlc2VydmUgRmFzdENsaWNrOiBwb2x5ZmlsbCB0byByZW1vdmUgY2xpY2sgZGVsYXlzIG9uIGJyb3dzZXJzIHdpdGggdG91Y2ggVUlzLlxuXHQgKlxuXHQgKiBAY29kaW5nc3RhbmRhcmQgZnRsYWJzLWpzdjJcblx0ICogQGNvcHlyaWdodCBUaGUgRmluYW5jaWFsIFRpbWVzIExpbWl0ZWQgW0FsbCBSaWdodHMgUmVzZXJ2ZWRdXG5cdCAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChzZWUgTElDRU5TRS50eHQpXG5cdCAqL1xuXG5cdC8qanNsaW50IGJyb3dzZXI6dHJ1ZSwgbm9kZTp0cnVlKi9cblx0LypnbG9iYWwgZGVmaW5lLCBFdmVudCwgTm9kZSovXG5cblxuXHQvKipcblx0ICogSW5zdGFudGlhdGUgZmFzdC1jbGlja2luZyBsaXN0ZW5lcnMgb24gdGhlIHNwZWNpZmllZCBsYXllci5cblx0ICpcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gbGF5ZXIgVGhlIGxheWVyIHRvIGxpc3RlbiBvblxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0c1xuXHQgKi9cblx0ZnVuY3Rpb24gRmFzdENsaWNrKGxheWVyLCBvcHRpb25zKSB7XG5cdFx0dmFyIG9sZE9uQ2xpY2s7XG5cblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgYSBjbGljayBpcyBjdXJyZW50bHkgYmVpbmcgdHJhY2tlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIGJvb2xlYW5cblx0XHQgKi9cblx0XHR0aGlzLnRyYWNraW5nQ2xpY2sgPSBmYWxzZTtcblxuXG5cdFx0LyoqXG5cdFx0ICogVGltZXN0YW1wIGZvciB3aGVuIGNsaWNrIHRyYWNraW5nIHN0YXJ0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSBudW1iZXJcblx0XHQgKi9cblx0XHR0aGlzLnRyYWNraW5nQ2xpY2tTdGFydCA9IDA7XG5cblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBlbGVtZW50IGJlaW5nIHRyYWNrZWQgZm9yIGEgY2xpY2suXG5cdFx0ICpcblx0XHQgKiBAdHlwZSBFdmVudFRhcmdldFxuXHRcdCAqL1xuXHRcdHRoaXMudGFyZ2V0RWxlbWVudCA9IG51bGw7XG5cblxuXHRcdC8qKlxuXHRcdCAqIFgtY29vcmRpbmF0ZSBvZiB0b3VjaCBzdGFydCBldmVudC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIG51bWJlclxuXHRcdCAqL1xuXHRcdHRoaXMudG91Y2hTdGFydFggPSAwO1xuXG5cblx0XHQvKipcblx0XHQgKiBZLWNvb3JkaW5hdGUgb2YgdG91Y2ggc3RhcnQgZXZlbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSBudW1iZXJcblx0XHQgKi9cblx0XHR0aGlzLnRvdWNoU3RhcnRZID0gMDtcblxuXG5cdFx0LyoqXG5cdFx0ICogSUQgb2YgdGhlIGxhc3QgdG91Y2gsIHJldHJpZXZlZCBmcm9tIFRvdWNoLmlkZW50aWZpZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSBudW1iZXJcblx0XHQgKi9cblx0XHR0aGlzLmxhc3RUb3VjaElkZW50aWZpZXIgPSAwO1xuXG5cblx0XHQvKipcblx0XHQgKiBUb3VjaG1vdmUgYm91bmRhcnksIGJleW9uZCB3aGljaCBhIGNsaWNrIHdpbGwgYmUgY2FuY2VsbGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgbnVtYmVyXG5cdFx0ICovXG5cdFx0dGhpcy50b3VjaEJvdW5kYXJ5ID0gb3B0aW9ucy50b3VjaEJvdW5kYXJ5IHx8IDEwO1xuXG5cblx0XHQvKipcblx0XHQgKiBUaGUgRmFzdENsaWNrIGxheWVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgRWxlbWVudFxuXHRcdCAqL1xuXHRcdHRoaXMubGF5ZXIgPSBsYXllcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtaW5pbXVtIHRpbWUgYmV0d2VlbiB0YXAodG91Y2hzdGFydCBhbmQgdG91Y2hlbmQpIGV2ZW50c1xuXHRcdCAqXG5cdFx0ICogQHR5cGUgbnVtYmVyXG5cdFx0ICovXG5cdFx0dGhpcy50YXBEZWxheSA9IG9wdGlvbnMudGFwRGVsYXkgfHwgMjAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG1heGltdW0gdGltZSBmb3IgYSB0YXBcblx0XHQgKlxuXHRcdCAqIEB0eXBlIG51bWJlclxuXHRcdCAqL1xuXHRcdHRoaXMudGFwVGltZW91dCA9IG9wdGlvbnMudGFwVGltZW91dCB8fCA3MDA7XG5cblx0XHRpZiAoRmFzdENsaWNrLm5vdE5lZWRlZChsYXllcikpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBBbmRyb2lkIGRvbid0IGhhdmUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcblx0XHRmdW5jdGlvbiBiaW5kKG1ldGhvZCwgY29udGV4dCkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gbWV0aG9kLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7IH07XG5cdFx0fVxuXG5cblx0XHR2YXIgbWV0aG9kcyA9IFsnb25Nb3VzZScsICdvbkNsaWNrJywgJ29uVG91Y2hTdGFydCcsICdvblRvdWNoTW92ZScsICdvblRvdWNoRW5kJywgJ29uVG91Y2hDYW5jZWwnXTtcblx0XHR2YXIgY29udGV4dCA9IHRoaXM7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBtZXRob2RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0Y29udGV4dFttZXRob2RzW2ldXSA9IGJpbmQoY29udGV4dFttZXRob2RzW2ldXSwgY29udGV4dCk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHVwIGV2ZW50IGhhbmRsZXJzIGFzIHJlcXVpcmVkXG5cdFx0aWYgKGRldmljZUlzQW5kcm9pZCkge1xuXHRcdFx0bGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgdGhpcy5vbk1vdXNlLCB0cnVlKTtcblx0XHRcdGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZSwgdHJ1ZSk7XG5cdFx0XHRsYXllci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlLCB0cnVlKTtcblx0XHR9XG5cblx0XHRsYXllci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljaywgdHJ1ZSk7XG5cdFx0bGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG5cdFx0bGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSwgZmFsc2UpO1xuXHRcdGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoRW5kLCBmYWxzZSk7XG5cdFx0bGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCB0aGlzLm9uVG91Y2hDYW5jZWwsIGZhbHNlKTtcblxuXHRcdC8vIEhhY2sgaXMgcmVxdWlyZWQgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBFdmVudCNzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKGUuZy4gQW5kcm9pZCAyKVxuXHRcdC8vIHdoaWNoIGlzIGhvdyBGYXN0Q2xpY2sgbm9ybWFsbHkgc3RvcHMgY2xpY2sgZXZlbnRzIGJ1YmJsaW5nIHRvIGNhbGxiYWNrcyByZWdpc3RlcmVkIG9uIHRoZSBGYXN0Q2xpY2tcblx0XHQvLyBsYXllciB3aGVuIHRoZXkgYXJlIGNhbmNlbGxlZC5cblx0XHRpZiAoIUV2ZW50LnByb3RvdHlwZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24pIHtcblx0XHRcdGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaywgY2FwdHVyZSkge1xuXHRcdFx0XHR2YXIgcm12ID0gTm9kZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcblx0XHRcdFx0aWYgKHR5cGUgPT09ICdjbGljaycpIHtcblx0XHRcdFx0XHRybXYuY2FsbChsYXllciwgdHlwZSwgY2FsbGJhY2suaGlqYWNrZWQgfHwgY2FsbGJhY2ssIGNhcHR1cmUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJtdi5jYWxsKGxheWVyLCB0eXBlLCBjYWxsYmFjaywgY2FwdHVyZSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGxheWVyLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaywgY2FwdHVyZSkge1xuXHRcdFx0XHR2YXIgYWR2ID0gTm9kZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcjtcblx0XHRcdFx0aWYgKHR5cGUgPT09ICdjbGljaycpIHtcblx0XHRcdFx0XHRhZHYuY2FsbChsYXllciwgdHlwZSwgY2FsbGJhY2suaGlqYWNrZWQgfHwgKGNhbGxiYWNrLmhpamFja2VkID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFx0XHRcdGlmICghZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrKGV2ZW50KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSwgY2FwdHVyZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YWR2LmNhbGwobGF5ZXIsIHR5cGUsIGNhbGxiYWNrLCBjYXB0dXJlKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBJZiBhIGhhbmRsZXIgaXMgYWxyZWFkeSBkZWNsYXJlZCBpbiB0aGUgZWxlbWVudCdzIG9uY2xpY2sgYXR0cmlidXRlLCBpdCB3aWxsIGJlIGZpcmVkIGJlZm9yZVxuXHRcdC8vIEZhc3RDbGljaydzIG9uQ2xpY2sgaGFuZGxlci4gRml4IHRoaXMgYnkgcHVsbGluZyBvdXQgdGhlIHVzZXItZGVmaW5lZCBoYW5kbGVyIGZ1bmN0aW9uIGFuZFxuXHRcdC8vIGFkZGluZyBpdCBhcyBsaXN0ZW5lci5cblx0XHRpZiAodHlwZW9mIGxheWVyLm9uY2xpY2sgPT09ICdmdW5jdGlvbicpIHtcblxuXHRcdFx0Ly8gQW5kcm9pZCBicm93c2VyIG9uIGF0IGxlYXN0IDMuMiByZXF1aXJlcyBhIG5ldyByZWZlcmVuY2UgdG8gdGhlIGZ1bmN0aW9uIGluIGxheWVyLm9uY2xpY2tcblx0XHRcdC8vIC0gdGhlIG9sZCBvbmUgd29uJ3Qgd29yayBpZiBwYXNzZWQgdG8gYWRkRXZlbnRMaXN0ZW5lciBkaXJlY3RseS5cblx0XHRcdG9sZE9uQ2xpY2sgPSBsYXllci5vbmNsaWNrO1xuXHRcdFx0bGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0XHRvbGRPbkNsaWNrKGV2ZW50KTtcblx0XHRcdH0sIGZhbHNlKTtcblx0XHRcdGxheWVyLm9uY2xpY2sgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIFdpbmRvd3MgUGhvbmUgOC4xIGZha2VzIHVzZXIgYWdlbnQgc3RyaW5nIHRvIGxvb2sgbGlrZSBBbmRyb2lkIGFuZCBpUGhvbmUuXG5cdCpcblx0KiBAdHlwZSBib29sZWFuXG5cdCovXG5cdHZhciBkZXZpY2VJc1dpbmRvd3NQaG9uZSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIldpbmRvd3MgUGhvbmVcIikgPj0gMDtcblxuXHQvKipcblx0ICogQW5kcm9pZCByZXF1aXJlcyBleGNlcHRpb25zLlxuXHQgKlxuXHQgKiBAdHlwZSBib29sZWFuXG5cdCAqL1xuXHR2YXIgZGV2aWNlSXNBbmRyb2lkID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgPiAwICYmICFkZXZpY2VJc1dpbmRvd3NQaG9uZTtcblxuXG5cdC8qKlxuXHQgKiBpT1MgcmVxdWlyZXMgZXhjZXB0aW9ucy5cblx0ICpcblx0ICogQHR5cGUgYm9vbGVhblxuXHQgKi9cblx0dmFyIGRldmljZUlzSU9TID0gL2lQKGFkfGhvbmV8b2QpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICFkZXZpY2VJc1dpbmRvd3NQaG9uZTtcblxuXG5cdC8qKlxuXHQgKiBpT1MgNCByZXF1aXJlcyBhbiBleGNlcHRpb24gZm9yIHNlbGVjdCBlbGVtZW50cy5cblx0ICpcblx0ICogQHR5cGUgYm9vbGVhblxuXHQgKi9cblx0dmFyIGRldmljZUlzSU9TNCA9IGRldmljZUlzSU9TICYmICgvT1MgNF9cXGQoX1xcZCk/LykudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuXG5cdC8qKlxuXHQgKiBpT1MgNi4wLTcuKiByZXF1aXJlcyB0aGUgdGFyZ2V0IGVsZW1lbnQgdG8gYmUgbWFudWFsbHkgZGVyaXZlZFxuXHQgKlxuXHQgKiBAdHlwZSBib29sZWFuXG5cdCAqL1xuXHR2YXIgZGV2aWNlSXNJT1NXaXRoQmFkVGFyZ2V0ID0gZGV2aWNlSXNJT1MgJiYgKC9PUyBbNi03XV9cXGQvKS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5cdC8qKlxuXHQgKiBCbGFja0JlcnJ5IHJlcXVpcmVzIGV4Y2VwdGlvbnMuXG5cdCAqXG5cdCAqIEB0eXBlIGJvb2xlYW5cblx0ICovXG5cdHZhciBkZXZpY2VJc0JsYWNrQmVycnkxMCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQkIxMCcpID4gMDtcblxuXHQvKipcblx0ICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBnaXZlbiBlbGVtZW50IHJlcXVpcmVzIGEgbmF0aXZlIGNsaWNrLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fEVsZW1lbnR9IHRhcmdldCBUYXJnZXQgRE9NIGVsZW1lbnRcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgZWxlbWVudCBuZWVkcyBhIG5hdGl2ZSBjbGlja1xuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5uZWVkc0NsaWNrID0gZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0c3dpdGNoICh0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2VuZCBhIHN5bnRoZXRpYyBjbGljayB0byBkaXNhYmxlZCBpbnB1dHMgKGlzc3VlICM2Milcblx0XHRjYXNlICdidXR0b24nOlxuXHRcdGNhc2UgJ3NlbGVjdCc6XG5cdFx0Y2FzZSAndGV4dGFyZWEnOlxuXHRcdFx0aWYgKHRhcmdldC5kaXNhYmxlZCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnaW5wdXQnOlxuXG5cdFx0XHQvLyBGaWxlIGlucHV0cyBuZWVkIHJlYWwgY2xpY2tzIG9uIGlPUyA2IGR1ZSB0byBhIGJyb3dzZXIgYnVnIChpc3N1ZSAjNjgpXG5cdFx0XHRpZiAoKGRldmljZUlzSU9TICYmIHRhcmdldC50eXBlID09PSAnZmlsZScpIHx8IHRhcmdldC5kaXNhYmxlZCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnbGFiZWwnOlxuXHRcdGNhc2UgJ2lmcmFtZSc6IC8vIGlPUzggaG9tZXNjcmVlbiBhcHBzIGNhbiBwcmV2ZW50IGV2ZW50cyBidWJibGluZyBpbnRvIGZyYW1lc1xuXHRcdGNhc2UgJ3ZpZGVvJzpcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiAoL1xcYm5lZWRzY2xpY2tcXGIvKS50ZXN0KHRhcmdldC5jbGFzc05hbWUpO1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIERldGVybWluZSB3aGV0aGVyIGEgZ2l2ZW4gZWxlbWVudCByZXF1aXJlcyBhIGNhbGwgdG8gZm9jdXMgdG8gc2ltdWxhdGUgY2xpY2sgaW50byBlbGVtZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fEVsZW1lbnR9IHRhcmdldCBUYXJnZXQgRE9NIGVsZW1lbnRcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgZWxlbWVudCByZXF1aXJlcyBhIGNhbGwgdG8gZm9jdXMgdG8gc2ltdWxhdGUgbmF0aXZlIGNsaWNrLlxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5uZWVkc0ZvY3VzID0gZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0c3dpdGNoICh0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkge1xuXHRcdGNhc2UgJ3RleHRhcmVhJzpcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGNhc2UgJ3NlbGVjdCc6XG5cdFx0XHRyZXR1cm4gIWRldmljZUlzQW5kcm9pZDtcblx0XHRjYXNlICdpbnB1dCc6XG5cdFx0XHRzd2l0Y2ggKHRhcmdldC50eXBlKSB7XG5cdFx0XHRjYXNlICdidXR0b24nOlxuXHRcdFx0Y2FzZSAnY2hlY2tib3gnOlxuXHRcdFx0Y2FzZSAnZmlsZSc6XG5cdFx0XHRjYXNlICdpbWFnZSc6XG5cdFx0XHRjYXNlICdyYWRpbyc6XG5cdFx0XHRjYXNlICdzdWJtaXQnOlxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5vIHBvaW50IGluIGF0dGVtcHRpbmcgdG8gZm9jdXMgZGlzYWJsZWQgaW5wdXRzXG5cdFx0XHRyZXR1cm4gIXRhcmdldC5kaXNhYmxlZCAmJiAhdGFyZ2V0LnJlYWRPbmx5O1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKC9cXGJuZWVkc2ZvY3VzXFxiLykudGVzdCh0YXJnZXQuY2xhc3NOYW1lKTtcblx0XHR9XG5cdH07XG5cblxuXHQvKipcblx0ICogU2VuZCBhIGNsaWNrIGV2ZW50IHRvIHRoZSBzcGVjaWZpZWQgZWxlbWVudC5cblx0ICpcblx0ICogQHBhcmFtIHtFdmVudFRhcmdldHxFbGVtZW50fSB0YXJnZXRFbGVtZW50XG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLnNlbmRDbGljayA9IGZ1bmN0aW9uKHRhcmdldEVsZW1lbnQsIGV2ZW50KSB7XG5cdFx0dmFyIGNsaWNrRXZlbnQsIHRvdWNoO1xuXG5cdFx0Ly8gT24gc29tZSBBbmRyb2lkIGRldmljZXMgYWN0aXZlRWxlbWVudCBuZWVkcyB0byBiZSBibHVycmVkIG90aGVyd2lzZSB0aGUgc3ludGhldGljIGNsaWNrIHdpbGwgaGF2ZSBubyBlZmZlY3QgKCMyNClcblx0XHRpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0YXJnZXRFbGVtZW50KSB7XG5cdFx0XHRkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcblx0XHR9XG5cblx0XHR0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuXG5cdFx0Ly8gU3ludGhlc2lzZSBhIGNsaWNrIGV2ZW50LCB3aXRoIGFuIGV4dHJhIGF0dHJpYnV0ZSBzbyBpdCBjYW4gYmUgdHJhY2tlZFxuXHRcdGNsaWNrRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKTtcblx0XHRjbGlja0V2ZW50LmluaXRNb3VzZUV2ZW50KHRoaXMuZGV0ZXJtaW5lRXZlbnRUeXBlKHRhcmdldEVsZW1lbnQpLCB0cnVlLCB0cnVlLCB3aW5kb3csIDEsIHRvdWNoLnNjcmVlblgsIHRvdWNoLnNjcmVlblksIHRvdWNoLmNsaWVudFgsIHRvdWNoLmNsaWVudFksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcblx0XHRjbGlja0V2ZW50LmZvcndhcmRlZFRvdWNoRXZlbnQgPSB0cnVlO1xuXHRcdHRhcmdldEVsZW1lbnQuZGlzcGF0Y2hFdmVudChjbGlja0V2ZW50KTtcblx0fTtcblxuXHRGYXN0Q2xpY2sucHJvdG90eXBlLmRldGVybWluZUV2ZW50VHlwZSA9IGZ1bmN0aW9uKHRhcmdldEVsZW1lbnQpIHtcblxuXHRcdC8vSXNzdWUgIzE1OTogQW5kcm9pZCBDaHJvbWUgU2VsZWN0IEJveCBkb2VzIG5vdCBvcGVuIHdpdGggYSBzeW50aGV0aWMgY2xpY2sgZXZlbnRcblx0XHRpZiAoZGV2aWNlSXNBbmRyb2lkICYmIHRhcmdldEVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuXHRcdFx0cmV0dXJuICdtb3VzZWRvd24nO1xuXHRcdH1cblxuXHRcdHJldHVybiAnY2xpY2snO1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8RWxlbWVudH0gdGFyZ2V0RWxlbWVudFxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uKHRhcmdldEVsZW1lbnQpIHtcblx0XHR2YXIgbGVuZ3RoO1xuXG5cdFx0Ly8gSXNzdWUgIzE2MDogb24gaU9TIDcsIHNvbWUgaW5wdXQgZWxlbWVudHMgKGUuZy4gZGF0ZSBkYXRldGltZSBtb250aCkgdGhyb3cgYSB2YWd1ZSBUeXBlRXJyb3Igb24gc2V0U2VsZWN0aW9uUmFuZ2UuIFRoZXNlIGVsZW1lbnRzIGRvbid0IGhhdmUgYW4gaW50ZWdlciB2YWx1ZSBmb3IgdGhlIHNlbGVjdGlvblN0YXJ0IGFuZCBzZWxlY3Rpb25FbmQgcHJvcGVydGllcywgYnV0IHVuZm9ydHVuYXRlbHkgdGhhdCBjYW4ndCBiZSB1c2VkIGZvciBkZXRlY3Rpb24gYmVjYXVzZSBhY2Nlc3NpbmcgdGhlIHByb3BlcnRpZXMgYWxzbyB0aHJvd3MgYSBUeXBlRXJyb3IuIEp1c3QgY2hlY2sgdGhlIHR5cGUgaW5zdGVhZC4gRmlsZWQgYXMgQXBwbGUgYnVnICMxNTEyMjcyNC5cblx0XHRpZiAoZGV2aWNlSXNJT1MgJiYgdGFyZ2V0RWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZSAmJiB0YXJnZXRFbGVtZW50LnR5cGUuaW5kZXhPZignZGF0ZScpICE9PSAwICYmIHRhcmdldEVsZW1lbnQudHlwZSAhPT0gJ3RpbWUnICYmIHRhcmdldEVsZW1lbnQudHlwZSAhPT0gJ21vbnRoJykge1xuXHRcdFx0bGVuZ3RoID0gdGFyZ2V0RWxlbWVudC52YWx1ZS5sZW5ndGg7XG5cdFx0XHR0YXJnZXRFbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKGxlbmd0aCwgbGVuZ3RoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0RWxlbWVudC5mb2N1cygpO1xuXHRcdH1cblx0fTtcblxuXG5cdC8qKlxuXHQgKiBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiB0YXJnZXQgZWxlbWVudCBpcyBhIGNoaWxkIG9mIGEgc2Nyb2xsYWJsZSBsYXllciBhbmQgaWYgc28sIHNldCBhIGZsYWcgb24gaXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8RWxlbWVudH0gdGFyZ2V0RWxlbWVudFxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS51cGRhdGVTY3JvbGxQYXJlbnQgPSBmdW5jdGlvbih0YXJnZXRFbGVtZW50KSB7XG5cdFx0dmFyIHNjcm9sbFBhcmVudCwgcGFyZW50RWxlbWVudDtcblxuXHRcdHNjcm9sbFBhcmVudCA9IHRhcmdldEVsZW1lbnQuZmFzdENsaWNrU2Nyb2xsUGFyZW50O1xuXG5cdFx0Ly8gQXR0ZW1wdCB0byBkaXNjb3ZlciB3aGV0aGVyIHRoZSB0YXJnZXQgZWxlbWVudCBpcyBjb250YWluZWQgd2l0aGluIGEgc2Nyb2xsYWJsZSBsYXllci4gUmUtY2hlY2sgaWYgdGhlXG5cdFx0Ly8gdGFyZ2V0IGVsZW1lbnQgd2FzIG1vdmVkIHRvIGFub3RoZXIgcGFyZW50LlxuXHRcdGlmICghc2Nyb2xsUGFyZW50IHx8ICFzY3JvbGxQYXJlbnQuY29udGFpbnModGFyZ2V0RWxlbWVudCkpIHtcblx0XHRcdHBhcmVudEVsZW1lbnQgPSB0YXJnZXRFbGVtZW50O1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHRpZiAocGFyZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgPiBwYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodCkge1xuXHRcdFx0XHRcdHNjcm9sbFBhcmVudCA9IHBhcmVudEVsZW1lbnQ7XG5cdFx0XHRcdFx0dGFyZ2V0RWxlbWVudC5mYXN0Q2xpY2tTY3JvbGxQYXJlbnQgPSBwYXJlbnRFbGVtZW50O1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cGFyZW50RWxlbWVudCA9IHBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcblx0XHRcdH0gd2hpbGUgKHBhcmVudEVsZW1lbnQpO1xuXHRcdH1cblxuXHRcdC8vIEFsd2F5cyB1cGRhdGUgdGhlIHNjcm9sbCB0b3AgdHJhY2tlciBpZiBwb3NzaWJsZS5cblx0XHRpZiAoc2Nyb2xsUGFyZW50KSB7XG5cdFx0XHRzY3JvbGxQYXJlbnQuZmFzdENsaWNrTGFzdFNjcm9sbFRvcCA9IHNjcm9sbFBhcmVudC5zY3JvbGxUb3A7XG5cdFx0fVxuXHR9O1xuXG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldEVsZW1lbnRcblx0ICogQHJldHVybnMge0VsZW1lbnR8RXZlbnRUYXJnZXR9XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLmdldFRhcmdldEVsZW1lbnRGcm9tRXZlbnRUYXJnZXQgPSBmdW5jdGlvbihldmVudFRhcmdldCkge1xuXG5cdFx0Ly8gT24gc29tZSBvbGRlciBicm93c2VycyAobm90YWJseSBTYWZhcmkgb24gaU9TIDQuMSAtIHNlZSBpc3N1ZSAjNTYpIHRoZSBldmVudCB0YXJnZXQgbWF5IGJlIGEgdGV4dCBub2RlLlxuXHRcdGlmIChldmVudFRhcmdldC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcblx0XHRcdHJldHVybiBldmVudFRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudFRhcmdldDtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBPbiB0b3VjaCBzdGFydCwgcmVjb3JkIHRoZSBwb3NpdGlvbiBhbmQgc2Nyb2xsIG9mZnNldC5cblx0ICpcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnRcblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLm9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHRhcmdldEVsZW1lbnQsIHRvdWNoLCBzZWxlY3Rpb247XG5cblx0XHQvLyBJZ25vcmUgbXVsdGlwbGUgdG91Y2hlcywgb3RoZXJ3aXNlIHBpbmNoLXRvLXpvb20gaXMgcHJldmVudGVkIGlmIGJvdGggZmluZ2VycyBhcmUgb24gdGhlIEZhc3RDbGljayBlbGVtZW50IChpc3N1ZSAjMTExKS5cblx0XHRpZiAoZXZlbnQudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHR0YXJnZXRFbGVtZW50ID0gdGhpcy5nZXRUYXJnZXRFbGVtZW50RnJvbUV2ZW50VGFyZ2V0KGV2ZW50LnRhcmdldCk7XG5cdFx0dG91Y2ggPSBldmVudC50YXJnZXRUb3VjaGVzWzBdO1xuXG5cdFx0aWYgKGRldmljZUlzSU9TKSB7XG5cblx0XHRcdC8vIE9ubHkgdHJ1c3RlZCBldmVudHMgd2lsbCBkZXNlbGVjdCB0ZXh0IG9uIGlPUyAoaXNzdWUgIzQ5KVxuXHRcdFx0c2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuXHRcdFx0aWYgKHNlbGVjdGlvbi5yYW5nZUNvdW50ICYmICFzZWxlY3Rpb24uaXNDb2xsYXBzZWQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZGV2aWNlSXNJT1M0KSB7XG5cblx0XHRcdFx0Ly8gV2VpcmQgdGhpbmdzIGhhcHBlbiBvbiBpT1Mgd2hlbiBhbiBhbGVydCBvciBjb25maXJtIGRpYWxvZyBpcyBvcGVuZWQgZnJvbSBhIGNsaWNrIGV2ZW50IGNhbGxiYWNrIChpc3N1ZSAjMjMpOlxuXHRcdFx0XHQvLyB3aGVuIHRoZSB1c2VyIG5leHQgdGFwcyBhbnl3aGVyZSBlbHNlIG9uIHRoZSBwYWdlLCBuZXcgdG91Y2hzdGFydCBhbmQgdG91Y2hlbmQgZXZlbnRzIGFyZSBkaXNwYXRjaGVkXG5cdFx0XHRcdC8vIHdpdGggdGhlIHNhbWUgaWRlbnRpZmllciBhcyB0aGUgdG91Y2ggZXZlbnQgdGhhdCBwcmV2aW91c2x5IHRyaWdnZXJlZCB0aGUgY2xpY2sgdGhhdCB0cmlnZ2VyZWQgdGhlIGFsZXJ0LlxuXHRcdFx0XHQvLyBTYWRseSwgdGhlcmUgaXMgYW4gaXNzdWUgb24gaU9TIDQgdGhhdCBjYXVzZXMgc29tZSBub3JtYWwgdG91Y2ggZXZlbnRzIHRvIGhhdmUgdGhlIHNhbWUgaWRlbnRpZmllciBhcyBhblxuXHRcdFx0XHQvLyBpbW1lZGlhdGVseSBwcmVjZWVkaW5nIHRvdWNoIGV2ZW50IChpc3N1ZSAjNTIpLCBzbyB0aGlzIGZpeCBpcyB1bmF2YWlsYWJsZSBvbiB0aGF0IHBsYXRmb3JtLlxuXHRcdFx0XHQvLyBJc3N1ZSAxMjA6IHRvdWNoLmlkZW50aWZpZXIgaXMgMCB3aGVuIENocm9tZSBkZXYgdG9vbHMgJ0VtdWxhdGUgdG91Y2ggZXZlbnRzJyBpcyBzZXQgd2l0aCBhbiBpT1MgZGV2aWNlIFVBIHN0cmluZyxcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGFsbCB0b3VjaCBldmVudHMgdG8gYmUgaWdub3JlZC4gQXMgdGhpcyBibG9jayBvbmx5IGFwcGxpZXMgdG8gaU9TLCBhbmQgaU9TIGlkZW50aWZpZXJzIGFyZSBhbHdheXMgbG9uZyxcblx0XHRcdFx0Ly8gcmFuZG9tIGludGVnZXJzLCBpdCdzIHNhZmUgdG8gdG8gY29udGludWUgaWYgdGhlIGlkZW50aWZpZXIgaXMgMCBoZXJlLlxuXHRcdFx0XHRpZiAodG91Y2guaWRlbnRpZmllciAmJiB0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLmxhc3RUb3VjaElkZW50aWZpZXIpIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMubGFzdFRvdWNoSWRlbnRpZmllciA9IHRvdWNoLmlkZW50aWZpZXI7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgY2hpbGQgb2YgYSBzY3JvbGxhYmxlIGxheWVyICh1c2luZyAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2gpIGFuZDpcblx0XHRcdFx0Ly8gMSkgdGhlIHVzZXIgZG9lcyBhIGZsaW5nIHNjcm9sbCBvbiB0aGUgc2Nyb2xsYWJsZSBsYXllclxuXHRcdFx0XHQvLyAyKSB0aGUgdXNlciBzdG9wcyB0aGUgZmxpbmcgc2Nyb2xsIHdpdGggYW5vdGhlciB0YXBcblx0XHRcdFx0Ly8gdGhlbiB0aGUgZXZlbnQudGFyZ2V0IG9mIHRoZSBsYXN0ICd0b3VjaGVuZCcgZXZlbnQgd2lsbCBiZSB0aGUgZWxlbWVudCB0aGF0IHdhcyB1bmRlciB0aGUgdXNlcidzIGZpbmdlclxuXHRcdFx0XHQvLyB3aGVuIHRoZSBmbGluZyBzY3JvbGwgd2FzIHN0YXJ0ZWQsIGNhdXNpbmcgRmFzdENsaWNrIHRvIHNlbmQgYSBjbGljayBldmVudCB0byB0aGF0IGxheWVyIC0gdW5sZXNzIGEgY2hlY2tcblx0XHRcdFx0Ly8gaXMgbWFkZSB0byBlbnN1cmUgdGhhdCBhIHBhcmVudCBsYXllciB3YXMgbm90IHNjcm9sbGVkIGJlZm9yZSBzZW5kaW5nIGEgc3ludGhldGljIGNsaWNrIChpc3N1ZSAjNDIpLlxuXHRcdFx0XHR0aGlzLnVwZGF0ZVNjcm9sbFBhcmVudCh0YXJnZXRFbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnRyYWNraW5nQ2xpY2sgPSB0cnVlO1xuXHRcdHRoaXMudHJhY2tpbmdDbGlja1N0YXJ0ID0gZXZlbnQudGltZVN0YW1wO1xuXHRcdHRoaXMudGFyZ2V0RWxlbWVudCA9IHRhcmdldEVsZW1lbnQ7XG5cblx0XHR0aGlzLnRvdWNoU3RhcnRYID0gdG91Y2gucGFnZVg7XG5cdFx0dGhpcy50b3VjaFN0YXJ0WSA9IHRvdWNoLnBhZ2VZO1xuXG5cdFx0Ly8gUHJldmVudCBwaGFudG9tIGNsaWNrcyBvbiBmYXN0IGRvdWJsZS10YXAgKGlzc3VlICMzNilcblx0XHRpZiAoKGV2ZW50LnRpbWVTdGFtcCAtIHRoaXMubGFzdENsaWNrVGltZSkgPCB0aGlzLnRhcERlbGF5KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIEJhc2VkIG9uIGEgdG91Y2htb3ZlIGV2ZW50IG9iamVjdCwgY2hlY2sgd2hldGhlciB0aGUgdG91Y2ggaGFzIG1vdmVkIHBhc3QgYSBib3VuZGFyeSBzaW5jZSBpdCBzdGFydGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICovXG5cdEZhc3RDbGljay5wcm90b3R5cGUudG91Y2hIYXNNb3ZlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0sIGJvdW5kYXJ5ID0gdGhpcy50b3VjaEJvdW5kYXJ5O1xuXG5cdFx0aWYgKE1hdGguYWJzKHRvdWNoLnBhZ2VYIC0gdGhpcy50b3VjaFN0YXJ0WCkgPiBib3VuZGFyeSB8fCBNYXRoLmFicyh0b3VjaC5wYWdlWSAtIHRoaXMudG91Y2hTdGFydFkpID4gYm91bmRhcnkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBVcGRhdGUgdGhlIGxhc3QgcG9zaXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5vblRvdWNoTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLnRyYWNraW5nQ2xpY2spIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZSB0b3VjaCBoYXMgbW92ZWQsIGNhbmNlbCB0aGUgY2xpY2sgdHJhY2tpbmdcblx0XHRpZiAodGhpcy50YXJnZXRFbGVtZW50ICE9PSB0aGlzLmdldFRhcmdldEVsZW1lbnRGcm9tRXZlbnRUYXJnZXQoZXZlbnQudGFyZ2V0KSB8fCB0aGlzLnRvdWNoSGFzTW92ZWQoZXZlbnQpKSB7XG5cdFx0XHR0aGlzLnRyYWNraW5nQ2xpY2sgPSBmYWxzZTtcblx0XHRcdHRoaXMudGFyZ2V0RWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblxuXHQvKipcblx0ICogQXR0ZW1wdCB0byBmaW5kIHRoZSBsYWJlbGxlZCBjb250cm9sIGZvciB0aGUgZ2l2ZW4gbGFiZWwgZWxlbWVudC5cblx0ICpcblx0ICogQHBhcmFtIHtFdmVudFRhcmdldHxIVE1MTGFiZWxFbGVtZW50fSBsYWJlbEVsZW1lbnRcblx0ICogQHJldHVybnMge0VsZW1lbnR8bnVsbH1cblx0ICovXG5cdEZhc3RDbGljay5wcm90b3R5cGUuZmluZENvbnRyb2wgPSBmdW5jdGlvbihsYWJlbEVsZW1lbnQpIHtcblxuXHRcdC8vIEZhc3QgcGF0aCBmb3IgbmV3ZXIgYnJvd3NlcnMgc3VwcG9ydGluZyB0aGUgSFRNTDUgY29udHJvbCBhdHRyaWJ1dGVcblx0XHRpZiAobGFiZWxFbGVtZW50LmNvbnRyb2wgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIGxhYmVsRWxlbWVudC5jb250cm9sO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBicm93c2VycyB1bmRlciB0ZXN0IHRoYXQgc3VwcG9ydCB0b3VjaCBldmVudHMgYWxzbyBzdXBwb3J0IHRoZSBIVE1MNSBodG1sRm9yIGF0dHJpYnV0ZVxuXHRcdGlmIChsYWJlbEVsZW1lbnQuaHRtbEZvcikge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxhYmVsRWxlbWVudC5odG1sRm9yKTtcblx0XHR9XG5cblx0XHQvLyBJZiBubyBmb3IgYXR0cmlidXRlIGV4aXN0cywgYXR0ZW1wdCB0byByZXRyaWV2ZSB0aGUgZmlyc3QgbGFiZWxsYWJsZSBkZXNjZW5kYW50IGVsZW1lbnRcblx0XHQvLyB0aGUgbGlzdCBvZiB3aGljaCBpcyBkZWZpbmVkIGhlcmU6IGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGFiZWxcblx0XHRyZXR1cm4gbGFiZWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbiwgaW5wdXQ6bm90KFt0eXBlPWhpZGRlbl0pLCBrZXlnZW4sIG1ldGVyLCBvdXRwdXQsIHByb2dyZXNzLCBzZWxlY3QsIHRleHRhcmVhJyk7XG5cdH07XG5cblxuXHQvKipcblx0ICogT24gdG91Y2ggZW5kLCBkZXRlcm1pbmUgd2hldGhlciB0byBzZW5kIGEgY2xpY2sgZXZlbnQgYXQgb25jZS5cblx0ICpcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnRcblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLm9uVG91Y2hFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBmb3JFbGVtZW50LCB0cmFja2luZ0NsaWNrU3RhcnQsIHRhcmdldFRhZ05hbWUsIHNjcm9sbFBhcmVudCwgdG91Y2gsIHRhcmdldEVsZW1lbnQgPSB0aGlzLnRhcmdldEVsZW1lbnQ7XG5cblx0XHRpZiAoIXRoaXMudHJhY2tpbmdDbGljaykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gUHJldmVudCBwaGFudG9tIGNsaWNrcyBvbiBmYXN0IGRvdWJsZS10YXAgKGlzc3VlICMzNilcblx0XHRpZiAoKGV2ZW50LnRpbWVTdGFtcCAtIHRoaXMubGFzdENsaWNrVGltZSkgPCB0aGlzLnRhcERlbGF5KSB7XG5cdFx0XHR0aGlzLmNhbmNlbE5leHRDbGljayA9IHRydWU7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoKGV2ZW50LnRpbWVTdGFtcCAtIHRoaXMudHJhY2tpbmdDbGlja1N0YXJ0KSA+IHRoaXMudGFwVGltZW91dCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gUmVzZXQgdG8gcHJldmVudCB3cm9uZyBjbGljayBjYW5jZWwgb24gaW5wdXQgKGlzc3VlICMxNTYpLlxuXHRcdHRoaXMuY2FuY2VsTmV4dENsaWNrID0gZmFsc2U7XG5cblx0XHR0aGlzLmxhc3RDbGlja1RpbWUgPSBldmVudC50aW1lU3RhbXA7XG5cblx0XHR0cmFja2luZ0NsaWNrU3RhcnQgPSB0aGlzLnRyYWNraW5nQ2xpY2tTdGFydDtcblx0XHR0aGlzLnRyYWNraW5nQ2xpY2sgPSBmYWxzZTtcblx0XHR0aGlzLnRyYWNraW5nQ2xpY2tTdGFydCA9IDA7XG5cblx0XHQvLyBPbiBzb21lIGlPUyBkZXZpY2VzLCB0aGUgdGFyZ2V0RWxlbWVudCBzdXBwbGllZCB3aXRoIHRoZSBldmVudCBpcyBpbnZhbGlkIGlmIHRoZSBsYXllclxuXHRcdC8vIGlzIHBlcmZvcm1pbmcgYSB0cmFuc2l0aW9uIG9yIHNjcm9sbCwgYW5kIGhhcyB0byBiZSByZS1kZXRlY3RlZCBtYW51YWxseS4gTm90ZSB0aGF0XG5cdFx0Ly8gZm9yIHRoaXMgdG8gZnVuY3Rpb24gY29ycmVjdGx5LCBpdCBtdXN0IGJlIGNhbGxlZCAqYWZ0ZXIqIHRoZSBldmVudCB0YXJnZXQgaXMgY2hlY2tlZCFcblx0XHQvLyBTZWUgaXNzdWUgIzU3OyBhbHNvIGZpbGVkIGFzIHJkYXI6Ly8xMzA0ODU4OSAuXG5cdFx0aWYgKGRldmljZUlzSU9TV2l0aEJhZFRhcmdldCkge1xuXHRcdFx0dG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcblxuXHRcdFx0Ly8gSW4gY2VydGFpbiBjYXNlcyBhcmd1bWVudHMgb2YgZWxlbWVudEZyb21Qb2ludCBjYW4gYmUgbmVnYXRpdmUsIHNvIHByZXZlbnQgc2V0dGluZyB0YXJnZXRFbGVtZW50IHRvIG51bGxcblx0XHRcdHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoLnBhZ2VYIC0gd2luZG93LnBhZ2VYT2Zmc2V0LCB0b3VjaC5wYWdlWSAtIHdpbmRvdy5wYWdlWU9mZnNldCkgfHwgdGFyZ2V0RWxlbWVudDtcblx0XHRcdHRhcmdldEVsZW1lbnQuZmFzdENsaWNrU2Nyb2xsUGFyZW50ID0gdGhpcy50YXJnZXRFbGVtZW50LmZhc3RDbGlja1Njcm9sbFBhcmVudDtcblx0XHR9XG5cblx0XHR0YXJnZXRUYWdOYW1lID0gdGFyZ2V0RWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0aWYgKHRhcmdldFRhZ05hbWUgPT09ICdsYWJlbCcpIHtcblx0XHRcdGZvckVsZW1lbnQgPSB0aGlzLmZpbmRDb250cm9sKHRhcmdldEVsZW1lbnQpO1xuXHRcdFx0aWYgKGZvckVsZW1lbnQpIHtcblx0XHRcdFx0dGhpcy5mb2N1cyh0YXJnZXRFbGVtZW50KTtcblx0XHRcdFx0aWYgKGRldmljZUlzQW5kcm9pZCkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRhcmdldEVsZW1lbnQgPSBmb3JFbGVtZW50O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodGhpcy5uZWVkc0ZvY3VzKHRhcmdldEVsZW1lbnQpKSB7XG5cblx0XHRcdC8vIENhc2UgMTogSWYgdGhlIHRvdWNoIHN0YXJ0ZWQgYSB3aGlsZSBhZ28gKGJlc3QgZ3Vlc3MgaXMgMTAwbXMgYmFzZWQgb24gdGVzdHMgZm9yIGlzc3VlICMzNikgdGhlbiBmb2N1cyB3aWxsIGJlIHRyaWdnZXJlZCBhbnl3YXkuIFJldHVybiBlYXJseSBhbmQgdW5zZXQgdGhlIHRhcmdldCBlbGVtZW50IHJlZmVyZW5jZSBzbyB0aGF0IHRoZSBzdWJzZXF1ZW50IGNsaWNrIHdpbGwgYmUgYWxsb3dlZCB0aHJvdWdoLlxuXHRcdFx0Ly8gQ2FzZSAyOiBXaXRob3V0IHRoaXMgZXhjZXB0aW9uIGZvciBpbnB1dCBlbGVtZW50cyB0YXBwZWQgd2hlbiB0aGUgZG9jdW1lbnQgaXMgY29udGFpbmVkIGluIGFuIGlmcmFtZSwgdGhlbiBhbnkgaW5wdXR0ZWQgdGV4dCB3b24ndCBiZSB2aXNpYmxlIGV2ZW4gdGhvdWdoIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgdXBkYXRlZCBhcyB0aGUgdXNlciB0eXBlcyAoaXNzdWUgIzM3KS5cblx0XHRcdGlmICgoZXZlbnQudGltZVN0YW1wIC0gdHJhY2tpbmdDbGlja1N0YXJ0KSA+IDEwMCB8fCAoZGV2aWNlSXNJT1MgJiYgd2luZG93LnRvcCAhPT0gd2luZG93ICYmIHRhcmdldFRhZ05hbWUgPT09ICdpbnB1dCcpKSB7XG5cdFx0XHRcdHRoaXMudGFyZ2V0RWxlbWVudCA9IG51bGw7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5mb2N1cyh0YXJnZXRFbGVtZW50KTtcblx0XHRcdHRoaXMuc2VuZENsaWNrKHRhcmdldEVsZW1lbnQsIGV2ZW50KTtcblxuXHRcdFx0Ly8gU2VsZWN0IGVsZW1lbnRzIG5lZWQgdGhlIGV2ZW50IHRvIGdvIHRocm91Z2ggb24gaU9TIDQsIG90aGVyd2lzZSB0aGUgc2VsZWN0b3IgbWVudSB3b24ndCBvcGVuLlxuXHRcdFx0Ly8gQWxzbyB0aGlzIGJyZWFrcyBvcGVuaW5nIHNlbGVjdHMgd2hlbiBWb2ljZU92ZXIgaXMgYWN0aXZlIG9uIGlPUzYsIGlPUzcgKGFuZCBwb3NzaWJseSBvdGhlcnMpXG5cdFx0XHRpZiAoIWRldmljZUlzSU9TIHx8IHRhcmdldFRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG5cdFx0XHRcdHRoaXMudGFyZ2V0RWxlbWVudCA9IG51bGw7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoZGV2aWNlSXNJT1MgJiYgIWRldmljZUlzSU9TNCkge1xuXG5cdFx0XHQvLyBEb24ndCBzZW5kIGEgc3ludGhldGljIGNsaWNrIGV2ZW50IGlmIHRoZSB0YXJnZXQgZWxlbWVudCBpcyBjb250YWluZWQgd2l0aGluIGEgcGFyZW50IGxheWVyIHRoYXQgd2FzIHNjcm9sbGVkXG5cdFx0XHQvLyBhbmQgdGhpcyB0YXAgaXMgYmVpbmcgdXNlZCB0byBzdG9wIHRoZSBzY3JvbGxpbmcgKHVzdWFsbHkgaW5pdGlhdGVkIGJ5IGEgZmxpbmcgLSBpc3N1ZSAjNDIpLlxuXHRcdFx0c2Nyb2xsUGFyZW50ID0gdGFyZ2V0RWxlbWVudC5mYXN0Q2xpY2tTY3JvbGxQYXJlbnQ7XG5cdFx0XHRpZiAoc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5mYXN0Q2xpY2tMYXN0U2Nyb2xsVG9wICE9PSBzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXZlbnQgdGhlIGFjdHVhbCBjbGljayBmcm9tIGdvaW5nIHRob3VnaCAtIHVubGVzcyB0aGUgdGFyZ2V0IG5vZGUgaXMgbWFya2VkIGFzIHJlcXVpcmluZ1xuXHRcdC8vIHJlYWwgY2xpY2tzIG9yIGlmIGl0IGlzIGluIHRoZSB3aGl0ZWxpc3QgaW4gd2hpY2ggY2FzZSBvbmx5IG5vbi1wcm9ncmFtbWF0aWMgY2xpY2tzIGFyZSBwZXJtaXR0ZWQuXG5cdFx0aWYgKCF0aGlzLm5lZWRzQ2xpY2sodGFyZ2V0RWxlbWVudCkpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLnNlbmRDbGljayh0YXJnZXRFbGVtZW50LCBldmVudCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIE9uIHRvdWNoIGNhbmNlbCwgc3RvcCB0cmFja2luZyB0aGUgY2xpY2suXG5cdCAqXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5vblRvdWNoQ2FuY2VsID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy50cmFja2luZ0NsaWNrID0gZmFsc2U7XG5cdFx0dGhpcy50YXJnZXRFbGVtZW50ID0gbnVsbDtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgbW91c2UgZXZlbnRzIHdoaWNoIHNob3VsZCBiZSBwZXJtaXR0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5vbk1vdXNlID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuXHRcdC8vIElmIGEgdGFyZ2V0IGVsZW1lbnQgd2FzIG5ldmVyIHNldCAoYmVjYXVzZSBhIHRvdWNoIGV2ZW50IHdhcyBuZXZlciBmaXJlZCkgYWxsb3cgdGhlIGV2ZW50XG5cdFx0aWYgKCF0aGlzLnRhcmdldEVsZW1lbnQpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChldmVudC5mb3J3YXJkZWRUb3VjaEV2ZW50KSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBQcm9ncmFtbWF0aWNhbGx5IGdlbmVyYXRlZCBldmVudHMgdGFyZ2V0aW5nIGEgc3BlY2lmaWMgZWxlbWVudCBzaG91bGQgYmUgcGVybWl0dGVkXG5cdFx0aWYgKCFldmVudC5jYW5jZWxhYmxlKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBEZXJpdmUgYW5kIGNoZWNrIHRoZSB0YXJnZXQgZWxlbWVudCB0byBzZWUgd2hldGhlciB0aGUgbW91c2UgZXZlbnQgbmVlZHMgdG8gYmUgcGVybWl0dGVkO1xuXHRcdC8vIHVubGVzcyBleHBsaWNpdGx5IGVuYWJsZWQsIHByZXZlbnQgbm9uLXRvdWNoIGNsaWNrIGV2ZW50cyBmcm9tIHRyaWdnZXJpbmcgYWN0aW9ucyxcblx0XHQvLyB0byBwcmV2ZW50IGdob3N0L2RvdWJsZWNsaWNrcy5cblx0XHRpZiAoIXRoaXMubmVlZHNDbGljayh0aGlzLnRhcmdldEVsZW1lbnQpIHx8IHRoaXMuY2FuY2VsTmV4dENsaWNrKSB7XG5cblx0XHRcdC8vIFByZXZlbnQgYW55IHVzZXItYWRkZWQgbGlzdGVuZXJzIGRlY2xhcmVkIG9uIEZhc3RDbGljayBlbGVtZW50IGZyb20gYmVpbmcgZmlyZWQuXG5cdFx0XHRpZiAoZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBQYXJ0IG9mIHRoZSBoYWNrIGZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgRXZlbnQjc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIChlLmcuIEFuZHJvaWQgMilcblx0XHRcdFx0ZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FuY2VsIHRoZSBldmVudFxuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIG1vdXNlIGV2ZW50IGlzIHBlcm1pdHRlZCwgcmV0dXJuIHRydWUgZm9yIHRoZSBhY3Rpb24gdG8gZ28gdGhyb3VnaC5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBPbiBhY3R1YWwgY2xpY2tzLCBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgdG91Y2gtZ2VuZXJhdGVkIGNsaWNrLCBhIGNsaWNrIGFjdGlvbiBvY2N1cnJpbmdcblx0ICogbmF0dXJhbGx5IGFmdGVyIGEgZGVsYXkgYWZ0ZXIgYSB0b3VjaCAod2hpY2ggbmVlZHMgdG8gYmUgY2FuY2VsbGVkIHRvIGF2b2lkIGR1cGxpY2F0aW9uKSwgb3Jcblx0ICogYW4gYWN0dWFsIGNsaWNrIHdoaWNoIHNob3VsZCBiZSBwZXJtaXR0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5vbkNsaWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgcGVybWl0dGVkO1xuXG5cdFx0Ly8gSXQncyBwb3NzaWJsZSBmb3IgYW5vdGhlciBGYXN0Q2xpY2stbGlrZSBsaWJyYXJ5IGRlbGl2ZXJlZCB3aXRoIHRoaXJkLXBhcnR5IGNvZGUgdG8gZmlyZSBhIGNsaWNrIGV2ZW50IGJlZm9yZSBGYXN0Q2xpY2sgZG9lcyAoaXNzdWUgIzQ0KS4gSW4gdGhhdCBjYXNlLCBzZXQgdGhlIGNsaWNrLXRyYWNraW5nIGZsYWcgYmFjayB0byBmYWxzZSBhbmQgcmV0dXJuIGVhcmx5LiBUaGlzIHdpbGwgY2F1c2Ugb25Ub3VjaEVuZCB0byByZXR1cm4gZWFybHkuXG5cdFx0aWYgKHRoaXMudHJhY2tpbmdDbGljaykge1xuXHRcdFx0dGhpcy50YXJnZXRFbGVtZW50ID0gbnVsbDtcblx0XHRcdHRoaXMudHJhY2tpbmdDbGljayA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gVmVyeSBvZGQgYmVoYXZpb3VyIG9uIGlPUyAoaXNzdWUgIzE4KTogaWYgYSBzdWJtaXQgZWxlbWVudCBpcyBwcmVzZW50IGluc2lkZSBhIGZvcm0gYW5kIHRoZSB1c2VyIGhpdHMgZW50ZXIgaW4gdGhlIGlPUyBzaW11bGF0b3Igb3IgY2xpY2tzIHRoZSBHbyBidXR0b24gb24gdGhlIHBvcC11cCBPUyBrZXlib2FyZCB0aGUgYSBraW5kIG9mICdmYWtlJyBjbGljayBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCB3aXRoIHRoZSBzdWJtaXQtdHlwZSBpbnB1dCBlbGVtZW50IGFzIHRoZSB0YXJnZXQuXG5cdFx0aWYgKGV2ZW50LnRhcmdldC50eXBlID09PSAnc3VibWl0JyAmJiBldmVudC5kZXRhaWwgPT09IDApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHBlcm1pdHRlZCA9IHRoaXMub25Nb3VzZShldmVudCk7XG5cblx0XHQvLyBPbmx5IHVuc2V0IHRhcmdldEVsZW1lbnQgaWYgdGhlIGNsaWNrIGlzIG5vdCBwZXJtaXR0ZWQuIFRoaXMgd2lsbCBlbnN1cmUgdGhhdCB0aGUgY2hlY2sgZm9yICF0YXJnZXRFbGVtZW50IGluIG9uTW91c2UgZmFpbHMgYW5kIHRoZSBicm93c2VyJ3MgY2xpY2sgZG9lc24ndCBnbyB0aHJvdWdoLlxuXHRcdGlmICghcGVybWl0dGVkKSB7XG5cdFx0XHR0aGlzLnRhcmdldEVsZW1lbnQgPSBudWxsO1xuXHRcdH1cblxuXHRcdC8vIElmIGNsaWNrcyBhcmUgcGVybWl0dGVkLCByZXR1cm4gdHJ1ZSBmb3IgdGhlIGFjdGlvbiB0byBnbyB0aHJvdWdoLlxuXHRcdHJldHVybiBwZXJtaXR0ZWQ7XG5cdH07XG5cblxuXHQvKipcblx0ICogUmVtb3ZlIGFsbCBGYXN0Q2xpY2sncyBldmVudCBsaXN0ZW5lcnMuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGxheWVyID0gdGhpcy5sYXllcjtcblxuXHRcdGlmIChkZXZpY2VJc0FuZHJvaWQpIHtcblx0XHRcdGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMub25Nb3VzZSwgdHJ1ZSk7XG5cdFx0XHRsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2UsIHRydWUpO1xuXHRcdFx0bGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZSwgdHJ1ZSk7XG5cdFx0fVxuXG5cdFx0bGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2ssIHRydWUpO1xuXHRcdGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuXHRcdGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIGZhbHNlKTtcblx0XHRsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZCwgZmFsc2UpO1xuXHRcdGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5vblRvdWNoQ2FuY2VsLCBmYWxzZSk7XG5cdH07XG5cblxuXHQvKipcblx0ICogQ2hlY2sgd2hldGhlciBGYXN0Q2xpY2sgaXMgbmVlZGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGxheWVyIFRoZSBsYXllciB0byBsaXN0ZW4gb25cblx0ICovXG5cdEZhc3RDbGljay5ub3ROZWVkZWQgPSBmdW5jdGlvbihsYXllcikge1xuXHRcdHZhciBtZXRhVmlld3BvcnQ7XG5cdFx0dmFyIGNocm9tZVZlcnNpb247XG5cdFx0dmFyIGJsYWNrYmVycnlWZXJzaW9uO1xuXHRcdHZhciBmaXJlZm94VmVyc2lvbjtcblxuXHRcdC8vIERldmljZXMgdGhhdCBkb24ndCBzdXBwb3J0IHRvdWNoIGRvbid0IG5lZWQgRmFzdENsaWNrXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cub250b3VjaHN0YXJ0ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hyb21lIHZlcnNpb24gLSB6ZXJvIGZvciBvdGhlciBicm93c2Vyc1xuXHRcdGNocm9tZVZlcnNpb24gPSArKC9DaHJvbWVcXC8oWzAtOV0rKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KSB8fCBbLDBdKVsxXTtcblxuXHRcdGlmIChjaHJvbWVWZXJzaW9uKSB7XG5cblx0XHRcdGlmIChkZXZpY2VJc0FuZHJvaWQpIHtcblx0XHRcdFx0bWV0YVZpZXdwb3J0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPXZpZXdwb3J0XScpO1xuXG5cdFx0XHRcdGlmIChtZXRhVmlld3BvcnQpIHtcblx0XHRcdFx0XHQvLyBDaHJvbWUgb24gQW5kcm9pZCB3aXRoIHVzZXItc2NhbGFibGU9XCJub1wiIGRvZXNuJ3QgbmVlZCBGYXN0Q2xpY2sgKGlzc3VlICM4OSlcblx0XHRcdFx0XHRpZiAobWV0YVZpZXdwb3J0LmNvbnRlbnQuaW5kZXhPZigndXNlci1zY2FsYWJsZT1ubycpICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIENocm9tZSAzMiBhbmQgYWJvdmUgd2l0aCB3aWR0aD1kZXZpY2Utd2lkdGggb3IgbGVzcyBkb24ndCBuZWVkIEZhc3RDbGlja1xuXHRcdFx0XHRcdGlmIChjaHJvbWVWZXJzaW9uID4gMzEgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoIDw9IHdpbmRvdy5vdXRlcldpZHRoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gQ2hyb21lIGRlc2t0b3AgZG9lc24ndCBuZWVkIEZhc3RDbGljayAoaXNzdWUgIzE1KVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGRldmljZUlzQmxhY2tCZXJyeTEwKSB7XG5cdFx0XHRibGFja2JlcnJ5VmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1ZlcnNpb25cXC8oWzAtOV0qKVxcLihbMC05XSopLyk7XG5cblx0XHRcdC8vIEJsYWNrQmVycnkgMTAuMysgZG9lcyBub3QgcmVxdWlyZSBGYXN0Y2xpY2sgbGlicmFyeS5cblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mdGxhYnMvZmFzdGNsaWNrL2lzc3Vlcy8yNTFcblx0XHRcdGlmIChibGFja2JlcnJ5VmVyc2lvblsxXSA+PSAxMCAmJiBibGFja2JlcnJ5VmVyc2lvblsyXSA+PSAzKSB7XG5cdFx0XHRcdG1ldGFWaWV3cG9ydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT12aWV3cG9ydF0nKTtcblxuXHRcdFx0XHRpZiAobWV0YVZpZXdwb3J0KSB7XG5cdFx0XHRcdFx0Ly8gdXNlci1zY2FsYWJsZT1ubyBlbGltaW5hdGVzIGNsaWNrIGRlbGF5LlxuXHRcdFx0XHRcdGlmIChtZXRhVmlld3BvcnQuY29udGVudC5pbmRleE9mKCd1c2VyLXNjYWxhYmxlPW5vJykgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gd2lkdGg9ZGV2aWNlLXdpZHRoIChvciBsZXNzIHRoYW4gZGV2aWNlLXdpZHRoKSBlbGltaW5hdGVzIGNsaWNrIGRlbGF5LlxuXHRcdFx0XHRcdGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGggPD0gd2luZG93Lm91dGVyV2lkdGgpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIElFMTAgd2l0aCAtbXMtdG91Y2gtYWN0aW9uOiBub25lIG9yIG1hbmlwdWxhdGlvbiwgd2hpY2ggZGlzYWJsZXMgZG91YmxlLXRhcC10by16b29tIChpc3N1ZSAjOTcpXG5cdFx0aWYgKGxheWVyLnN0eWxlLm1zVG91Y2hBY3Rpb24gPT09ICdub25lJyB8fCBsYXllci5zdHlsZS50b3VjaEFjdGlvbiA9PT0gJ21hbmlwdWxhdGlvbicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIEZpcmVmb3ggdmVyc2lvbiAtIHplcm8gZm9yIG90aGVyIGJyb3dzZXJzXG5cdFx0ZmlyZWZveFZlcnNpb24gPSArKC9GaXJlZm94XFwvKFswLTldKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgWywwXSlbMV07XG5cblx0XHRpZiAoZmlyZWZveFZlcnNpb24gPj0gMjcpIHtcblx0XHRcdC8vIEZpcmVmb3ggMjcrIGRvZXMgbm90IGhhdmUgdGFwIGRlbGF5IGlmIHRoZSBjb250ZW50IGlzIG5vdCB6b29tYWJsZSAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTkyMjg5NlxuXG5cdFx0XHRtZXRhVmlld3BvcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9dmlld3BvcnRdJyk7XG5cdFx0XHRpZiAobWV0YVZpZXdwb3J0ICYmIChtZXRhVmlld3BvcnQuY29udGVudC5pbmRleE9mKCd1c2VyLXNjYWxhYmxlPW5vJykgIT09IC0xIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCA8PSB3aW5kb3cub3V0ZXJXaWR0aCkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSUUxMTogcHJlZml4ZWQgLW1zLXRvdWNoLWFjdGlvbiBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGFuZCBpdCdzIHJlY29tZW5kZWQgdG8gdXNlIG5vbi1wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvYXBwcy9IaDc2NzMxMy5hc3B4XG5cdFx0aWYgKGxheWVyLnN0eWxlLnRvdWNoQWN0aW9uID09PSAnbm9uZScgfHwgbGF5ZXIuc3R5bGUudG91Y2hBY3Rpb24gPT09ICdtYW5pcHVsYXRpb24nKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblxuXHQvKipcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGEgRmFzdENsaWNrIG9iamVjdFxuXHQgKlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGxheWVyIFRoZSBsYXllciB0byBsaXN0ZW4gb25cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHNcblx0ICovXG5cdEZhc3RDbGljay5hdHRhY2ggPSBmdW5jdGlvbihsYXllciwgb3B0aW9ucykge1xuXHRcdHJldHVybiBuZXcgRmFzdENsaWNrKGxheWVyLCBvcHRpb25zKTtcblx0fTtcblxuXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIEZhc3RDbGljaztcblx0XHR9KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gRmFzdENsaWNrLmF0dGFjaDtcblx0XHRtb2R1bGUuZXhwb3J0cy5GYXN0Q2xpY2sgPSBGYXN0Q2xpY2s7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LkZhc3RDbGljayA9IEZhc3RDbGljaztcblx0fVxufSgpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Zhc3RjbGljay9saWIvZmFzdGNsaWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9mYXN0Y2xpY2svbGliL2Zhc3RjbGljay5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiFcbiAqIGltYWdlc0xvYWRlZCB2NC4xLjNcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHsgJ3VzZSBzdHJpY3QnO1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cblxuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJ1xuICAgIF0sIGZ1bmN0aW9uKCBFdkVtaXR0ZXIgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuaW1hZ2VzTG9hZGVkID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXJcbiAgICApO1xuICB9XG5cbn0pKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICBmYWN0b3J5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciAkID0gd2luZG93LmpRdWVyeTtcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZXh0ZW5kIG9iamVjdHNcbmZ1bmN0aW9uIGV4dGVuZCggYSwgYiApIHtcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG5mdW5jdGlvbiBtYWtlQXJyYXkoIG9iaiApIHtcbiAgdmFyIGFyeSA9IFtdO1xuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuICAgIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICAgIGFyeSA9IG9iajtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBvYmoubGVuZ3RoOyBpKysgKSB7XG4gICAgICBhcnkucHVzaCggb2JqW2ldICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICAgIGFyeS5wdXNoKCBvYmogKTtcbiAgfVxuICByZXR1cm4gYXJ5O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpbWFnZXNMb2FkZWQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LCBFbGVtZW50LCBOb2RlTGlzdCwgU3RyaW5nfSBlbGVtXG4gKiBAcGFyYW0ge09iamVjdCBvciBGdW5jdGlvbn0gb3B0aW9ucyAtIGlmIGZ1bmN0aW9uLCB1c2UgYXMgY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQWx3YXlzIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApIHtcbiAgLy8gY29lcmNlIEltYWdlc0xvYWRlZCgpIHdpdGhvdXQgbmV3LCB0byBiZSBuZXcgSW1hZ2VzTG9hZGVkKClcbiAgaWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgSW1hZ2VzTG9hZGVkICkgKSB7XG4gICAgcmV0dXJuIG5ldyBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICk7XG4gIH1cbiAgLy8gdXNlIGVsZW0gYXMgc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW0gKTtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudHMgPSBtYWtlQXJyYXkoIGVsZW0gKTtcbiAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7XG5cbiAgaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PSAnZnVuY3Rpb24nICkge1xuICAgIG9uQWx3YXlzID0gb3B0aW9ucztcbiAgfSBlbHNlIHtcbiAgICBleHRlbmQoIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xuICB9XG5cbiAgaWYgKCBvbkFsd2F5cyApIHtcbiAgICB0aGlzLm9uKCAnYWx3YXlzJywgb25BbHdheXMgKTtcbiAgfVxuXG4gIHRoaXMuZ2V0SW1hZ2VzKCk7XG5cbiAgaWYgKCAkICkge1xuICAgIC8vIGFkZCBqUXVlcnkgRGVmZXJyZWQgb2JqZWN0XG4gICAgdGhpcy5qcURlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKTtcbiAgfVxuXG4gIC8vIEhBQ0sgY2hlY2sgYXN5bmMgdG8gYWxsb3cgdGltZSB0byBiaW5kIGxpc3RlbmVyc1xuICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNoZWNrKCk7XG4gIH0uYmluZCggdGhpcyApKTtcbn1cblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5vcHRpb25zID0ge307XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1hZ2VzID0gW107XG5cbiAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGFuIGl0ZW0gc2VsZWN0b3JcbiAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKCB0aGlzLmFkZEVsZW1lbnRJbWFnZXMsIHRoaXMgKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBlbGVtZW50XG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaWx0ZXIgc2libGluZ3NcbiAgaWYgKCBlbGVtLm5vZGVOYW1lID09ICdJTUcnICkge1xuICAgIHRoaXMuYWRkSW1hZ2UoIGVsZW0gKTtcbiAgfVxuICAvLyBnZXQgYmFja2dyb3VuZCBpbWFnZSBvbiBlbGVtZW50XG4gIGlmICggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT09IHRydWUgKSB7XG4gICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggZWxlbSApO1xuICB9XG5cbiAgLy8gZmluZCBjaGlsZHJlblxuICAvLyBubyBub24tZWxlbWVudCBub2RlcywgIzE0M1xuICB2YXIgbm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuICBpZiAoICFub2RlVHlwZSB8fCAhZWxlbWVudE5vZGVUeXBlc1sgbm9kZVR5cGUgXSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNoaWxkSW1ncyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCgnaW1nJyk7XG4gIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gIGZvciAoIHZhciBpPTA7IGkgPCBjaGlsZEltZ3MubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGltZyA9IGNoaWxkSW1nc1tpXTtcbiAgICB0aGlzLmFkZEltYWdlKCBpbWcgKTtcbiAgfVxuXG4gIC8vIGdldCBjaGlsZCBiYWNrZ3JvdW5kIGltYWdlc1xuICBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PSAnc3RyaW5nJyApIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kICk7XG4gICAgZm9yICggaT0wOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKysgKSB7XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGNoaWxkICk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgZWxlbWVudE5vZGVUeXBlcyA9IHtcbiAgMTogdHJ1ZSxcbiAgOTogdHJ1ZSxcbiAgMTE6IHRydWVcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICBpZiAoICFzdHlsZSApIHtcbiAgICAvLyBGaXJlZm94IHJldHVybnMgbnVsbCBpZiBpbiBhIGhpZGRlbiBpZnJhbWUgaHR0cHM6Ly9idWd6aWwubGEvNTQ4Mzk3XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGdldCB1cmwgaW5zaWRlIHVybChcIi4uLlwiKVxuICB2YXIgcmVVUkwgPSAvdXJsXFwoKFsnXCJdKT8oLio/KVxcMVxcKS9naTtcbiAgdmFyIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgd2hpbGUgKCBtYXRjaGVzICE9PSBudWxsICkge1xuICAgIHZhciB1cmwgPSBtYXRjaGVzICYmIG1hdGNoZXNbMl07XG4gICAgaWYgKCB1cmwgKSB7XG4gICAgICB0aGlzLmFkZEJhY2tncm91bmQoIHVybCwgZWxlbSApO1xuICAgIH1cbiAgICBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtJbWFnZX0gaW1nXG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkSW1hZ2UgPSBmdW5jdGlvbiggaW1nICkge1xuICB2YXIgbG9hZGluZ0ltYWdlID0gbmV3IExvYWRpbmdJbWFnZSggaW1nICk7XG4gIHRoaXMuaW1hZ2VzLnB1c2goIGxvYWRpbmdJbWFnZSApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRCYWNrZ3JvdW5kID0gZnVuY3Rpb24oIHVybCwgZWxlbSApIHtcbiAgdmFyIGJhY2tncm91bmQgPSBuZXcgQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gIHRoaXMuaW1hZ2VzLnB1c2goIGJhY2tncm91bmQgKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQgPSAwO1xuICB0aGlzLmhhc0FueUJyb2tlbiA9IGZhbHNlO1xuICAvLyBjb21wbGV0ZSBpZiBubyBpbWFnZXNcbiAgaWYgKCAhdGhpcy5pbWFnZXMubGVuZ3RoICkge1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2dyZXNzKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcbiAgICAvLyBIQUNLIC0gQ2hyb21lIHRyaWdnZXJzIGV2ZW50IGJlZm9yZSBvYmplY3QgcHJvcGVydGllcyBoYXZlIGNoYW5nZWQuICM4M1xuICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgX3RoaXMucHJvZ3Jlc3MoIGltYWdlLCBlbGVtLCBtZXNzYWdlICk7XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLmltYWdlcy5mb3JFYWNoKCBmdW5jdGlvbiggbG9hZGluZ0ltYWdlICkge1xuICAgIGxvYWRpbmdJbWFnZS5vbmNlKCAncHJvZ3Jlc3MnLCBvblByb2dyZXNzICk7XG4gICAgbG9hZGluZ0ltYWdlLmNoZWNrKCk7XG4gIH0pO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQrKztcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSB0aGlzLmhhc0FueUJyb2tlbiB8fCAhaW1hZ2UuaXNMb2FkZWQ7XG4gIC8vIHByb2dyZXNzIGV2ZW50XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGltYWdlLCBlbGVtIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgJiYgdGhpcy5qcURlZmVycmVkLm5vdGlmeSApIHtcbiAgICB0aGlzLmpxRGVmZXJyZWQubm90aWZ5KCB0aGlzLCBpbWFnZSApO1xuICB9XG4gIC8vIGNoZWNrIGlmIGNvbXBsZXRlZFxuICBpZiAoIHRoaXMucHJvZ3Jlc3NlZENvdW50ID09IHRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gIH1cblxuICBpZiAoIHRoaXMub3B0aW9ucy5kZWJ1ZyAmJiBjb25zb2xlICkge1xuICAgIGNvbnNvbGUubG9nKCAncHJvZ3Jlc3M6ICcgKyBtZXNzYWdlLCBpbWFnZSwgZWxlbSApO1xuICB9XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBldmVudE5hbWUgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdmYWlsJyA6ICdkb25lJztcbiAgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0RXZlbnQoIGV2ZW50TmFtZSwgWyB0aGlzIF0gKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdhbHdheXMnLCBbIHRoaXMgXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCApIHtcbiAgICB2YXIganFNZXRob2QgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdyZWplY3QnIDogJ3Jlc29sdmUnO1xuICAgIHRoaXMuanFEZWZlcnJlZFsganFNZXRob2QgXSggdGhpcyApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gTG9hZGluZ0ltYWdlKCBpbWcgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xufVxuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIElmIGNvbXBsZXRlIGlzIHRydWUgYW5kIGJyb3dzZXIgc3VwcG9ydHMgbmF0dXJhbCBzaXplcyxcbiAgLy8gdHJ5IHRvIGNoZWNrIGZvciBpbWFnZSBzdGF0dXMgbWFudWFsbHkuXG4gIHZhciBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIC8vIHJlcG9ydCBiYXNlZCBvbiBuYXR1cmFsV2lkdGhcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiBub25lIG9mIHRoZSBjaGVja3MgYWJvdmUgbWF0Y2hlZCwgc2ltdWxhdGUgbG9hZGluZyBvbiBkZXRhY2hlZCBlbGVtZW50LlxuICB0aGlzLnByb3h5SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICAvLyBiaW5kIHRvIGltYWdlIGFzIHdlbGwgZm9yIEZpcmVmb3guICMxOTFcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLnNyYyA9IHRoaXMuaW1nLnNyYztcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuZ2V0SXNJbWFnZUNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmltZy5jb21wbGV0ZSAmJiB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IHVuZGVmaW5lZDtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCB0aGlzLmltZywgbWVzc2FnZSBdICk7XG59O1xuXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cblxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbmZpcm0oIHRydWUsICdvbmxvYWQnICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCBmYWxzZSwgJ29uZXJyb3InICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBCYWNrZ3JvdW5kIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIEJhY2tncm91bmQoIHVybCwgZWxlbWVudCApIHtcbiAgdGhpcy51cmwgPSB1cmw7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XG59XG5cbi8vIGluaGVyaXQgTG9hZGluZ0ltYWdlIHByb3RvdHlwZVxuQmFja2dyb3VuZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMb2FkaW5nSW1hZ2UucHJvdG90eXBlICk7XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnNyYyA9IHRoaXMudXJsO1xuICAvLyBjaGVjayBpZiBpbWFnZSBpcyBhbHJlYWR5IGNvbXBsZXRlXG4gIHZhciBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIHRoaXMuY29uZmlybSggdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSAwLCAnbmF0dXJhbFdpZHRoJyApO1xuICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gIH1cbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCB0aGlzLmVsZW1lbnQsIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luID0gZnVuY3Rpb24oIGpRdWVyeSApIHtcbiAgalF1ZXJ5ID0galF1ZXJ5IHx8IHdpbmRvdy5qUXVlcnk7XG4gIGlmICggIWpRdWVyeSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2V0IGxvY2FsIHZhcmlhYmxlXG4gICQgPSBqUXVlcnk7XG4gIC8vICQoKS5pbWFnZXNMb2FkZWQoKVxuICAkLmZuLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCBvcHRpb25zLCBjYWxsYmFjayApIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgSW1hZ2VzTG9hZGVkKCB0aGlzLCBvcHRpb25zLCBjYWxsYmFjayApO1xuICAgIHJldHVybiBpbnN0YW5jZS5qcURlZmVycmVkLnByb21pc2UoICQodGhpcykgKTtcbiAgfTtcbn07XG4vLyB0cnkgbWFraW5nIHBsdWdpblxuSW1hZ2VzTG9hZGVkLm1ha2VKUXVlcnlQbHVnaW4oKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnJldHVybiBJbWFnZXNMb2FkZWQ7XG5cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaW1hZ2VzbG9hZGVkL2ltYWdlc2xvYWRlZC5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvaW1hZ2VzbG9hZGVkL2ltYWdlc2xvYWRlZC5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMi4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNy0wMy0yMFQxODo1OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMi4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdFx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdH1cblxuXHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggXCI+dGJvZHlcIiwgZWxlbSApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXG4vLyBhIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eS5cbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcblx0aWYgKCAhcmV0ICkge1xuXHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGksXG5cdFx0dmFsID0gMDtcblxuXHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0aWYgKCBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdGkgPSA0O1xuXG5cdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0fSBlbHNlIHtcblx0XHRpID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdGlmICggdmFsID09PSBcImF1dG9cIiApIHtcblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICkgXTtcblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jLCBkb2NFbGVtLCByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdHdpbiA9IGRvYy5kZWZhdWx0VmlldztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0bGVmdDogcGFyZW50T2Zmc2V0LmxlZnQgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKlxuICAgICBfIF8gICAgICBfICAgICAgIF9cbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xuICAgICAgICAgICAgICAgICAgIHxfXy9cblxuIFZlcnNpb246IDEuNi4wXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcblxuICovXG4vKiBnbG9iYWwgd2luZG93LCBkb2N1bWVudCwgZGVmaW5lLCBqUXVlcnksIHNldEludGVydmFsLCBjbGVhckludGVydmFsICovXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICB9XG5cbn0oZnVuY3Rpb24oJCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgU2xpY2sgPSB3aW5kb3cuU2xpY2sgfHwge307XG5cbiAgICBTbGljayA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgaW5zdGFuY2VVaWQgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIFNsaWNrKGVsZW1lbnQsIHNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIHZhciBfID0gdGhpcywgZGF0YVNldHRpbmdzO1xuXG4gICAgICAgICAgICBfLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFwcGVuZEFycm93czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcHBlbmREb3RzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhc05hdkZvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgY2xhc3M9XCJzbGljay1wcmV2XCIgYXJpYS1sYWJlbD1cIlByZXZpb3VzXCIgdGFiaW5kZXg9XCIwXCIgcm9sZT1cImJ1dHRvblwiPlByZXZpb3VzPC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBuZXh0QXJyb3c6ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0YWJpbmRleD1cIjBcIiByb2xlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxuICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICdlYXNlJyxcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uKHNsaWRlciwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIHJvbGU9XCJidXR0b25cIiB0YWJpbmRleD1cIjBcIiAvPicpLnRleHQoaSArIDEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgICAgICAgICAgZG90c0NsYXNzOiAnc2xpY2stZG90cycsXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiAwLjM1LFxuICAgICAgICAgICAgICAgIGZhZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBsYXp5TG9hZDogJ29uZGVtYW5kJyxcbiAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Gb2N1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRG90c0hvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXNwb25kVG86ICd3aW5kb3cnLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IG51bGwsXG4gICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICBydGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlOiAnJyxcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgICAgICAgICAgc3dpcGU6IHRydWUsXG4gICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgdG91Y2hUaHJlc2hvbGQ6IDUsXG4gICAgICAgICAgICAgICAgdXNlQ1NTOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVRyYW5zZm9ybTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWxTd2lwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YWl0Rm9yQW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEwMDBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF8uaW5pdGlhbHMgPSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b1BsYXlUaW1lcjogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50RGlyZWN0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IDEsXG4gICAgICAgICAgICAgICAgJGRvdHM6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9hZEluZGV4OiAwLFxuICAgICAgICAgICAgICAgICRuZXh0QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgJHByZXZBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRlV2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlVHJhY2s6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlczogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgJGxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgdG91Y2hPYmplY3Q6IHt9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnNsaWNrZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzKTtcblxuICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzID0gW107XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5ncyA9IFtdO1xuICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5oaWRkZW4gPSAnaGlkZGVuJztcbiAgICAgICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIF8ucG9zaXRpb25Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gbnVsbDtcbiAgICAgICAgICAgIF8ucm93Q291bnQgPSAxO1xuICAgICAgICAgICAgXy5zaG91bGRDbGljayA9IHRydWU7XG4gICAgICAgICAgICBfLiRzbGlkZXIgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9IDA7XG4gICAgICAgICAgICBfLndpbmRvd1RpbWVyID0gbnVsbDtcblxuICAgICAgICAgICAgZGF0YVNldHRpbmdzID0gJChlbGVtZW50KS5kYXRhKCdzbGljaycpIHx8IHt9O1xuXG4gICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5kZWZhdWx0cywgc2V0dGluZ3MsIGRhdGFTZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcblxuICAgICAgICAgICAgXy5vcmlnaW5hbFNldHRpbmdzID0gXy5vcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICdtb3pIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5hdXRvUGxheSA9ICQucHJveHkoXy5hdXRvUGxheSwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5Q2xlYXIgPSAkLnByb3h5KF8uYXV0b1BsYXlDbGVhciwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlID0gJC5wcm94eShfLmNoYW5nZVNsaWRlLCBfKTtcbiAgICAgICAgICAgIF8uY2xpY2tIYW5kbGVyID0gJC5wcm94eShfLmNsaWNrSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNldFBvc2l0aW9uID0gJC5wcm94eShfLnNldFBvc2l0aW9uLCBfKTtcbiAgICAgICAgICAgIF8uc3dpcGVIYW5kbGVyID0gJC5wcm94eShfLnN3aXBlSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8ua2V5SGFuZGxlciA9ICQucHJveHkoXy5rZXlIYW5kbGVyLCBfKTtcblxuICAgICAgICAgICAgXy5pbnN0YW5jZVVpZCA9IGluc3RhbmNlVWlkKys7XG5cbiAgICAgICAgICAgIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG4gICAgICAgICAgICAvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAobXVzdCBzdGFydCB3aXRoIDwpXG4gICAgICAgICAgICAvLyBFeHRyYWN0ZWQgZnJvbSBqUXVlcnkgdjEuMTEgc291cmNlXG4gICAgICAgICAgICBfLmh0bWxFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvO1xuXG5cbiAgICAgICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuICAgICAgICAgICAgXy5pbml0KHRydWUpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gU2xpY2s7XG5cbiAgICB9KCkpO1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFjdGl2YXRlQURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1hY3RpdmUnKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFkZFNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQWRkID0gZnVuY3Rpb24obWFya3VwLCBpbmRleCwgYWRkQmVmb3JlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFkZEJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCB8fCAoaW5kZXggPj0gXy5zbGlkZUNvdW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBfLiRzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QmVmb3JlKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QWZ0ZXIoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWRkQmVmb3JlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbih0YXJnZXRMZWZ0LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBhbmltUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAtdGFyZ2V0TGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gLShfLmN1cnJlbnRMZWZ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxuICAgICAgICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBfLm9wdGlvbnMuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24obm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBNYXRoLmNlaWwobm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKDBweCwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSBNYXRoLmNlaWwodGFyZ2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHRhcmdldExlZnQgKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZUYXJnZXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8ub3B0aW9ucy5hc05hdkZvcjtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICYmIGFzTmF2Rm9yICE9PSBudWxsICkge1xuICAgICAgICAgICAgYXNOYXZGb3IgPSAkKGFzTmF2Rm9yKS5ub3QoXy4kc2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc05hdkZvcjtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXNOYXZGb3IgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5nZXROYXZUYXJnZXQoKTtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICE9PSBudWxsICYmIHR5cGVvZiBhc05hdkZvciA9PT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBhc05hdkZvci5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLnNsaWNrKCdnZXRTbGljaycpO1xuICAgICAgICAgICAgICAgIGlmKCF0YXJnZXQudW5zbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zbGlkZUhhbmRsZXIoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSBfLnRyYW5zZm9ybVR5cGUgKyAnICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICdvcGFjaXR5ICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5VGltZXIgPSBzZXRJbnRlcnZhbCggXy5hdXRvUGxheUl0ZXJhdG9yLCBfLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uYXV0b1BsYXlUaW1lcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgaWYgKCAhXy5wYXVzZWQgJiYgIV8uaW50ZXJydXB0ZWQgJiYgIV8uZm9jdXNzZWQgKSB7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggXy5kaXJlY3Rpb24gPT09IDEgJiYgKCBfLmN1cnJlbnRTbGlkZSArIDEgKSA9PT0gKCBfLnNsaWRlQ291bnQgLSAxICkpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBfLmN1cnJlbnRTbGlkZSAtIDEgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVUbyApO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyA9ICQoXy5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgPSAkKF8ub3B0aW9ucy5uZXh0QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuXG4gICAgICAgICAgICBpZiggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5wcmVwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGQoIF8uJG5leHRBcnJvdyApXG5cbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIGRvdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgICAgICBkb3QgPSAkKCc8dWwgLz4nKS5hZGRDbGFzcyhfLm9wdGlvbnMuZG90c0NsYXNzKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSBfLmdldERvdENvdW50KCk7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGRvdC5hcHBlbmQoJCgnPGxpIC8+JykuYXBwZW5kKF8ub3B0aW9ucy5jdXN0b21QYWdpbmcuY2FsbCh0aGlzLCBfLCBpKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRkb3RzID0gZG90LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmREb3RzKTtcblxuICAgICAgICAgICAgXy4kZG90cy5maW5kKCdsaScpLmZpcnN0KCkuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZE91dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCBfLm9wdGlvbnMuc2xpZGUgKyAnOm5vdCguc2xpY2stY2xvbmVkKScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KVxuICAgICAgICAgICAgICAgIC5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnLCAkKGVsZW1lbnQpLmF0dHIoJ3N0eWxlJykgfHwgJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2sgPSAoXy5zbGlkZUNvdW50ID09PSAwKSA/XG4gICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oXy4kc2xpZGVyKSA6XG4gICAgICAgICAgICBfLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpO1xuXG4gICAgICAgIF8uJGxpc3QgPSBfLiRzbGlkZVRyYWNrLndyYXAoXG4gICAgICAgICAgICAnPGRpdiBhcmlhLWxpdmU9XCJwb2xpdGVcIiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCk7XG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKCdvcGFjaXR5JywgMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlIHx8IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlcikubm90KCdbc3JjXScpLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG5cbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuXG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG5cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5hZGRDbGFzcygnZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBhLCBiLCBjLCBuZXdTbGlkZXMsIG51bU9mU2xpZGVzLCBvcmlnaW5hbFNsaWRlcyxzbGlkZXNQZXJTZWN0aW9uO1xuXG4gICAgICAgIG5ld1NsaWRlcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXIuY2hpbGRyZW4oKTtcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDEpIHtcblxuICAgICAgICAgICAgc2xpZGVzUGVyU2VjdGlvbiA9IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cgKiBfLm9wdGlvbnMucm93cztcbiAgICAgICAgICAgIG51bU9mU2xpZGVzID0gTWF0aC5jZWlsKFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLmxlbmd0aCAvIHNsaWRlc1BlclNlY3Rpb25cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvcihhID0gMDsgYSA8IG51bU9mU2xpZGVzOyBhKyspe1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGZvcihiID0gMDsgYiA8IF8ub3B0aW9ucy5yb3dzOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IoYyA9IDA7IGMgPCBfLm9wdGlvbnMuc2xpZGVzUGVyUm93OyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAoYSAqIHNsaWRlc1BlclNlY3Rpb24gKyAoKGIgKiBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArIGMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2xpZGVzLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG5ld1NsaWRlcyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzooMTAwIC8gXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyAnJScsXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uKGluaXRpYWwsIGZvcmNlVXBkYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtwb2ludCwgdGFyZ2V0QnJlYWtwb2ludCwgcmVzcG9uZFRvV2lkdGgsIHRyaWdnZXJCcmVha3BvaW50ID0gZmFsc2U7XG4gICAgICAgIHZhciBzbGlkZXJXaWR0aCA9IF8uJHNsaWRlci53aWR0aCgpO1xuICAgICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCAkKHdpbmRvdykud2lkdGgoKTtcblxuICAgICAgICBpZiAoXy5yZXNwb25kVG8gPT09ICd3aW5kb3cnKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHdpbmRvd1dpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnc2xpZGVyJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBzbGlkZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ21pbicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gTWF0aC5taW4od2luZG93V2lkdGgsIHNsaWRlcldpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnJlc3BvbnNpdmUgJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA+IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBfLmFjdGl2ZUJyZWFrcG9pbnQgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9IF8ub3JpZ2luYWxTZXR0aW5ncztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9ubHkgdHJpZ2dlciBicmVha3BvaW50cyBkdXJpbmcgYW4gYWN0dWFsIGJyZWFrLiBub3Qgb24gaW5pdGlhbGl6ZS5cbiAgICAgICAgICAgIGlmKCAhaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JyZWFrcG9pbnQnLCBbXywgdHJpZ2dlckJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGFuZ2VTbGlkZSA9IGZ1bmN0aW9uKGV2ZW50LCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICAgICAgaW5kZXhPZmZzZXQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQ7XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIGEgbGluaywgcHJldmVudCBkZWZhdWx0IGFjdGlvbi5cbiAgICAgICAgaWYoJHRhcmdldC5pcygnYScpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG5vdCB0aGUgPGxpPiBlbGVtZW50IChpZTogYSBjaGlsZCksIGZpbmQgdGhlIDxsaT4uXG4gICAgICAgIGlmKCEkdGFyZ2V0LmlzKCdsaScpKSB7XG4gICAgICAgICAgICAkdGFyZ2V0ID0gJHRhcmdldC5jbG9zZXN0KCdsaScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5ldmVuT2Zmc2V0ID0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCk7XG4gICAgICAgIGluZGV4T2Zmc2V0ID0gdW5ldmVuT2Zmc2V0ID8gMCA6IChfLnNsaWRlQ291bnQgLSBfLmN1cnJlbnRTbGlkZSkgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLm1lc3NhZ2UpIHtcblxuICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnaW5kZXgnOlxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRhdGEuaW5kZXggPT09IDAgPyAwIDpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmNoZWNrTmF2aWdhYmxlKGluZGV4KSwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmNoaWxkcmVuKCkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG5hdmlnYWJsZXMsIHByZXZOYXZpZ2FibGU7XG5cbiAgICAgICAgbmF2aWdhYmxlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpO1xuICAgICAgICBwcmV2TmF2aWdhYmxlID0gMDtcbiAgICAgICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IG5hdmlnYWJsZXNbbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyAmJiBfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9mZignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub2ZmKF8udmlzaWJpbGl0eUNoYW5nZSwgXy52aXNpYmlsaXR5KTtcblxuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5vcmllbnRhdGlvbkNoYW5nZSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnJlc2l6ZSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vZmYoJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ3JlYWR5LnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBvcmlnaW5hbFNsaWRlcztcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDEpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQob3JpZ2luYWxTbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLnNob3VsZENsaWNrID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKHJlZnJlc2gpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgIF8uY2xlYW5VcEV2ZW50cygpO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLmRldGFjaCgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5wcmV2QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLm5leHRBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChfLiRzbGlkZXMpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zbGljay1pbmRleCcpXG4gICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJGxpc3QuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hcHBlbmQoXy4kc2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uY2xlYW5VcFJvd3MoKTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgXy51bnNsaWNrZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmKCFyZWZyZXNoKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZGVzdHJveScsIFtfXSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJyc7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGUgPSBmdW5jdGlvbihzbGlkZUluZGV4LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZU91dCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGZpbHRlciAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5maWx0ZXIoZmlsdGVyKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXJcbiAgICAgICAgICAgIC5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKVxuICAgICAgICAgICAgLm9uKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJyxcbiAgICAgICAgICAgICAgICAnKjpub3QoLnNsaWNrLWFycm93KScsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyICRzZiA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnBhdXNlT25Gb2N1cyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb2N1c3NlZCA9ICRzZi5pcygnOmZvY3VzJyk7XG4gICAgICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0Q3VycmVudCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgcmV0dXJuIF8uY3VycmVudFNsaWRlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXREb3RDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgYnJlYWtQb2ludCA9IDA7XG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHBhZ2VyUXR5ID0gMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2UgaWYoIV8ub3B0aW9ucy5hc05hdkZvcikge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSAxICsgTWF0aC5jZWlsKChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYWdlclF0eSAtIDE7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldExlZnQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgIHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwLFxuICAgICAgICAgICAgdGFyZ2V0U2xpZGU7XG5cbiAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKF8uc2xpZGVXaWR0aCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogLTE7XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAodmVydGljYWxIZWlnaHQgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID4gXy5zbGlkZUNvdW50ICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiBfLnNsaWRlV2lkdGg7XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiB2ZXJ0aWNhbEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIC0gXy5zbGlkZVdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIF8uc2xpZGVXaWR0aCkgKiAtMSkgKyBfLnNsaWRlT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xKSArIHZlcnRpY2FsT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ICs9IChfLiRsaXN0LndpZHRoKCkgLSB0YXJnZXRTbGlkZS5vdXRlcldpZHRoKCkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRMZWZ0O1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRPcHRpb24gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHZXRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF8ub3B0aW9uc1tvcHRpb25dO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIG1heDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgY291bnRlciA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50ICogMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgbWF4KSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goYnJlYWtQb2ludCk7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWRlQ291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQsIHN3aXBlZFNsaWRlLCBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgPyBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSA6IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLXNsaWRlJykuZWFjaChmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0TGVmdCAtIGNlbnRlck9mZnNldCArICgkKHNsaWRlKS5vdXRlcldpZHRoKCkgLyAyKSA+IChfLnN3aXBlTGVmdCAqIC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCA9IE1hdGguYWJzKCQoc3dpcGVkU2xpZGUpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSAtIF8uY3VycmVudFNsaWRlKSB8fCAxO1xuXG4gICAgICAgICAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdvVG8gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHb1RvID0gZnVuY3Rpb24oc2xpZGUsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHBhcnNlSW50KHNsaWRlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbihjcmVhdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoISQoXy4kc2xpZGVyKS5oYXNDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKSkge1xuXG4gICAgICAgICAgICAkKF8uJHNsaWRlcikuYWRkQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG5cbiAgICAgICAgICAgIF8uYnVpbGRSb3dzKCk7XG4gICAgICAgICAgICBfLmJ1aWxkT3V0KCk7XG4gICAgICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgICAgICBfLnN0YXJ0TG9hZCgpO1xuICAgICAgICAgICAgXy5sb2FkU2xpZGVyKCk7XG4gICAgICAgICAgICBfLmluaXRpYWxpemVFdmVudHMoKTtcbiAgICAgICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKHRydWUpO1xuICAgICAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyZWF0aW9uKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignaW5pdCcsIFtfXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgXy4kc2xpZGVzLmFkZChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmF0dHIoJ3JvbGUnLCAnbGlzdGJveCcpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5ub3QoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAncm9sZSc6ICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpICsgJydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXy4kZG90cy5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3ByZXNlbnRhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogJ2ZhbHNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAnbmF2aWdhdGlvbicgKyBfLmluc3RhbmNlVWlkICsgaSArICcnLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIGkgKyAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZmlyc3QoKS5hdHRyKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKS5lbmQoKVxuICAgICAgICAgICAgICAgIC5maW5kKCdidXR0b24nKS5hdHRyKCdyb2xlJywgJ2J1dHRvbicpLmVuZCgpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJ2RpdicpLmF0dHIoJ3JvbGUnLCAndG9vbGJhcicpO1xuICAgICAgICB9XG4gICAgICAgIF8uYWN0aXZhdGVBREEoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFycm93RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdERvdEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKS5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4J1xuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8ub3B0aW9ucy5wYXVzZU9uRG90c0hvdmVyID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5wYXVzZU9uSG92ZXIgKSB7XG5cbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcblxuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3N0YXJ0J1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdtb3ZlJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKF8udmlzaWJpbGl0eUNoYW5nZSwgJC5wcm94eShfLnZpc2liaWxpdHksIF8pKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vbignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5vcmllbnRhdGlvbkNoYW5nZSwgXykpO1xuXG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ucmVzaXplLCBfKSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vbignZHJhZ3N0YXJ0JywgXy5wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3JlYWR5LnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFVJID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnNob3coKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUua2V5SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICAgLy9Eb250IHNsaWRlIGlmIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZSBmb3JtIGZpZWxkcyBhbmQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZFxuICAgICAgICBpZighZXZlbnQudGFyZ2V0LnRhZ05hbWUubWF0Y2goJ1RFWFRBUkVBfElOUFVUfFNFTEVDVCcpKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzcgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICduZXh0JyA6ICAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzkgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICdwcmV2aW91cycgOiAnbmV4dCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgbG9hZFJhbmdlLCBjbG9uZVJhbmdlLCByYW5nZVN0YXJ0LCByYW5nZUVuZDtcblxuICAgICAgICBmdW5jdGlvbiBsb2FkSW1hZ2VzKGltYWdlc1Njb3BlKSB7XG5cbiAgICAgICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgaW1hZ2VzU2NvcGUpLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNvdXJjZSA9ICQodGhpcykuYXR0cignZGF0YS1sYXp5JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAwIH0sIDEwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGltYWdlU291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDEgfSwgMjAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgW18sIGltYWdlLCBpbWFnZVNvdXJjZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLmN1cnJlbnRTbGlkZSArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gTWF0aC5tYXgoMCwgXy5jdXJyZW50U2xpZGUgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSAyICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkgKyBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgXy5jdXJyZW50U2xpZGUgOiBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIHJhbmdlRW5kID0gTWF0aC5jZWlsKHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZVN0YXJ0ID4gMCkgcmFuZ2VTdGFydC0tO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZUVuZCA8PSBfLnNsaWRlQ291bnQpIHJhbmdlRW5kKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJykuc2xpY2UocmFuZ2VTdGFydCwgcmFuZ2VFbmQpO1xuICAgICAgICBsb2FkSW1hZ2VzKGxvYWRSYW5nZSk7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZSgwLCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMSk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxvYWRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5pbml0VUkoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAncHJvZ3Jlc3NpdmUnKSB7XG4gICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5uZXh0ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrTmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGF1c2UgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQYXVzZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcbiAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wbGF5ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIF8ub3B0aW9ucy5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wb3N0U2xpZGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIV8udW5zbGlja2VkICkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWZ0ZXJDaGFuZ2UnLCBbXywgaW5kZXhdKTtcblxuICAgICAgICAgICAgXy5hbmltYXRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUHJldiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZCA9IGZ1bmN0aW9uKCB0cnlDb3VudCApIHtcblxuICAgICAgICB0cnlDb3VudCA9IHRyeUNvdW50IHx8IDE7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJGltZ3NUb0xvYWQgPSAkKCAnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIgKSxcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgaW1hZ2VTb3VyY2UsXG4gICAgICAgICAgICBpbWFnZVRvTG9hZDtcblxuICAgICAgICBpZiAoICRpbWdzVG9Mb2FkLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgaW1hZ2UgPSAkaW1nc1RvTG9hZC5maXJzdCgpO1xuICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSBpbWFnZS5hdHRyKCdkYXRhLWxhenknKTtcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBpbWFnZVNvdXJjZSApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenknKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcbiAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0cnlDb3VudCA8IDMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIHRyeSB0byBsb2FkIHRoZSBpbWFnZSAzIHRpbWVzLFxuICAgICAgICAgICAgICAgICAgICAgKiBsZWF2ZSBhIHNsaWdodCBkZWxheSBzbyB3ZSBkb24ndCBnZXRcbiAgICAgICAgICAgICAgICAgICAgICogc2VydmVycyBibG9ja2luZyB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCB0cnlDb3VudCArIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FsbEltYWdlc0xvYWRlZCcsIFsgXyBdKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiggaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgY3VycmVudFNsaWRlLCBsYXN0VmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuXG4gICAgICAgIC8vIGluIG5vbi1pbmZpbml0ZSBzbGlkZXJzLCB3ZSBkb24ndCB3YW50IHRvIGdvIHBhc3QgdGhlXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICAgICAgaWYoICFfLm9wdGlvbnMuaW5maW5pdGUgJiYgKCBfLmN1cnJlbnRTbGlkZSA+IGxhc3RWaXNpYmxlSW5kZXggKSkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbGVzcyBzbGlkZXMgdGhhbiB0byBzaG93LCBnbyB0byBzdGFydC5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcblxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG5cbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG5cbiAgICAgICAgXy5pbml0KCk7XG5cbiAgICAgICAgaWYoICFpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGJyZWFrcG9pbnQsIGN1cnJlbnRCcmVha3BvaW50LCBsLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZVNldHRpbmdzID0gXy5vcHRpb25zLnJlc3BvbnNpdmUgfHwgbnVsbDtcblxuICAgICAgICBpZiAoICQudHlwZShyZXNwb25zaXZlU2V0dGluZ3MpID09PSAnYXJyYXknICYmIHJlc3BvbnNpdmVTZXR0aW5ncy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcblxuICAgICAgICAgICAgZm9yICggYnJlYWtwb2ludCBpbiByZXNwb25zaXZlU2V0dGluZ3MgKSB7XG5cbiAgICAgICAgICAgICAgICBsID0gXy5icmVha3BvaW50cy5sZW5ndGgtMTtcbiAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5icmVha3BvaW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNpdmVTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgYnJlYWtwb2ludHMgYW5kIGN1dCBvdXQgYW55IGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZXMgd2l0aCB0aGUgc2FtZSBicmVha3BvaW50IG51bWJlciwgd2UgZG9uJ3Qgd2FudCBkdXBlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLmJyZWFrcG9pbnRzW2xdICYmIF8uYnJlYWtwb2ludHNbbF0gPT09IGN1cnJlbnRCcmVha3BvaW50ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc3BsaWNlKGwsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnB1c2goY3VycmVudEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tjdXJyZW50QnJlYWtwb2ludF0gPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uc2V0dGluZ3M7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCBfLm9wdGlvbnMubW9iaWxlRmlyc3QgKSA/IGEtYiA6IGItYTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVpbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlcyA9XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKF8ub3B0aW9ucy5zbGlkZSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50ICYmIF8uY3VycmVudFNsaWRlICE9PSAwKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcblxuICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZShmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICBfLnBhdXNlZCA9ICFfLm9wdGlvbnMuYXV0b3BsYXk7XG4gICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigncmVJbml0JywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSAhPT0gXy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF8ud2luZG93RGVsYXkpO1xuICAgICAgICAgICAgXy53aW5kb3dEZWxheSA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICAgICAgICAgIGlmKCAhXy51bnNsaWNrZWQgKSB7IF8uc2V0UG9zaXRpb24oKTsgfVxuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZW1vdmVTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1JlbW92ZSA9IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVCZWZvcmUsIHJlbW92ZUFsbCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZW1vdmVCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gMCA6IF8uc2xpZGVDb3VudCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IC0taW5kZXggOiBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPCAxIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IF8uc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHJlbW92ZUFsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmVxKGluZGV4KS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRDU1MgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIHgsIHk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gLXBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHggPSBfLnBvc2l0aW9uUHJvcCA9PSAnbGVmdCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuICAgICAgICB5ID0gXy5wb3NpdGlvblByb3AgPT0gJ3RvcCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuXG4gICAgICAgIHBvc2l0aW9uUHJvcHNbXy5wb3NpdGlvblByb3BdID0gcG9zaXRpb247XG5cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fTtcbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJywgJyArIHkgKyAnKSc7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHggKyAnLCAnICsgeSArICcsIDBweCknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldERpbWVuc2lvbnMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKCcwcHggJyArIF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kbGlzdC5oZWlnaHQoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5saXN0V2lkdGggPSBfLiRsaXN0LndpZHRoKCk7XG4gICAgICAgIF8ubGlzdEhlaWdodCA9IF8uJGxpc3QuaGVpZ2h0KCk7XG5cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSAmJiBfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCAvIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoKF8uc2xpZGVXaWR0aCAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcblxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKDUwMDAgKiBfLnNsaWRlQ291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoKTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suaGVpZ2h0KE1hdGguY2VpbCgoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCh0cnVlKSAtIF8uJHNsaWRlcy5maXJzdCgpLndpZHRoKCk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLndpZHRoKF8uc2xpZGVXaWR0aCAtIG9mZnNldCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEZhZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0O1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uc2xpZGVXaWR0aCAqIGluZGV4KSAqIC0xO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLmNzcyh7XG4gICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAxLFxuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuY3NzKCdoZWlnaHQnLCB0YXJnZXRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldE9wdGlvbiA9XG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWNrU2V0T3B0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFjY2VwdHMgYXJndW1lbnRzIGluIGZvcm1hdCBvZjpcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2luZ2xlIG9wdGlvbidzIHZhbHVlOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzZXQgb2YgcmVzcG9uc2l2ZSBvcHRpb25zOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsICdyZXNwb25zaXZlJywgW3t9LCAuLi5dLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIHVwZGF0aW5nIG11bHRpcGxlIHZhbHVlcyBhdCBvbmNlIChub3QgcmVzcG9uc2l2ZSlcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCB7ICdvcHRpb24nOiB2YWx1ZSwgLi4uIH0sIHJlZnJlc2ggKVxuICAgICAgICAgKi9cblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGwsIGl0ZW0sIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggPSBmYWxzZSwgdHlwZTtcblxuICAgICAgICBpZiggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ29iamVjdCcgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgdHlwZSA9ICdtdWx0aXBsZSc7XG5cbiAgICAgICAgfSBlbHNlIGlmICggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ3N0cmluZycgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgICAgIGlmICggYXJndW1lbnRzWzBdID09PSAncmVzcG9uc2l2ZScgJiYgJC50eXBlKCBhcmd1bWVudHNbMV0gKSA9PT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAncmVzcG9uc2l2ZSc7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzaW5nbGUnO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdHlwZSA9PT0gJ3NpbmdsZScgKSB7XG5cbiAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAnbXVsdGlwbGUnICkge1xuXG4gICAgICAgICAgICAkLmVhY2goIG9wdGlvbiAsIGZ1bmN0aW9uKCBvcHQsIHZhbCApIHtcblxuICAgICAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRdID0gdmFsO1xuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICdyZXNwb25zaXZlJyApIHtcblxuICAgICAgICAgICAgZm9yICggaXRlbSBpbiB2YWx1ZSApIHtcblxuICAgICAgICAgICAgICAgIGlmKCAkLnR5cGUoIF8ub3B0aW9ucy5yZXNwb25zaXZlICkgIT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgPSBbIHZhbHVlW2l0ZW1dIF07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGwgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIHJlc3BvbnNpdmUgb2JqZWN0IGFuZCBzcGxpY2Ugb3V0IGR1cGxpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucmVzcG9uc2l2ZVtsXS5icmVha3BvaW50ID09PSB2YWx1ZVtpdGVtXS5icmVha3BvaW50ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUuc3BsaWNlKGwsMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKCB2YWx1ZVtpdGVtXSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggcmVmcmVzaCApIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldERpbWVuc2lvbnMoKTtcblxuICAgICAgICBfLnNldEhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2V0Q1NTKF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zZXRGYWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc2V0UG9zaXRpb24nLCBbX10pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQcm9wcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG5cbiAgICAgICAgXy5wb3NpdGlvblByb3AgPSBfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgPyAndG9wJyA6ICdsZWZ0JztcblxuICAgICAgICBpZiAoXy5wb3NpdGlvblByb3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLldlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLk1velRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLm1zVHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnVzZUNTUyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZmFkZSApIHtcbiAgICAgICAgICAgIGlmICggdHlwZW9mIF8ub3B0aW9ucy56SW5kZXggPT09ICdudW1iZXInICkge1xuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMuekluZGV4IDwgMyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gXy5kZWZhdWx0cy56SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLk9UcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdPVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctby10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdPVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUuTW96VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnTW96VHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbW96LXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ01velRyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLk1velBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLndlYmtpdFRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3dlYmtpdFRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLXdlYmtpdC10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd3ZWJraXRUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ21zVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbXMtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnbXNUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUudHJhbnNmb3JtICE9PSB1bmRlZmluZWQgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd0cmFuc2l0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBfLnRyYW5zZm9ybXNFbmFibGVkID0gXy5vcHRpb25zLnVzZVRyYW5zZm9ybSAmJiAoXy5hbmltVHlwZSAhPT0gbnVsbCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSk7XG4gICAgfTtcblxuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0LCBhbGxTbGlkZXMsIGluZGV4T2Zmc2V0LCByZW1haW5kZXI7XG5cbiAgICAgICAgYWxsU2xpZGVzID0gXy4kc2xpZGVyXG4gICAgICAgICAgICAuZmluZCgnLnNsaWNrLXNsaWRlJylcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWN1cnJlbnQnKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBjZW50ZXJPZmZzZXQgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIDEpIC0gY2VudGVyT2Zmc2V0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXggLSBjZW50ZXJPZmZzZXQsIGluZGV4ICsgY2VudGVyT2Zmc2V0ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSBjZW50ZXJPZmZzZXQgKyAxLCBpbmRleE9mZnNldCArIGNlbnRlck9mZnNldCArIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBfLnNsaWRlQ291bnQgLSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4LCBpbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsU2xpZGVzLmxlbmd0aCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA9IF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXggOiBpbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAmJiAoXy5zbGlkZUNvdW50IC0gaW5kZXgpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSByZW1haW5kZXIpLCBpbmRleE9mZnNldCArIHJlbWFpbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCwgaW5kZXhPZmZzZXQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ29uZGVtYW5kJykge1xuICAgICAgICAgICAgXy5sYXp5TG9hZCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldHVwSW5maW5pdGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBzbGlkZUluZGV4LCBpbmZpbml0ZUNvdW50O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLmNlbnRlck1vZGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIHNsaWRlSW5kZXggPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBfLnNsaWRlQ291bnQ7IGkgPiAoXy5zbGlkZUNvdW50IC1cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQpOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5maW5pdGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2lkJywgJycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBmdW5jdGlvbiggdG9nZ2xlICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIXRvZ2dsZSApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBfLmludGVycnVwdGVkID0gdG9nZ2xlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPVxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmlzKCcuc2xpY2stc2xpZGUnKSA/XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpIDpcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xuXG4gICAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gMDtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoaW5kZXgpO1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2xpZGVIYW5kbGVyKGluZGV4KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2xpZGVIYW5kbGVyID0gZnVuY3Rpb24oaW5kZXgsIHN5bmMsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIHRhcmdldFNsaWRlLCBhbmltU2xpZGUsIG9sZFNsaWRlLCBzbGlkZUxlZnQsIHRhcmdldExlZnQgPSBudWxsLFxuICAgICAgICAgICAgXyA9IHRoaXMsIG5hdlRhcmdldDtcblxuICAgICAgICBzeW5jID0gc3luYyB8fCBmYWxzZTtcblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUgJiYgXy5vcHRpb25zLndhaXRGb3JBbmltYXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgJiYgXy5jdXJyZW50U2xpZGUgPT09IGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4O1xuICAgICAgICB0YXJnZXRMZWZ0ID0gXy5nZXRMZWZ0KHRhcmdldFNsaWRlKTtcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gXy5zd2lwZUxlZnQgPT09IG51bGwgPyBzbGlkZUxlZnQgOiBfLnN3aXBlTGVmdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IF8uZ2V0RG90Q291bnQoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgLSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50ICsgdGFyZ2V0U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGUgLSBfLnNsaWRlQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgW18sIF8uY3VycmVudFNsaWRlLCBhbmltU2xpZGVdKTtcblxuICAgICAgICBvbGRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGFuaW1TbGlkZTtcblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXNOYXZGb3IgKSB7XG5cbiAgICAgICAgICAgIG5hdlRhcmdldCA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBuYXZUYXJnZXQuc2xpY2soJ2dldFNsaWNrJyk7XG5cbiAgICAgICAgICAgIGlmICggbmF2VGFyZ2V0LnNsaWRlQ291bnQgPD0gbmF2VGFyZ2V0Lm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgICAgIG5hdlRhcmdldC5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGVPdXQob2xkU2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGUoYW5pbVNsaWRlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3RhcnRMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgeERpc3QsIHlEaXN0LCByLCBzd2lwZUFuZ2xlLCBfID0gdGhpcztcblxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xuICAgICAgICB5RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRZIC0gXy50b3VjaE9iamVjdC5jdXJZO1xuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuXG4gICAgICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDM1KSAmJiAoc3dpcGVBbmdsZSA8PSAxMzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlQ291bnQsXG4gICAgICAgICAgICBkaXJlY3Rpb247XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgIF8uc2hvdWxkQ2xpY2sgPSAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiAxMCApID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdlZGdlJywgW18sIF8uc3dpcGVEaXJlY3Rpb24oKSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+PSBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlICkge1xuXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoIGRpcmVjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiAhPSAndmVydGljYWwnICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlQ291bnQgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3N3aXBlJywgW18sIGRpcmVjdGlvbiBdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zdGFydFggIT09IF8udG91Y2hPYmplY3QuY3VyWCApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBfLmN1cnJlbnRTbGlkZSApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKChfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSB8fCAoJ29udG91Y2hlbmQnIGluIGRvY3VtZW50ICYmIF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gZmFsc2UgJiYgZXZlbnQudHlwZS5pbmRleE9mKCdtb3VzZScpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlTW92ZShldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGVkZ2VXYXNIaXQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1ckxlZnQsIHN3aXBlRGlyZWN0aW9uLCBzd2lwZUxlbmd0aCwgcG9zaXRpb25PZmZzZXQsIHRvdWNoZXM7XG5cbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clggLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWSAtIF8udG91Y2hPYmplY3Quc3RhcnRZLCAyKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVEaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKHN3aXBlRGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zaXRpb25PZmZzZXQgPSAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAxIDogLTEpICogKF8udG91Y2hPYmplY3QuY3VyWCA+IF8udG91Y2hPYmplY3Quc3RhcnRYID8gMSA6IC0xKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gXy50b3VjaE9iamVjdC5jdXJZID4gXy50b3VjaE9iamVjdC5zdGFydFkgPyAxIDogLTE7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aDtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKChfLmN1cnJlbnRTbGlkZSA9PT0gMCAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgfHwgKF8uY3VycmVudFNsaWRlID49IF8uZ2V0RG90Q291bnQoKSAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ2xlZnQnKSkge1xuICAgICAgICAgICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCAqIF8ub3B0aW9ucy5lZGdlRnJpY3Rpb247XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgKHN3aXBlTGVuZ3RoICogKF8uJGxpc3QuaGVpZ2h0KCkgLyBfLmxpc3RXaWR0aCkpICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgfHwgXy5vcHRpb25zLnRvdWNoTW92ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5zZXRDU1MoXy5zd2lwZUxlZnQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZVN0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0b3VjaGVzO1xuXG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ICE9PSAxIHx8IF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFggPSBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFkgPSBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLmRyYWdnaW5nID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tVbmZpbHRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kc2xpZGVzQ2FjaGUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5yZW1vdmUoKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRwcmV2QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kbmV4dEFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgICAgICAgLmNzcygnd2lkdGgnLCAnJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuc2xpY2sgPSBmdW5jdGlvbihmcm9tQnJlYWtwb2ludCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3Vuc2xpY2snLCBbXywgZnJvbUJyZWFrcG9pbnRdKTtcbiAgICAgICAgXy5kZXN0cm95KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZUFycm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiZcbiAgICAgICAgICAgIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiZcbiAgICAgICAgICAgICFfLm9wdGlvbnMuaW5maW5pdGUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSAxICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIGlmICggZG9jdW1lbnRbXy5oaWRkZW5dICkge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgJC5mbi5zbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBvcHQgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGwgPSBfLmxlbmd0aCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICByZXQ7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0ID09ICdvYmplY3QnIHx8IHR5cGVvZiBvcHQgPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgX1tpXS5zbGljayA9IG5ldyBTbGljayhfW2ldLCBvcHQpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldCA9IF9baV0uc2xpY2tbb3B0XS5hcHBseShfW2ldLnNsaWNrLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0ICE9ICd1bmRlZmluZWQnKSByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfO1xuICAgIH07XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9zbGljay1jYXJvdXNlbC9zbGljay9zbGljay5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXHJcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyohXG4gKiBFdmVudEVtaXR0ZXIgdjUuMi4xIC0gZ2l0LmlvL2VlXG4gKiBVbmxpY2Vuc2UgLSBodHRwOi8vdW5saWNlbnNlLm9yZy9cbiAqIE9saXZlciBDYWxkd2VsbCAtIGh0dHA6Ly9vbGkubWUudWsvXG4gKiBAcHJlc2VydmVcbiAqL1xuXG47KGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAgICogQ2xhc3MgZm9yIG1hbmFnaW5nIGV2ZW50cy5cbiAgICAgKiBDYW4gYmUgZXh0ZW5kZWQgdG8gcHJvdmlkZSBldmVudCBmdW5jdGlvbmFsaXR5IGluIG90aGVyIGNsYXNzZXMuXG4gICAgICpcbiAgICAgKiBAY2xhc3MgRXZlbnRFbWl0dGVyIE1hbmFnZXMgZXZlbnQgcmVnaXN0ZXJpbmcgYW5kIGVtaXR0aW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHt9XG5cbiAgICAvLyBTaG9ydGN1dHMgdG8gaW1wcm92ZSBzcGVlZCBhbmQgc2l6ZVxuICAgIHZhciBwcm90byA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGU7XG4gICAgdmFyIG9yaWdpbmFsR2xvYmFsVmFsdWUgPSBleHBvcnRzLkV2ZW50RW1pdHRlcjtcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgbGlzdGVuZXIgZm9yIHRoZSBldmVudCBpbiBpdHMgc3RvcmFnZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gbGlzdGVuZXJzIEFycmF5IG9mIGxpc3RlbmVycyB0byBzZWFyY2ggdGhyb3VnaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gbG9vayBmb3IuXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBJbmRleCBvZiB0aGUgc3BlY2lmaWVkIGxpc3RlbmVyLCAtMSBpZiBub3QgZm91bmRcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgaSA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxpYXMgYSBtZXRob2Qgd2hpbGUga2VlcGluZyB0aGUgY29udGV4dCBjb3JyZWN0LCB0byBhbGxvdyBmb3Igb3ZlcndyaXRpbmcgb2YgdGFyZ2V0IG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgbWV0aG9kLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgYWxpYXNlZCBtZXRob2RcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhbGlhcyhuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBhbGlhc0Nsb3N1cmUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tuYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3RlbmVyIGFycmF5IGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICAgICAqIFdpbGwgaW5pdGlhbGlzZSB0aGUgZXZlbnQgb2JqZWN0IGFuZCBsaXN0ZW5lciBhcnJheXMgaWYgcmVxdWlyZWQuXG4gICAgICogV2lsbCByZXR1cm4gYW4gb2JqZWN0IGlmIHlvdSB1c2UgYSByZWdleCBzZWFyY2guIFRoZSBvYmplY3QgY29udGFpbnMga2V5cyBmb3IgZWFjaCBtYXRjaGVkIGV2ZW50LiBTbyAvYmFbcnpdLyBtaWdodCByZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmcgYmFyIGFuZCBiYXouIEJ1dCBvbmx5IGlmIHlvdSBoYXZlIGVpdGhlciBkZWZpbmVkIHRoZW0gd2l0aCBkZWZpbmVFdmVudCBvciBhZGRlZCBzb21lIGxpc3RlbmVycyB0byB0aGVtLlxuICAgICAqIEVhY2ggcHJvcGVydHkgaW4gdGhlIG9iamVjdCByZXNwb25zZSBpcyBhbiBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZXR1cm4gdGhlIGxpc3RlbmVycyBmcm9tLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9uW118T2JqZWN0fSBBbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciB0aGUgZXZlbnQuXG4gICAgICovXG4gICAgcHJvdG8uZ2V0TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKGV2dCkge1xuICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZ2V0RXZlbnRzKCk7XG4gICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAvLyBSZXR1cm4gYSBjb25jYXRlbmF0ZWQgYXJyYXkgb2YgYWxsIG1hdGNoaW5nIGV2ZW50cyBpZlxuICAgICAgICAvLyB0aGUgc2VsZWN0b3IgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAgICAgIGlmIChldnQgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0ge307XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBldmVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkgJiYgZXZ0LnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVtrZXldID0gZXZlbnRzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBldmVudHNbZXZ0XSB8fCAoZXZlbnRzW2V2dF0gPSBbXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgbGlzdCBvZiBsaXN0ZW5lciBvYmplY3RzIGFuZCBmbGF0dGVucyBpdCBpbnRvIGEgbGlzdCBvZiBsaXN0ZW5lciBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBsaXN0ZW5lcnMgUmF3IGxpc3RlbmVyIG9iamVjdHMuXG4gICAgICogQHJldHVybiB7RnVuY3Rpb25bXX0gSnVzdCB0aGUgbGlzdGVuZXIgZnVuY3Rpb25zLlxuICAgICAqL1xuICAgIHByb3RvLmZsYXR0ZW5MaXN0ZW5lcnMgPSBmdW5jdGlvbiBmbGF0dGVuTGlzdGVuZXJzKGxpc3RlbmVycykge1xuICAgICAgICB2YXIgZmxhdExpc3RlbmVycyA9IFtdO1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBmbGF0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXJzW2ldLmxpc3RlbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbGF0TGlzdGVuZXJzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSByZXF1ZXN0ZWQgbGlzdGVuZXJzIHZpYSBnZXRMaXN0ZW5lcnMgYnV0IHdpbGwgYWx3YXlzIHJldHVybiB0aGUgcmVzdWx0cyBpbnNpZGUgYW4gb2JqZWN0LiBUaGlzIGlzIG1haW5seSBmb3IgaW50ZXJuYWwgdXNlIGJ1dCBvdGhlcnMgbWF5IGZpbmQgaXQgdXNlZnVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gcmV0dXJuIHRoZSBsaXN0ZW5lcnMgZnJvbS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFsbCBsaXN0ZW5lciBmdW5jdGlvbnMgZm9yIGFuIGV2ZW50IGluIGFuIG9iamVjdC5cbiAgICAgKi9cbiAgICBwcm90by5nZXRMaXN0ZW5lcnNBc09iamVjdCA9IGZ1bmN0aW9uIGdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCkge1xuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnMoZXZ0KTtcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB7fTtcbiAgICAgICAgICAgIHJlc3BvbnNlW2V2dF0gPSBsaXN0ZW5lcnM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgbGlzdGVuZXJzO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkTGlzdGVuZXIgKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgPT09ICdmdW5jdGlvbicgfHwgbGlzdGVuZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXIgJiYgdHlwZW9mIGxpc3RlbmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWRMaXN0ZW5lcihsaXN0ZW5lci5saXN0ZW5lcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gICAgICogVGhlIGxpc3RlbmVyIHdpbGwgbm90IGJlIGFkZGVkIGlmIGl0IGlzIGEgZHVwbGljYXRlLlxuICAgICAqIElmIHRoZSBsaXN0ZW5lciByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgaXQgaXMgY2FsbGVkLlxuICAgICAqIElmIHlvdSBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIGFzIHRoZSBldmVudCBuYW1lIHRoZW4gdGhlIGxpc3RlbmVyIHdpbGwgYmUgYWRkZWQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkTGlzdGVuZXIobGlzdGVuZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XG4gICAgICAgIHZhciBsaXN0ZW5lcklzV3JhcHBlZCA9IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ29iamVjdCc7XG4gICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgaW5kZXhPZkxpc3RlbmVyKGxpc3RlbmVyc1trZXldLCBsaXN0ZW5lcikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzW2tleV0ucHVzaChsaXN0ZW5lcklzV3JhcHBlZCA/IGxpc3RlbmVyIDoge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uY2U6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgYWRkTGlzdGVuZXJcbiAgICAgKi9cbiAgICBwcm90by5vbiA9IGFsaWFzKCdhZGRMaXN0ZW5lcicpO1xuXG4gICAgLyoqXG4gICAgICogU2VtaS1hbGlhcyBvZiBhZGRMaXN0ZW5lci4gSXQgd2lsbCBhZGQgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmVcbiAgICAgKiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgYWZ0ZXIgaXRzIGZpcnN0IGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLiBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkIGFmdGVyIGNhbGxpbmcuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8uYWRkT25jZUxpc3RlbmVyID0gZnVuY3Rpb24gYWRkT25jZUxpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIoZXZ0LCB7XG4gICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBhZGRPbmNlTGlzdGVuZXIuXG4gICAgICovXG4gICAgcHJvdG8ub25jZSA9IGFsaWFzKCdhZGRPbmNlTGlzdGVuZXInKTtcblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYW4gZXZlbnQgbmFtZS4gVGhpcyBpcyByZXF1aXJlZCBpZiB5b3Ugd2FudCB0byB1c2UgYSByZWdleCB0byBhZGQgYSBsaXN0ZW5lciB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gSWYgeW91IGRvbid0IGRvIHRoaXMgdGhlbiBob3cgZG8geW91IGV4cGVjdCBpdCB0byBrbm93IHdoYXQgZXZlbnQgdG8gYWRkIHRvPyBTaG91bGQgaXQganVzdCBhZGQgdG8gZXZlcnkgcG9zc2libGUgbWF0Y2ggZm9yIGEgcmVnZXg/IE5vLiBUaGF0IGlzIHNjYXJ5IGFuZCBiYWQuXG4gICAgICogWW91IG5lZWQgdG8gdGVsbCBpdCB3aGF0IGV2ZW50IG5hbWVzIHNob3VsZCBiZSBtYXRjaGVkIGJ5IGEgcmVnZXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGNyZWF0ZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5kZWZpbmVFdmVudCA9IGZ1bmN0aW9uIGRlZmluZUV2ZW50KGV2dCkge1xuICAgICAgICB0aGlzLmdldExpc3RlbmVycyhldnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlcyBkZWZpbmVFdmVudCB0byBkZWZpbmUgbXVsdGlwbGUgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmdbXX0gZXZ0cyBBbiBhcnJheSBvZiBldmVudCBuYW1lcyB0byBkZWZpbmUuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8uZGVmaW5lRXZlbnRzID0gZnVuY3Rpb24gZGVmaW5lRXZlbnRzKGV2dHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmluZUV2ZW50KGV2dHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZnVuY3Rpb24gZnJvbSB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICAgICAqIFdoZW4gcGFzc2VkIGEgcmVndWxhciBleHByZXNzaW9uIGFzIHRoZSBldmVudCBuYW1lLCBpdCB3aWxsIHJlbW92ZSB0aGUgbGlzdGVuZXIgZnJvbSBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgTWV0aG9kIHRvIHJlbW92ZSBmcm9tIHRoZSBldmVudC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIGZvciAoa2V5IGluIGxpc3RlbmVycykge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzW2tleV0sIGxpc3RlbmVyKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgcmVtb3ZlTGlzdGVuZXJcbiAgICAgKi9cbiAgICBwcm90by5vZmYgPSBhbGlhcygncmVtb3ZlTGlzdGVuZXInKTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgbGlzdGVuZXJzIGluIGJ1bGsgdXNpbmcgdGhlIG1hbmlwdWxhdGVMaXN0ZW5lcnMgbWV0aG9kLlxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgeW91IGNhbiBhZGQgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4ga2V5IHZhbHVlIHBhaXJzIG9mIGV2ZW50cyBhbmQgbGlzdGVuZXJzIG9yIGxpc3RlbmVyIGFycmF5cy4gWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIGFkZGVkLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIGFkZCB0aGUgYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKiBZZWFoLCB0aGlzIGZ1bmN0aW9uIGRvZXMgcXVpdGUgYSBiaXQuIFRoYXQncyBwcm9iYWJseSBhIGJhZCB0aGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byBhZGQgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmFkZExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZExpc3RlbmVycyhldnQsIGxpc3RlbmVycykge1xuICAgICAgICAvLyBQYXNzIHRocm91Z2ggdG8gbWFuaXB1bGF0ZUxpc3RlbmVyc1xuICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlTGlzdGVuZXJzKGZhbHNlLCBldnQsIGxpc3RlbmVycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGlzdGVuZXJzIGluIGJ1bGsgdXNpbmcgdGhlIG1hbmlwdWxhdGVMaXN0ZW5lcnMgbWV0aG9kLlxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgeW91IGNhbiByZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGFuIGV2ZW50IG5hbWUgYW5kIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0byBiZSByZW1vdmVkLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXJzIGZyb20gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fFJlZ0V4cH0gZXZ0IEFuIGV2ZW50IG5hbWUgaWYgeW91IHdpbGwgcGFzcyBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgbmV4dC4gQW4gb2JqZWN0IGlmIHlvdSB3aXNoIHRvIHJlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5yZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoZXZ0LCBsaXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gUGFzcyB0aHJvdWdoIHRvIG1hbmlwdWxhdGVMaXN0ZW5lcnNcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyh0cnVlLCBldnQsIGxpc3RlbmVycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVkaXRzIGxpc3RlbmVycyBpbiBidWxrLiBUaGUgYWRkTGlzdGVuZXJzIGFuZCByZW1vdmVMaXN0ZW5lcnMgbWV0aG9kcyBib3RoIHVzZSB0aGlzIHRvIGRvIHRoZWlyIGpvYi4gWW91IHNob3VsZCByZWFsbHkgdXNlIHRob3NlIGluc3RlYWQsIHRoaXMgaXMgYSBsaXR0bGUgbG93ZXIgbGV2ZWwuXG4gICAgICogVGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgZGV0ZXJtaW5lIGlmIHRoZSBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgKHRydWUpIG9yIGFkZGVkIChmYWxzZSkuXG4gICAgICogSWYgeW91IHBhc3MgYW4gb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgeW91IGNhbiBhZGQvcmVtb3ZlIGZyb20gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4ga2V5IHZhbHVlIHBhaXJzIG9mIGV2ZW50cyBhbmQgbGlzdGVuZXJzIG9yIGxpc3RlbmVyIGFycmF5cy5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQvcmVtb3ZlZC5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYW5pcHVsYXRlIHRoZSBsaXN0ZW5lcnMgb2YgYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSByZW1vdmUgVHJ1ZSBpZiB5b3Ugd2FudCB0byByZW1vdmUgbGlzdGVuZXJzLCBmYWxzZSBpZiB5b3Ugd2FudCB0byBhZGQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fFJlZ0V4cH0gZXZ0IEFuIGV2ZW50IG5hbWUgaWYgeW91IHdpbGwgcGFzcyBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgbmV4dC4gQW4gb2JqZWN0IGlmIHlvdSB3aXNoIHRvIGFkZC9yZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IFtsaXN0ZW5lcnNdIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0byBhZGQvcmVtb3ZlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLm1hbmlwdWxhdGVMaXN0ZW5lcnMgPSBmdW5jdGlvbiBtYW5pcHVsYXRlTGlzdGVuZXJzKHJlbW92ZSwgZXZ0LCBsaXN0ZW5lcnMpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgdmFyIHNpbmdsZSA9IHJlbW92ZSA/IHRoaXMucmVtb3ZlTGlzdGVuZXIgOiB0aGlzLmFkZExpc3RlbmVyO1xuICAgICAgICB2YXIgbXVsdGlwbGUgPSByZW1vdmUgPyB0aGlzLnJlbW92ZUxpc3RlbmVycyA6IHRoaXMuYWRkTGlzdGVuZXJzO1xuXG4gICAgICAgIC8vIElmIGV2dCBpcyBhbiBvYmplY3QgdGhlbiBwYXNzIGVhY2ggb2YgaXRzIHByb3BlcnRpZXMgdG8gdGhpcyBtZXRob2RcbiAgICAgICAgaWYgKHR5cGVvZiBldnQgPT09ICdvYmplY3QnICYmICEoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICAgICAgZm9yIChpIGluIGV2dCkge1xuICAgICAgICAgICAgICAgIGlmIChldnQuaGFzT3duUHJvcGVydHkoaSkgJiYgKHZhbHVlID0gZXZ0W2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQYXNzIHRoZSBzaW5nbGUgbGlzdGVuZXIgc3RyYWlnaHQgdGhyb3VnaCB0byB0aGUgc2luZ3VsYXIgbWV0aG9kXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbmdsZS5jYWxsKHRoaXMsIGksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBwYXNzIGJhY2sgdG8gdGhlIG11bHRpcGxlIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZS5jYWxsKHRoaXMsIGksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNvIGV2dCBtdXN0IGJlIGEgc3RyaW5nXG4gICAgICAgICAgICAvLyBBbmQgbGlzdGVuZXJzIG11c3QgYmUgYW4gYXJyYXkgb2YgbGlzdGVuZXJzXG4gICAgICAgICAgICAvLyBMb29wIG92ZXIgaXQgYW5kIHBhc3MgZWFjaCBvbmUgdG8gdGhlIG11bHRpcGxlIG1ldGhvZFxuICAgICAgICAgICAgaSA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgc2luZ2xlLmNhbGwodGhpcywgZXZ0LCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmcm9tIGEgc3BlY2lmaWVkIGV2ZW50LlxuICAgICAqIElmIHlvdSBkbyBub3Qgc3BlY2lmeSBhbiBldmVudCB0aGVuIGFsbCBsaXN0ZW5lcnMgd2lsbCBiZSByZW1vdmVkLlxuICAgICAqIFRoYXQgbWVhbnMgZXZlcnkgZXZlbnQgd2lsbCBiZSBlbXB0aWVkLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGEgcmVnZXggdG8gcmVtb3ZlIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gW2V2dF0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgZXZlbnQgdG8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yLiBXaWxsIHJlbW92ZSBmcm9tIGV2ZXJ5IGV2ZW50IGlmIG5vdCBwYXNzZWQuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8ucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiByZW1vdmVFdmVudChldnQpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgZXZ0O1xuICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZ2V0RXZlbnRzKCk7XG4gICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGRpZmZlcmVudCB0aGluZ3MgZGVwZW5kaW5nIG9uIHRoZSBzdGF0ZSBvZiBldnRcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdGhlIHNwZWNpZmllZCBldmVudFxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1tldnRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2dCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBldmVudHMgbWF0Y2hpbmcgdGhlIHJlZ2V4LlxuICAgICAgICAgICAgZm9yIChrZXkgaW4gZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGV2dC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGluIGFsbCBldmVudHNcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgcmVtb3ZlRXZlbnQuXG4gICAgICpcbiAgICAgKiBBZGRlZCB0byBtaXJyb3IgdGhlIG5vZGUgQVBJLlxuICAgICAqL1xuICAgIHByb3RvLnJlbW92ZUFsbExpc3RlbmVycyA9IGFsaWFzKCdyZW1vdmVFdmVudCcpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXZlbnQgb2YgeW91ciBjaG9pY2UuXG4gICAgICogV2hlbiBlbWl0dGVkLCBldmVyeSBsaXN0ZW5lciBhdHRhY2hlZCB0byB0aGF0IGV2ZW50IHdpbGwgYmUgZXhlY3V0ZWQuXG4gICAgICogSWYgeW91IHBhc3MgdGhlIG9wdGlvbmFsIGFyZ3VtZW50IGFycmF5IHRoZW4gdGhvc2UgYXJndW1lbnRzIHdpbGwgYmUgcGFzc2VkIHRvIGV2ZXJ5IGxpc3RlbmVyIHVwb24gZXhlY3V0aW9uLlxuICAgICAqIEJlY2F1c2UgaXQgdXNlcyBgYXBwbHlgLCB5b3VyIGFycmF5IG9mIGFyZ3VtZW50cyB3aWxsIGJlIHBhc3NlZCBhcyBpZiB5b3Ugd3JvdGUgdGhlbSBvdXQgc2VwYXJhdGVseS5cbiAgICAgKiBTbyB0aGV5IHdpbGwgbm90IGFycml2ZSB3aXRoaW4gdGhlIGFycmF5IG9uIHRoZSBvdGhlciBzaWRlLCB0aGV5IHdpbGwgYmUgc2VwYXJhdGUuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gZW1pdCB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBlbWl0IGFuZCBleGVjdXRlIGxpc3RlbmVycyBmb3IuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ3NdIE9wdGlvbmFsIGFycmF5IG9mIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gZWFjaCBsaXN0ZW5lci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiBlbWl0RXZlbnQoZXZ0LCBhcmdzKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnNNYXAgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XG4gICAgICAgIHZhciBsaXN0ZW5lcnM7XG4gICAgICAgIHZhciBsaXN0ZW5lcjtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIHZhciByZXNwb25zZTtcblxuICAgICAgICBmb3IgKGtleSBpbiBsaXN0ZW5lcnNNYXApIHtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNNYXAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVyc01hcFtrZXldLnNsaWNlKDApO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbGlzdGVuZXIgcmV0dXJucyB0cnVlIHRoZW4gaXQgc2hhbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBldmVudFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZWl0aGVyIHdpdGggYSBiYXNpYyBjYWxsIG9yIGFuIGFwcGx5IGlmIHRoZXJlIGlzIGFuIGFyZ3MgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyLm9uY2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lci5saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGxpc3RlbmVyLmxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3MgfHwgW10pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gdGhpcy5fZ2V0T25jZVJldHVyblZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lci5saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgZW1pdEV2ZW50XG4gICAgICovXG4gICAgcHJvdG8udHJpZ2dlciA9IGFsaWFzKCdlbWl0RXZlbnQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRseSBkaWZmZXJlbnQgZnJvbSBlbWl0RXZlbnQgaW4gdGhhdCBpdCB3aWxsIHBhc3MgaXRzIGFyZ3VtZW50cyBvbiB0byB0aGUgbGlzdGVuZXJzLCBhcyBvcHBvc2VkIHRvIHRha2luZyBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMgdG8gcGFzcyBvbi5cbiAgICAgKiBBcyB3aXRoIGVtaXRFdmVudCwgeW91IGNhbiBwYXNzIGEgcmVnZXggaW4gcGxhY2Ugb2YgdGhlIGV2ZW50IG5hbWUgdG8gZW1pdCB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBlbWl0IGFuZCBleGVjdXRlIGxpc3RlbmVycyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4qfSBPcHRpb25hbCBhZGRpdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gZWFjaCBsaXN0ZW5lci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5lbWl0ID0gZnVuY3Rpb24gZW1pdChldnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0RXZlbnQoZXZ0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBhZ2FpbnN0IHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy4gSWYgYVxuICAgICAqIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGUgb25lIHNldCBoZXJlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkXG4gICAgICogYWZ0ZXIgZXhlY3V0aW9uLiBUaGlzIHZhbHVlIGRlZmF1bHRzIHRvIHRydWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBuZXcgdmFsdWUgdG8gY2hlY2sgZm9yIHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5zZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBzZXRPbmNlUmV0dXJuVmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb25jZVJldHVyblZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZlxuICAgICAqIHRoZSBsaXN0ZW5lcnMgcmV0dXJuIHZhbHVlIG1hdGNoZXMgdGhpcyBvbmUgdGhlbiBpdCBzaG91bGQgYmUgcmVtb3ZlZFxuICAgICAqIGF1dG9tYXRpY2FsbHkuIEl0IHdpbGwgcmV0dXJuIHRydWUgYnkgZGVmYXVsdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyp8Qm9vbGVhbn0gVGhlIGN1cnJlbnQgdmFsdWUgdG8gY2hlY2sgZm9yIG9yIHRoZSBkZWZhdWx0LCB0cnVlLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHByb3RvLl9nZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBfZ2V0T25jZVJldHVyblZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnX29uY2VSZXR1cm5WYWx1ZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb25jZVJldHVyblZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgZXZlbnRzIG9iamVjdCBhbmQgY3JlYXRlcyBvbmUgaWYgcmVxdWlyZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBldmVudHMgc3RvcmFnZSBvYmplY3QuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcHJvdG8uX2dldEV2ZW50cyA9IGZ1bmN0aW9uIF9nZXRFdmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMgfHwgKHRoaXMuX2V2ZW50cyA9IHt9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgZ2xvYmFsIHtAbGluayBFdmVudEVtaXR0ZXJ9IHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIHZlcnNpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gTm9uIGNvbmZsaWN0aW5nIEV2ZW50RW1pdHRlciBjbGFzcy5cbiAgICAgKi9cbiAgICBFdmVudEVtaXR0ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICAgIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gb3JpZ2luYWxHbG9iYWxWYWx1ZTtcbiAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbiAgICB9O1xuXG4gICAgLy8gRXhwb3NlIHRoZSBjbGFzcyBlaXRoZXIgdmlhIEFNRCwgQ29tbW9uSlMgb3IgdGhlIGdsb2JhbCBvYmplY3RcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gRXZlbnRFbWl0dGVyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpe1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuICAgIH1cbn0odGhpcyB8fCB7fSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd29sZnk4Ny1ldmVudGVtaXR0ZXIvRXZlbnRFbWl0dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy93b2xmeTg3LWV2ZW50ZW1pdHRlci9FdmVudEVtaXR0ZXIuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBlZSBmcm9tICcuL2VlJztcblxuY29uc3QgJGFib3V0Q29weU9wZW5lciA9ICQoJy5qcy1hYm91dC1jb3B5LW9wZW5lcicpO1xuY29uc3QgJGFib3V0Qm9keSA9ICQoJy5qcy1hYm91dC1ib2R5Jyk7XG5cbmZ1bmN0aW9uIG9wZW5Nb3JlQ29weSgpIHtcbiAgY29uc3QgYWJvdXRIZWlnaHQgPSAkKCcuanMtYWJvdXQtY29weScpLmhlaWdodCgpO1xuICAkYWJvdXRCb2R5LmFkZENsYXNzKCdhY3RpdmUnKS5oZWlnaHQoYWJvdXRIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBhZGRSZWFkTW9yZSgpIHtcbiAgY29uc3QgYWJvdXRIZWlnaHQgPSAkKCcuanMtYWJvdXQtY29weScpLmhlaWdodCgpO1xuICBpZiAoYWJvdXRIZWlnaHQgPCAxODApIHtcbiAgICAkYWJvdXRCb2R5LmFkZENsYXNzKCdhY3RpdmUnKS5oZWlnaHQoYWJvdXRIZWlnaHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEhlaWdodCgpIHtcbiAgaWYgKCRhYm91dEJvZHkuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgY29uc3QgYWJvdXRIZWlnaHQgPSAkKCcuanMtYWJvdXQtYm9keS5hY3RpdmUgLmpzLWFib3V0LWNvcHknKS5oZWlnaHQoKTtcbiAgICAkYWJvdXRCb2R5LmhlaWdodChhYm91dEhlaWdodCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgYWRkUmVhZE1vcmUoKTtcbiAgJGFib3V0Q29weU9wZW5lci5jbGljayhvcGVuTW9yZUNvcHkpO1xuXG4gICQod2luZG93KS5yZXNpemUoc2V0SGVpZ2h0KTtcbiAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZScsIHNldEhlaWdodCk7XG59XG5cbmVlLmFkZExpc3RlbmVyKCdpbml0JywgaW5pdCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvc2NyaXB0cy9jb21wb25lbnRzL2Fib3V0LmpzIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBlZSBmcm9tICcuL2VlJztcblxuZnVuY3Rpb24gc2V0SGVpZ2h0KCkge1xuICAkKCcuanMtYWNjb3JkaW9uLW5hdi1pdGVtLmFjdGl2ZScpLmVhY2goKGksIGVsKSA9PiB7XG4gICAgY29uc3QgYWN0aXZlQ2Fyb3VzZWxIZWlnaHQgPSAkKGVsKS5maW5kKCcuanMtY2Fyb3VzZWwtc2xpZGUuc2xpY2stYWN0aXZlJykuaGVpZ2h0KCk7XG4gICAgJChlbCkuZmluZCgnLmpzLWFjY29yZGlvbi1uYXYtY29udGVudCcpLmhlaWdodChhY3RpdmVDYXJvdXNlbEhlaWdodCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvcGVuTmF2KCkge1xuICBjb25zdCAkc2VsZWN0ZWRJdGVtID0gJCh0aGlzKS5jbG9zZXN0KCcuanMtYWNjb3JkaW9uLW5hdi1pdGVtJyk7XG4gIGlmICgkc2VsZWN0ZWRJdGVtLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICRzZWxlY3RlZEl0ZW0ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICRzZWxlY3RlZEl0ZW0uZmluZCgnLmpzLWFjY29yZGlvbi1uYXYtY29udGVudCcpLmNzcygnaGVpZ2h0JywgMCk7XG4gIH0gZWxzZSB7XG4gICAgJHNlbGVjdGVkSXRlbS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZHJhdygpIHtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpO1xuICBzZXRIZWlnaHQoKTtcbn1cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgJChkb2N1bWVudCkub2ZmKCkub24oJ2NsaWNrJywgJy5qcy1hY2NvcmRpb24tbmF2LW9wZW5lcicsIG9wZW5OYXYpO1xuICBkcmF3KCk7XG59XG5cbmVlLmFkZExpc3RlbmVyKCdpbml0JywgaW5pdCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvc2NyaXB0cy9jb21wb25lbnRzL2FjY29yZGlvbi1uYXYuanMiLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IGVlIGZyb20gJy4vZWUnO1xuXG5jb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcbmNvbnN0IG11dGVkQmdNdXNpYyA9ICdtdXRlZC1iZy1tdWNpYyc7XG5cbmZ1bmN0aW9uIGlzTXV0ZWQoKSB7XG4gIHJldHVybiAkYm9keS5oYXNDbGFzcyhtdXRlZEJnTXVzaWMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmdNdXRlKCkge1xuICAkYm9keS5hZGRDbGFzcyhtdXRlZEJnTXVzaWMpO1xuICAkKCcuanMtYmctbXVzaWMnKS5hbmltYXRlKHsgdm9sdW1lOiAwIH0sIDUwMCk7XG59XG5cbmZ1bmN0aW9uIGJnUGxheSgpIHtcbiAgJGJvZHkucmVtb3ZlQ2xhc3MobXV0ZWRCZ011c2ljKTtcbiAgJCgnLmpzLWJnLW11c2ljJykuYW5pbWF0ZSh7IHZvbHVtZTogMSB9LCA1MDApO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVCZ011c2ljKCkge1xuICBpZiAoIWlzTXV0ZWQoKSkge1xuICAgIGJnTXV0ZSgpO1xuICB9IGVsc2Uge1xuICAgIGJnUGxheSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXJzKCkge1xuICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmpzLWJnLW11c2ljLWNvbnRyb2wnLCB0b2dnbGVCZ011c2ljKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgYWRkSGFuZGxlcnMoKTtcbn1cblxuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgJChkb2N1bWVudCkub2ZmKCdjbGljaycpO1xufVxuXG5lZS5hZGRMaXN0ZW5lcignaW5pdCcsIGluaXQpO1xuZWUuYWRkTGlzdGVuZXIoJ2Rlc3Ryb3knLCBkZXN0cm95KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9zY3JpcHRzL2NvbXBvbmVudHMvYmctbXVzaWMuanMiLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0ICdzbGljay1jYXJvdXNlbCc7XG5pbXBvcnQgZWUgZnJvbSAnLi9lZSc7XG5cbmNvbnN0ICRjYXJvdXNlbHMgPSAkKCcuanMtY2Fyb3VzZWwnKTtcblxuZnVuY3Rpb24gY2Fyb3VzZWxzSW5pdCgpIHtcbiAgJGNhcm91c2Vscy5lYWNoKChpLCBlbCkgPT4ge1xuICAgICQoZWwpLnNsaWNrKHtcbiAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgZmFkZTogdHJ1ZSxcbiAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgIHNsaWRlOiAnLmpzLWNhcm91c2VsLXNsaWRlJyxcbiAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICBwcmV2QXJyb3c6ICQoZWwpLmZpbmQoJy5qcy1jYXJvdXNlbC1wcmV2JyksXG4gICAgICBuZXh0QXJyb3c6ICQoZWwpLmZpbmQoJy5qcy1jYXJvdXNlbC1uZXh0JyksXG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICBjYXJvdXNlbHNJbml0KCk7XG59XG5cbmVlLmFkZExpc3RlbmVyKCdpbml0JywgaW5pdCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvc2NyaXB0cy9jb21wb25lbnRzL2Nhcm91c2Vscy5qcyIsImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJyk7XG5cbmNvbnN0IGVlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5leHBvcnQgZGVmYXVsdCBlZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9zY3JpcHRzL2NvbXBvbmVudHMvZWUuanMiLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IGVlIGZyb20gJy4vZWUnO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICBjb25zdCB3aWRnZXQgPSBNaXhjbG91ZC5QbGF5ZXJXaWRnZXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpKTtcblxuICB3aWRnZXQucmVhZHkudGhlbigoKSA9PiB7XG4gICAgJCgnLmMtbWl4Y2xvdWQtcGxheWVyX19jb250cm9sbGVyJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQnKTtcbiAgICAgIHdpZGdldC5wbGF5KCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5lZS5hZGRMaXN0ZW5lcignaW5pdCcsIGluaXQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcmVzb3VyY2VzL3NjcmlwdHMvY29tcG9uZW50cy9taXhjbG91ZC1wbGF5ZXIuanMiLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IGltYWdlc0xvYWRlZCBmcm9tICdpbWFnZXNsb2FkZWQnO1xuaW1wb3J0IGVlIGZyb20gJy4vZWUnO1xuXG5jb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcblxuZnVuY3Rpb24gaXNMb2FkZWQoKSB7XG4gICRib2R5LmFkZENsYXNzKCdpc0xvYWRlZCcpO1xufVxuXG5mdW5jdGlvbiBoaWRlUHJlbG9hZGVyKCkge1xuICAkYm9keS5yZW1vdmVDbGFzcygnYWN0aXZlLXByZWxvYWRlcicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0KCkge1xuICBpbWFnZXNMb2FkZWQoJGJvZHksICgpID0+IHtcbiAgICBzZXRUaW1lb3V0KGhpZGVQcmVsb2FkZXIsIDQwMCk7XG4gICAgc2V0VGltZW91dChpc0xvYWRlZCwgMTAwMCk7XG4gIH0pO1xufVxuXG5lZS5hZGRMaXN0ZW5lcignaW5pdCcsIGluaXQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcmVzb3VyY2VzL3NjcmlwdHMvY29tcG9uZW50cy9wcmVsb2FkZXIuanMiLCIvKiEgalF1ZXJ5IHYxLjkuMCB8IChjKSAyMDA1LCAyMDEyIGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovKGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXt2YXIgdD1lLmxlbmd0aCxuPXN0LnR5cGUoZSk7cmV0dXJuIHN0LmlzV2luZG93KGUpPyExOjE9PT1lLm5vZGVUeXBlJiZ0PyEwOlwiYXJyYXlcIj09PW58fFwiZnVuY3Rpb25cIiE9PW4mJigwPT09dHx8XCJudW1iZXJcIj09dHlwZW9mIHQmJnQ+MCYmdC0xIGluIGUpfWZ1bmN0aW9uIHIoZSl7dmFyIHQ9VHRbZV09e307cmV0dXJuIHN0LmVhY2goZS5tYXRjaChsdCl8fFtdLGZ1bmN0aW9uKGUsbil7dFtuXT0hMH0pLHR9ZnVuY3Rpb24gaShlLG4scixpKXtpZihzdC5hY2NlcHREYXRhKGUpKXt2YXIgbyxhLHM9c3QuZXhwYW5kbyx1PVwic3RyaW5nXCI9PXR5cGVvZiBuLGw9ZS5ub2RlVHlwZSxjPWw/c3QuY2FjaGU6ZSxmPWw/ZVtzXTplW3NdJiZzO2lmKGYmJmNbZl0mJihpfHxjW2ZdLmRhdGEpfHwhdXx8ciE9PXQpcmV0dXJuIGZ8fChsP2Vbc109Zj1LLnBvcCgpfHxzdC5ndWlkKys6Zj1zKSxjW2ZdfHwoY1tmXT17fSxsfHwoY1tmXS50b0pTT049c3Qubm9vcCkpLChcIm9iamVjdFwiPT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT10eXBlb2YgbikmJihpP2NbZl09c3QuZXh0ZW5kKGNbZl0sbik6Y1tmXS5kYXRhPXN0LmV4dGVuZChjW2ZdLmRhdGEsbikpLG89Y1tmXSxpfHwoby5kYXRhfHwoby5kYXRhPXt9KSxvPW8uZGF0YSksciE9PXQmJihvW3N0LmNhbWVsQ2FzZShuKV09ciksdT8oYT1vW25dLG51bGw9PWEmJihhPW9bc3QuY2FtZWxDYXNlKG4pXSkpOmE9byxhfX1mdW5jdGlvbiBvKGUsdCxuKXtpZihzdC5hY2NlcHREYXRhKGUpKXt2YXIgcixpLG8sYT1lLm5vZGVUeXBlLHU9YT9zdC5jYWNoZTplLGw9YT9lW3N0LmV4cGFuZG9dOnN0LmV4cGFuZG87aWYodVtsXSl7aWYodCYmKHI9bj91W2xdOnVbbF0uZGF0YSkpe3N0LmlzQXJyYXkodCk/dD10LmNvbmNhdChzdC5tYXAodCxzdC5jYW1lbENhc2UpKTp0IGluIHI/dD1bdF06KHQ9c3QuY2FtZWxDYXNlKHQpLHQ9dCBpbiByP1t0XTp0LnNwbGl0KFwiIFwiKSk7Zm9yKGk9MCxvPXQubGVuZ3RoO28+aTtpKyspZGVsZXRlIHJbdFtpXV07aWYoIShuP3M6c3QuaXNFbXB0eU9iamVjdCkocikpcmV0dXJufShufHwoZGVsZXRlIHVbbF0uZGF0YSxzKHVbbF0pKSkmJihhP3N0LmNsZWFuRGF0YShbZV0sITApOnN0LnN1cHBvcnQuZGVsZXRlRXhwYW5kb3x8dSE9dS53aW5kb3c/ZGVsZXRlIHVbbF06dVtsXT1udWxsKX19fWZ1bmN0aW9uIGEoZSxuLHIpe2lmKHI9PT10JiYxPT09ZS5ub2RlVHlwZSl7dmFyIGk9XCJkYXRhLVwiK24ucmVwbGFjZShOdCxcIi0kMVwiKS50b0xvd2VyQ2FzZSgpO2lmKHI9ZS5nZXRBdHRyaWJ1dGUoaSksXCJzdHJpbmdcIj09dHlwZW9mIHIpe3RyeXtyPVwidHJ1ZVwiPT09cj8hMDpcImZhbHNlXCI9PT1yPyExOlwibnVsbFwiPT09cj9udWxsOityK1wiXCI9PT1yPytyOnd0LnRlc3Qocik/c3QucGFyc2VKU09OKHIpOnJ9Y2F0Y2gobyl7fXN0LmRhdGEoZSxuLHIpfWVsc2Ugcj10fXJldHVybiByfWZ1bmN0aW9uIHMoZSl7dmFyIHQ7Zm9yKHQgaW4gZSlpZigoXCJkYXRhXCIhPT10fHwhc3QuaXNFbXB0eU9iamVjdChlW3RdKSkmJlwidG9KU09OXCIhPT10KXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHUoKXtyZXR1cm4hMH1mdW5jdGlvbiBsKCl7cmV0dXJuITF9ZnVuY3Rpb24gYyhlLHQpe2RvIGU9ZVt0XTt3aGlsZShlJiYxIT09ZS5ub2RlVHlwZSk7cmV0dXJuIGV9ZnVuY3Rpb24gZihlLHQsbil7aWYodD10fHwwLHN0LmlzRnVuY3Rpb24odCkpcmV0dXJuIHN0LmdyZXAoZSxmdW5jdGlvbihlLHIpe3ZhciBpPSEhdC5jYWxsKGUscixlKTtyZXR1cm4gaT09PW59KTtpZih0Lm5vZGVUeXBlKXJldHVybiBzdC5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10PT09bn0pO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXt2YXIgcj1zdC5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfSk7aWYoV3QudGVzdCh0KSlyZXR1cm4gc3QuZmlsdGVyKHQsciwhbik7dD1zdC5maWx0ZXIodCxyKX1yZXR1cm4gc3QuZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiBzdC5pbkFycmF5KGUsdCk+PTA9PT1ufSl9ZnVuY3Rpb24gcChlKXt2YXIgdD16dC5zcGxpdChcInxcIiksbj1lLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtpZihuLmNyZWF0ZUVsZW1lbnQpZm9yKDt0Lmxlbmd0aDspbi5jcmVhdGVFbGVtZW50KHQucG9wKCkpO3JldHVybiBufWZ1bmN0aW9uIGQoZSx0KXtyZXR1cm4gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0KVswXXx8ZS5hcHBlbmRDaGlsZChlLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KSl9ZnVuY3Rpb24gaChlKXt2YXIgdD1lLmdldEF0dHJpYnV0ZU5vZGUoXCJ0eXBlXCIpO3JldHVybiBlLnR5cGU9KHQmJnQuc3BlY2lmaWVkKStcIi9cIitlLnR5cGUsZX1mdW5jdGlvbiBnKGUpe3ZhciB0PW5uLmV4ZWMoZS50eXBlKTtyZXR1cm4gdD9lLnR5cGU9dFsxXTplLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIiksZX1mdW5jdGlvbiBtKGUsdCl7Zm9yKHZhciBuLHI9MDtudWxsIT0obj1lW3JdKTtyKyspc3QuX2RhdGEobixcImdsb2JhbEV2YWxcIiwhdHx8c3QuX2RhdGEodFtyXSxcImdsb2JhbEV2YWxcIikpfWZ1bmN0aW9uIHkoZSx0KXtpZigxPT09dC5ub2RlVHlwZSYmc3QuaGFzRGF0YShlKSl7dmFyIG4scixpLG89c3QuX2RhdGEoZSksYT1zdC5fZGF0YSh0LG8pLHM9by5ldmVudHM7aWYocyl7ZGVsZXRlIGEuaGFuZGxlLGEuZXZlbnRzPXt9O2ZvcihuIGluIHMpZm9yKHI9MCxpPXNbbl0ubGVuZ3RoO2k+cjtyKyspc3QuZXZlbnQuYWRkKHQsbixzW25dW3JdKX1hLmRhdGEmJihhLmRhdGE9c3QuZXh0ZW5kKHt9LGEuZGF0YSkpfX1mdW5jdGlvbiB2KGUsdCl7dmFyIG4scixpO2lmKDE9PT10Lm5vZGVUeXBlKXtpZihuPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwhc3Quc3VwcG9ydC5ub0Nsb25lRXZlbnQmJnRbc3QuZXhwYW5kb10pe3I9c3QuX2RhdGEodCk7Zm9yKGkgaW4gci5ldmVudHMpc3QucmVtb3ZlRXZlbnQodCxpLHIuaGFuZGxlKTt0LnJlbW92ZUF0dHJpYnV0ZShzdC5leHBhbmRvKX1cInNjcmlwdFwiPT09biYmdC50ZXh0IT09ZS50ZXh0PyhoKHQpLnRleHQ9ZS50ZXh0LGcodCkpOlwib2JqZWN0XCI9PT1uPyh0LnBhcmVudE5vZGUmJih0Lm91dGVySFRNTD1lLm91dGVySFRNTCksc3Quc3VwcG9ydC5odG1sNUNsb25lJiZlLmlubmVySFRNTCYmIXN0LnRyaW0odC5pbm5lckhUTUwpJiYodC5pbm5lckhUTUw9ZS5pbm5lckhUTUwpKTpcImlucHV0XCI9PT1uJiZadC50ZXN0KGUudHlwZSk/KHQuZGVmYXVsdENoZWNrZWQ9dC5jaGVja2VkPWUuY2hlY2tlZCx0LnZhbHVlIT09ZS52YWx1ZSYmKHQudmFsdWU9ZS52YWx1ZSkpOlwib3B0aW9uXCI9PT1uP3QuZGVmYXVsdFNlbGVjdGVkPXQuc2VsZWN0ZWQ9ZS5kZWZhdWx0U2VsZWN0ZWQ6KFwiaW5wdXRcIj09PW58fFwidGV4dGFyZWFcIj09PW4pJiYodC5kZWZhdWx0VmFsdWU9ZS5kZWZhdWx0VmFsdWUpfX1mdW5jdGlvbiBiKGUsbil7dmFyIHIsaSxvPTAsYT1lLmdldEVsZW1lbnRzQnlUYWdOYW1lIT09dD9lLmdldEVsZW1lbnRzQnlUYWdOYW1lKG58fFwiKlwiKTplLnF1ZXJ5U2VsZWN0b3JBbGwhPT10P2UucXVlcnlTZWxlY3RvckFsbChufHxcIipcIik6dDtpZighYSlmb3IoYT1bXSxyPWUuY2hpbGROb2Rlc3x8ZTtudWxsIT0oaT1yW29dKTtvKyspIW58fHN0Lm5vZGVOYW1lKGksbik/YS5wdXNoKGkpOnN0Lm1lcmdlKGEsYihpLG4pKTtyZXR1cm4gbj09PXR8fG4mJnN0Lm5vZGVOYW1lKGUsbik/c3QubWVyZ2UoW2VdLGEpOmF9ZnVuY3Rpb24geChlKXtadC50ZXN0KGUudHlwZSkmJihlLmRlZmF1bHRDaGVja2VkPWUuY2hlY2tlZCl9ZnVuY3Rpb24gVChlLHQpe2lmKHQgaW4gZSlyZXR1cm4gdDtmb3IodmFyIG49dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpLHI9dCxpPU5uLmxlbmd0aDtpLS07KWlmKHQ9Tm5baV0rbix0IGluIGUpcmV0dXJuIHQ7cmV0dXJuIHJ9ZnVuY3Rpb24gdyhlLHQpe3JldHVybiBlPXR8fGUsXCJub25lXCI9PT1zdC5jc3MoZSxcImRpc3BsYXlcIil8fCFzdC5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSl9ZnVuY3Rpb24gTihlLHQpe2Zvcih2YXIgbixyPVtdLGk9MCxvPWUubGVuZ3RoO28+aTtpKyspbj1lW2ldLG4uc3R5bGUmJihyW2ldPXN0Ll9kYXRhKG4sXCJvbGRkaXNwbGF5XCIpLHQ/KHJbaV18fFwibm9uZVwiIT09bi5zdHlsZS5kaXNwbGF5fHwobi5zdHlsZS5kaXNwbGF5PVwiXCIpLFwiXCI9PT1uLnN0eWxlLmRpc3BsYXkmJncobikmJihyW2ldPXN0Ll9kYXRhKG4sXCJvbGRkaXNwbGF5XCIsUyhuLm5vZGVOYW1lKSkpKTpyW2ldfHx3KG4pfHxzdC5fZGF0YShuLFwib2xkZGlzcGxheVwiLHN0LmNzcyhuLFwiZGlzcGxheVwiKSkpO2ZvcihpPTA7bz5pO2krKyluPWVbaV0sbi5zdHlsZSYmKHQmJlwibm9uZVwiIT09bi5zdHlsZS5kaXNwbGF5JiZcIlwiIT09bi5zdHlsZS5kaXNwbGF5fHwobi5zdHlsZS5kaXNwbGF5PXQ/cltpXXx8XCJcIjpcIm5vbmVcIikpO3JldHVybiBlfWZ1bmN0aW9uIEMoZSx0LG4pe3ZhciByPW1uLmV4ZWModCk7cmV0dXJuIHI/TWF0aC5tYXgoMCxyWzFdLShufHwwKSkrKHJbMl18fFwicHhcIik6dH1mdW5jdGlvbiBrKGUsdCxuLHIsaSl7Zm9yKHZhciBvPW49PT0ocj9cImJvcmRlclwiOlwiY29udGVudFwiKT80Olwid2lkdGhcIj09PXQ/MTowLGE9MDs0Pm87bys9MilcIm1hcmdpblwiPT09biYmKGErPXN0LmNzcyhlLG4rd25bb10sITAsaSkpLHI/KFwiY29udGVudFwiPT09biYmKGEtPXN0LmNzcyhlLFwicGFkZGluZ1wiK3duW29dLCEwLGkpKSxcIm1hcmdpblwiIT09biYmKGEtPXN0LmNzcyhlLFwiYm9yZGVyXCIrd25bb10rXCJXaWR0aFwiLCEwLGkpKSk6KGErPXN0LmNzcyhlLFwicGFkZGluZ1wiK3duW29dLCEwLGkpLFwicGFkZGluZ1wiIT09biYmKGErPXN0LmNzcyhlLFwiYm9yZGVyXCIrd25bb10rXCJXaWR0aFwiLCEwLGkpKSk7cmV0dXJuIGF9ZnVuY3Rpb24gRShlLHQsbil7dmFyIHI9ITAsaT1cIndpZHRoXCI9PT10P2Uub2Zmc2V0V2lkdGg6ZS5vZmZzZXRIZWlnaHQsbz1sbihlKSxhPXN0LnN1cHBvcnQuYm94U2l6aW5nJiZcImJvcmRlci1ib3hcIj09PXN0LmNzcyhlLFwiYm94U2l6aW5nXCIsITEsbyk7aWYoMD49aXx8bnVsbD09aSl7aWYoaT11bihlLHQsbyksKDA+aXx8bnVsbD09aSkmJihpPWUuc3R5bGVbdF0pLHluLnRlc3QoaSkpcmV0dXJuIGk7cj1hJiYoc3Quc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZXx8aT09PWUuc3R5bGVbdF0pLGk9cGFyc2VGbG9hdChpKXx8MH1yZXR1cm4gaStrKGUsdCxufHwoYT9cImJvcmRlclwiOlwiY29udGVudFwiKSxyLG8pK1wicHhcIn1mdW5jdGlvbiBTKGUpe3ZhciB0PVYsbj1ibltlXTtyZXR1cm4gbnx8KG49QShlLHQpLFwibm9uZVwiIT09biYmbnx8KGNuPShjbnx8c3QoXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIpLmNzcyhcImNzc1RleHRcIixcImRpc3BsYXk6YmxvY2sgIWltcG9ydGFudFwiKSkuYXBwZW5kVG8odC5kb2N1bWVudEVsZW1lbnQpLHQ9KGNuWzBdLmNvbnRlbnRXaW5kb3d8fGNuWzBdLmNvbnRlbnREb2N1bWVudCkuZG9jdW1lbnQsdC53cml0ZShcIjwhZG9jdHlwZSBodG1sPjxodG1sPjxib2R5PlwiKSx0LmNsb3NlKCksbj1BKGUsdCksY24uZGV0YWNoKCkpLGJuW2VdPW4pLG59ZnVuY3Rpb24gQShlLHQpe3ZhciBuPXN0KHQuY3JlYXRlRWxlbWVudChlKSkuYXBwZW5kVG8odC5ib2R5KSxyPXN0LmNzcyhuWzBdLFwiZGlzcGxheVwiKTtyZXR1cm4gbi5yZW1vdmUoKSxyfWZ1bmN0aW9uIGooZSx0LG4scil7dmFyIGk7aWYoc3QuaXNBcnJheSh0KSlzdC5lYWNoKHQsZnVuY3Rpb24odCxpKXtufHxrbi50ZXN0KGUpP3IoZSxpKTpqKGUrXCJbXCIrKFwib2JqZWN0XCI9PXR5cGVvZiBpP3Q6XCJcIikrXCJdXCIsaSxuLHIpfSk7ZWxzZSBpZihufHxcIm9iamVjdFwiIT09c3QudHlwZSh0KSlyKGUsdCk7ZWxzZSBmb3IoaSBpbiB0KWooZStcIltcIitpK1wiXVwiLHRbaV0sbixyKX1mdW5jdGlvbiBEKGUpe3JldHVybiBmdW5jdGlvbih0LG4pe1wic3RyaW5nXCIhPXR5cGVvZiB0JiYobj10LHQ9XCIqXCIpO3ZhciByLGk9MCxvPXQudG9Mb3dlckNhc2UoKS5tYXRjaChsdCl8fFtdO2lmKHN0LmlzRnVuY3Rpb24obikpZm9yKDtyPW9baSsrXTspXCIrXCI9PT1yWzBdPyhyPXIuc2xpY2UoMSl8fFwiKlwiLChlW3JdPWVbcl18fFtdKS51bnNoaWZ0KG4pKTooZVtyXT1lW3JdfHxbXSkucHVzaChuKX19ZnVuY3Rpb24gTChlLG4scixpKXtmdW5jdGlvbiBvKHUpe3ZhciBsO3JldHVybiBhW3VdPSEwLHN0LmVhY2goZVt1XXx8W10sZnVuY3Rpb24oZSx1KXt2YXIgYz11KG4scixpKTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgY3x8c3x8YVtjXT9zPyEobD1jKTp0OihuLmRhdGFUeXBlcy51bnNoaWZ0KGMpLG8oYyksITEpfSksbH12YXIgYT17fSxzPWU9PT0kbjtyZXR1cm4gbyhuLmRhdGFUeXBlc1swXSl8fCFhW1wiKlwiXSYmbyhcIipcIil9ZnVuY3Rpb24gSChlLG4pe3ZhciByLGksbz1zdC5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnN8fHt9O2ZvcihyIGluIG4pbltyXSE9PXQmJigob1tyXT9lOml8fChpPXt9KSlbcl09bltyXSk7cmV0dXJuIGkmJnN0LmV4dGVuZCghMCxlLGkpLGV9ZnVuY3Rpb24gTShlLG4scil7dmFyIGksbyxhLHMsdT1lLmNvbnRlbnRzLGw9ZS5kYXRhVHlwZXMsYz1lLnJlc3BvbnNlRmllbGRzO2ZvcihvIGluIGMpbyBpbiByJiYobltjW29dXT1yW29dKTtmb3IoO1wiKlwiPT09bFswXTspbC5zaGlmdCgpLGk9PT10JiYoaT1lLm1pbWVUeXBlfHxuLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtpZihpKWZvcihvIGluIHUpaWYodVtvXSYmdVtvXS50ZXN0KGkpKXtsLnVuc2hpZnQobyk7YnJlYWt9aWYobFswXWluIHIpYT1sWzBdO2Vsc2V7Zm9yKG8gaW4gcil7aWYoIWxbMF18fGUuY29udmVydGVyc1tvK1wiIFwiK2xbMF1dKXthPW87YnJlYWt9c3x8KHM9byl9YT1hfHxzfXJldHVybiBhPyhhIT09bFswXSYmbC51bnNoaWZ0KGEpLHJbYV0pOnR9ZnVuY3Rpb24gcShlLHQpe3ZhciBuLHIsaSxvLGE9e30scz0wLHU9ZS5kYXRhVHlwZXMuc2xpY2UoKSxsPXVbMF07aWYoZS5kYXRhRmlsdGVyJiYodD1lLmRhdGFGaWx0ZXIodCxlLmRhdGFUeXBlKSksdVsxXSlmb3IobiBpbiBlLmNvbnZlcnRlcnMpYVtuLnRvTG93ZXJDYXNlKCldPWUuY29udmVydGVyc1tuXTtmb3IoO2k9dVsrK3NdOylpZihcIipcIiE9PWkpe2lmKFwiKlwiIT09bCYmbCE9PWkpe2lmKG49YVtsK1wiIFwiK2ldfHxhW1wiKiBcIitpXSwhbilmb3IociBpbiBhKWlmKG89ci5zcGxpdChcIiBcIiksb1sxXT09PWkmJihuPWFbbCtcIiBcIitvWzBdXXx8YVtcIiogXCIrb1swXV0pKXtuPT09ITA/bj1hW3JdOmFbcl0hPT0hMCYmKGk9b1swXSx1LnNwbGljZShzLS0sMCxpKSk7YnJlYWt9aWYobiE9PSEwKWlmKG4mJmVbXCJ0aHJvd3NcIl0pdD1uKHQpO2Vsc2UgdHJ5e3Q9bih0KX1jYXRjaChjKXtyZXR1cm57c3RhdGU6XCJwYXJzZXJlcnJvclwiLGVycm9yOm4/YzpcIk5vIGNvbnZlcnNpb24gZnJvbSBcIitsK1wiIHRvIFwiK2l9fX1sPWl9cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6dH19ZnVuY3Rpb24gXygpe3RyeXtyZXR1cm4gbmV3IGUuWE1MSHR0cFJlcXVlc3R9Y2F0Y2godCl7fX1mdW5jdGlvbiBGKCl7dHJ5e3JldHVybiBuZXcgZS5BY3RpdmVYT2JqZWN0KFwiTWljcm9zb2Z0LlhNTEhUVFBcIil9Y2F0Y2godCl7fX1mdW5jdGlvbiBPKCl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtRbj10fSksUW49c3Qubm93KCl9ZnVuY3Rpb24gQihlLHQpe3N0LmVhY2godCxmdW5jdGlvbih0LG4pe2Zvcih2YXIgcj0ocnJbdF18fFtdKS5jb25jYXQocnJbXCIqXCJdKSxpPTAsbz1yLmxlbmd0aDtvPmk7aSsrKWlmKHJbaV0uY2FsbChlLHQsbikpcmV0dXJufSl9ZnVuY3Rpb24gUChlLHQsbil7dmFyIHIsaSxvPTAsYT1uci5sZW5ndGgscz1zdC5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpe2RlbGV0ZSB1LmVsZW19KSx1PWZ1bmN0aW9uKCl7aWYoaSlyZXR1cm4hMTtmb3IodmFyIHQ9UW58fE8oKSxuPU1hdGgubWF4KDAsbC5zdGFydFRpbWUrbC5kdXJhdGlvbi10KSxyPW4vbC5kdXJhdGlvbnx8MCxvPTEtcixhPTAsdT1sLnR3ZWVucy5sZW5ndGg7dT5hO2ErKylsLnR3ZWVuc1thXS5ydW4obyk7cmV0dXJuIHMubm90aWZ5V2l0aChlLFtsLG8sbl0pLDE+byYmdT9uOihzLnJlc29sdmVXaXRoKGUsW2xdKSwhMSl9LGw9cy5wcm9taXNlKHtlbGVtOmUscHJvcHM6c3QuZXh0ZW5kKHt9LHQpLG9wdHM6c3QuZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9fSxuKSxvcmlnaW5hbFByb3BlcnRpZXM6dCxvcmlnaW5hbE9wdGlvbnM6bixzdGFydFRpbWU6UW58fE8oKSxkdXJhdGlvbjpuLmR1cmF0aW9uLHR3ZWVuczpbXSxjcmVhdGVUd2VlbjpmdW5jdGlvbih0LG4pe3ZhciByPXN0LlR3ZWVuKGUsbC5vcHRzLHQsbixsLm9wdHMuc3BlY2lhbEVhc2luZ1t0XXx8bC5vcHRzLmVhc2luZyk7cmV0dXJuIGwudHdlZW5zLnB1c2gocikscn0sc3RvcDpmdW5jdGlvbih0KXt2YXIgbj0wLHI9dD9sLnR3ZWVucy5sZW5ndGg6MDtpZihpKXJldHVybiB0aGlzO2ZvcihpPSEwO3I+bjtuKyspbC50d2VlbnNbbl0ucnVuKDEpO3JldHVybiB0P3MucmVzb2x2ZVdpdGgoZSxbbCx0XSk6cy5yZWplY3RXaXRoKGUsW2wsdF0pLHRoaXN9fSksYz1sLnByb3BzO2ZvcihSKGMsbC5vcHRzLnNwZWNpYWxFYXNpbmcpO2E+bztvKyspaWYocj1ucltvXS5jYWxsKGwsZSxjLGwub3B0cykpcmV0dXJuIHI7cmV0dXJuIEIobCxjKSxzdC5pc0Z1bmN0aW9uKGwub3B0cy5zdGFydCkmJmwub3B0cy5zdGFydC5jYWxsKGUsbCksc3QuZngudGltZXIoc3QuZXh0ZW5kKHUse2VsZW06ZSxhbmltOmwscXVldWU6bC5vcHRzLnF1ZXVlfSkpLGwucHJvZ3Jlc3MobC5vcHRzLnByb2dyZXNzKS5kb25lKGwub3B0cy5kb25lLGwub3B0cy5jb21wbGV0ZSkuZmFpbChsLm9wdHMuZmFpbCkuYWx3YXlzKGwub3B0cy5hbHdheXMpfWZ1bmN0aW9uIFIoZSx0KXt2YXIgbixyLGksbyxhO2ZvcihuIGluIGUpaWYocj1zdC5jYW1lbENhc2UobiksaT10W3JdLG89ZVtuXSxzdC5pc0FycmF5KG8pJiYoaT1vWzFdLG89ZVtuXT1vWzBdKSxuIT09ciYmKGVbcl09byxkZWxldGUgZVtuXSksYT1zdC5jc3NIb29rc1tyXSxhJiZcImV4cGFuZFwiaW4gYSl7bz1hLmV4cGFuZChvKSxkZWxldGUgZVtyXTtmb3IobiBpbiBvKW4gaW4gZXx8KGVbbl09b1tuXSx0W25dPWkpfWVsc2UgdFtyXT1pfWZ1bmN0aW9uIFcoZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGMsZixwPXRoaXMsZD1lLnN0eWxlLGg9e30sZz1bXSxtPWUubm9kZVR5cGUmJncoZSk7bi5xdWV1ZXx8KGM9c3QuX3F1ZXVlSG9va3MoZSxcImZ4XCIpLG51bGw9PWMudW5xdWV1ZWQmJihjLnVucXVldWVkPTAsZj1jLmVtcHR5LmZpcmUsYy5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7Yy51bnF1ZXVlZHx8ZigpfSksYy51bnF1ZXVlZCsrLHAuYWx3YXlzKGZ1bmN0aW9uKCl7cC5hbHdheXMoZnVuY3Rpb24oKXtjLnVucXVldWVkLS0sc3QucXVldWUoZSxcImZ4XCIpLmxlbmd0aHx8Yy5lbXB0eS5maXJlKCl9KX0pKSwxPT09ZS5ub2RlVHlwZSYmKFwiaGVpZ2h0XCJpbiB0fHxcIndpZHRoXCJpbiB0KSYmKG4ub3ZlcmZsb3c9W2Qub3ZlcmZsb3csZC5vdmVyZmxvd1gsZC5vdmVyZmxvd1ldLFwiaW5saW5lXCI9PT1zdC5jc3MoZSxcImRpc3BsYXlcIikmJlwibm9uZVwiPT09c3QuY3NzKGUsXCJmbG9hdFwiKSYmKHN0LnN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCYmXCJpbmxpbmVcIiE9PVMoZS5ub2RlTmFtZSk/ZC56b29tPTE6ZC5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxuLm92ZXJmbG93JiYoZC5vdmVyZmxvdz1cImhpZGRlblwiLHN0LnN1cHBvcnQuc2hyaW5rV3JhcEJsb2Nrc3x8cC5kb25lKGZ1bmN0aW9uKCl7ZC5vdmVyZmxvdz1uLm92ZXJmbG93WzBdLGQub3ZlcmZsb3dYPW4ub3ZlcmZsb3dbMV0sZC5vdmVyZmxvd1k9bi5vdmVyZmxvd1syXX0pKTtmb3IociBpbiB0KWlmKG89dFtyXSxabi5leGVjKG8pKXtpZihkZWxldGUgdFtyXSx1PXV8fFwidG9nZ2xlXCI9PT1vLG89PT0obT9cImhpZGVcIjpcInNob3dcIikpY29udGludWU7Zy5wdXNoKHIpfWlmKGE9Zy5sZW5ndGgpe3M9c3QuX2RhdGEoZSxcImZ4c2hvd1wiKXx8c3QuX2RhdGEoZSxcImZ4c2hvd1wiLHt9KSxcImhpZGRlblwiaW4gcyYmKG09cy5oaWRkZW4pLHUmJihzLmhpZGRlbj0hbSksbT9zdChlKS5zaG93KCk6cC5kb25lKGZ1bmN0aW9uKCl7c3QoZSkuaGlkZSgpfSkscC5kb25lKGZ1bmN0aW9uKCl7dmFyIHQ7c3QuX3JlbW92ZURhdGEoZSxcImZ4c2hvd1wiKTtmb3IodCBpbiBoKXN0LnN0eWxlKGUsdCxoW3RdKX0pO2ZvcihyPTA7YT5yO3IrKylpPWdbcl0sbD1wLmNyZWF0ZVR3ZWVuKGksbT9zW2ldOjApLGhbaV09c1tpXXx8c3Quc3R5bGUoZSxpKSxpIGluIHN8fChzW2ldPWwuc3RhcnQsbSYmKGwuZW5kPWwuc3RhcnQsbC5zdGFydD1cIndpZHRoXCI9PT1pfHxcImhlaWdodFwiPT09aT8xOjApKX19ZnVuY3Rpb24gJChlLHQsbixyLGkpe3JldHVybiBuZXcgJC5wcm90b3R5cGUuaW5pdChlLHQsbixyLGkpfWZ1bmN0aW9uIEkoZSx0KXt2YXIgbixyPXtoZWlnaHQ6ZX0saT0wO2Zvcih0PXQ/MTowOzQ+aTtpKz0yLXQpbj13bltpXSxyW1wibWFyZ2luXCIrbl09cltcInBhZGRpbmdcIituXT1lO3JldHVybiB0JiYoci5vcGFjaXR5PXIud2lkdGg9ZSkscn1mdW5jdGlvbiB6KGUpe3JldHVybiBzdC5pc1dpbmRvdyhlKT9lOjk9PT1lLm5vZGVUeXBlP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OiExfXZhciBYLFUsVj1lLmRvY3VtZW50LFk9ZS5sb2NhdGlvbixKPWUualF1ZXJ5LEc9ZS4kLFE9e30sSz1bXSxaPVwiMS45LjBcIixldD1LLmNvbmNhdCx0dD1LLnB1c2gsbnQ9Sy5zbGljZSxydD1LLmluZGV4T2YsaXQ9US50b1N0cmluZyxvdD1RLmhhc093blByb3BlcnR5LGF0PVoudHJpbSxzdD1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgc3QuZm4uaW5pdChlLHQsWCl9LHV0PS9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvLnNvdXJjZSxsdD0vXFxTKy9nLGN0PS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxmdD0vXig/Oig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLHB0PS9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyxkdD0vXltcXF0sOnt9XFxzXSokLyxodD0vKD86Xnw6fCwpKD86XFxzKlxcWykrL2csZ3Q9L1xcXFwoPzpbXCJcXFxcXFwvYmZucnRdfHVbXFxkYS1mQS1GXXs0fSkvZyxtdD0vXCJbXlwiXFxcXFxcclxcbl0qXCJ8dHJ1ZXxmYWxzZXxudWxsfC0/KD86XFxkK1xcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS9nLHl0PS9eLW1zLS8sdnQ9Ly0oW1xcZGEtel0pL2dpLGJ0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX0seHQ9ZnVuY3Rpb24oKXtWLmFkZEV2ZW50TGlzdGVuZXI/KFYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIix4dCwhMSksc3QucmVhZHkoKSk6XCJjb21wbGV0ZVwiPT09Vi5yZWFkeVN0YXRlJiYoVi5kZXRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLHh0KSxzdC5yZWFkeSgpKX07c3QuZm49c3QucHJvdG90eXBlPXtqcXVlcnk6Wixjb25zdHJ1Y3RvcjpzdCxpbml0OmZ1bmN0aW9uKGUsbixyKXt2YXIgaSxvO2lmKCFlKXJldHVybiB0aGlzO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZihpPVwiPFwiPT09ZS5jaGFyQXQoMCkmJlwiPlwiPT09ZS5jaGFyQXQoZS5sZW5ndGgtMSkmJmUubGVuZ3RoPj0zP1tudWxsLGUsbnVsbF06ZnQuZXhlYyhlKSwhaXx8IWlbMV0mJm4pcmV0dXJuIW58fG4uanF1ZXJ5PyhufHxyKS5maW5kKGUpOnRoaXMuY29uc3RydWN0b3IobikuZmluZChlKTtpZihpWzFdKXtpZihuPW4gaW5zdGFuY2VvZiBzdD9uWzBdOm4sc3QubWVyZ2UodGhpcyxzdC5wYXJzZUhUTUwoaVsxXSxuJiZuLm5vZGVUeXBlP24ub3duZXJEb2N1bWVudHx8bjpWLCEwKSkscHQudGVzdChpWzFdKSYmc3QuaXNQbGFpbk9iamVjdChuKSlmb3IoaSBpbiBuKXN0LmlzRnVuY3Rpb24odGhpc1tpXSk/dGhpc1tpXShuW2ldKTp0aGlzLmF0dHIoaSxuW2ldKTtyZXR1cm4gdGhpc31pZihvPVYuZ2V0RWxlbWVudEJ5SWQoaVsyXSksbyYmby5wYXJlbnROb2RlKXtpZihvLmlkIT09aVsyXSlyZXR1cm4gci5maW5kKGUpO3RoaXMubGVuZ3RoPTEsdGhpc1swXT1vfXJldHVybiB0aGlzLmNvbnRleHQ9Vix0aGlzLnNlbGVjdG9yPWUsdGhpc31yZXR1cm4gZS5ub2RlVHlwZT8odGhpcy5jb250ZXh0PXRoaXNbMF09ZSx0aGlzLmxlbmd0aD0xLHRoaXMpOnN0LmlzRnVuY3Rpb24oZSk/ci5yZWFkeShlKTooZS5zZWxlY3RvciE9PXQmJih0aGlzLnNlbGVjdG9yPWUuc2VsZWN0b3IsdGhpcy5jb250ZXh0PWUuY29udGV4dCksc3QubWFrZUFycmF5KGUsdGhpcykpfSxzZWxlY3RvcjpcIlwiLGxlbmd0aDowLHNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGh9LHRvQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gbnQuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP3RoaXMudG9BcnJheSgpOjA+ZT90aGlzW3RoaXMubGVuZ3RoK2VdOnRoaXNbZV19LHB1c2hTdGFjazpmdW5jdGlvbihlKXt2YXIgdD1zdC5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksZSk7cmV0dXJuIHQucHJldk9iamVjdD10aGlzLHQuY29udGV4dD10aGlzLmNvbnRleHQsdH0sZWFjaDpmdW5jdGlvbihlLHQpe3JldHVybiBzdC5lYWNoKHRoaXMsZSx0KX0scmVhZHk6ZnVuY3Rpb24oZSl7cmV0dXJuIHN0LnJlYWR5LnByb21pc2UoKS5kb25lKGUpLHRoaXN9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG50LmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGVxOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGVuZ3RoLG49K2UrKDA+ZT90OjApO3JldHVybiB0aGlzLnB1c2hTdGFjayhuPj0wJiZ0Pm4/W3RoaXNbbl1dOltdKX0sbWFwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhzdC5tYXAodGhpcyxmdW5jdGlvbih0LG4pe3JldHVybiBlLmNhbGwodCxuLHQpfSkpfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKG51bGwpfSxwdXNoOnR0LHNvcnQ6W10uc29ydCxzcGxpY2U6W10uc3BsaWNlfSxzdC5mbi5pbml0LnByb3RvdHlwZT1zdC5mbixzdC5leHRlbmQ9c3QuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsbixyLGksbyxhLHM9YXJndW1lbnRzWzBdfHx7fSx1PTEsbD1hcmd1bWVudHMubGVuZ3RoLGM9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgcyYmKGM9cyxzPWFyZ3VtZW50c1sxXXx8e30sdT0yKSxcIm9iamVjdFwiPT10eXBlb2Ygc3x8c3QuaXNGdW5jdGlvbihzKXx8KHM9e30pLGw9PT11JiYocz10aGlzLC0tdSk7bD51O3UrKylpZihudWxsIT0oZT1hcmd1bWVudHNbdV0pKWZvcihuIGluIGUpcj1zW25dLGk9ZVtuXSxzIT09aSYmKGMmJmkmJihzdC5pc1BsYWluT2JqZWN0KGkpfHwobz1zdC5pc0FycmF5KGkpKSk/KG8/KG89ITEsYT1yJiZzdC5pc0FycmF5KHIpP3I6W10pOmE9ciYmc3QuaXNQbGFpbk9iamVjdChyKT9yOnt9LHNbbl09c3QuZXh0ZW5kKGMsYSxpKSk6aSE9PXQmJihzW25dPWkpKTtyZXR1cm4gc30sc3QuZXh0ZW5kKHtub0NvbmZsaWN0OmZ1bmN0aW9uKHQpe3JldHVybiBlLiQ9PT1zdCYmKGUuJD1HKSx0JiZlLmpRdWVyeT09PXN0JiYoZS5qUXVlcnk9Siksc3R9LGlzUmVhZHk6ITEscmVhZHlXYWl0OjEsaG9sZFJlYWR5OmZ1bmN0aW9uKGUpe2U/c3QucmVhZHlXYWl0Kys6c3QucmVhZHkoITApfSxyZWFkeTpmdW5jdGlvbihlKXtpZihlPT09ITA/IS0tc3QucmVhZHlXYWl0OiFzdC5pc1JlYWR5KXtpZighVi5ib2R5KXJldHVybiBzZXRUaW1lb3V0KHN0LnJlYWR5KTtzdC5pc1JlYWR5PSEwLGUhPT0hMCYmLS1zdC5yZWFkeVdhaXQ+MHx8KFUucmVzb2x2ZVdpdGgoVixbc3RdKSxzdC5mbi50cmlnZ2VyJiZzdChWKS50cmlnZ2VyKFwicmVhZHlcIikub2ZmKFwicmVhZHlcIikpfX0saXNGdW5jdGlvbjpmdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT1zdC50eXBlKGUpfSxpc0FycmF5OkFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiYXJyYXlcIj09PXN0LnR5cGUoZSl9LGlzV2luZG93OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lJiZlPT1lLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGUpe3JldHVybiFpc05hTihwYXJzZUZsb2F0KGUpKSYmaXNGaW5pdGUoZSl9LHR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/ZStcIlwiOlwib2JqZWN0XCI9PXR5cGVvZiBlfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlP1FbaXQuY2FsbChlKV18fFwib2JqZWN0XCI6dHlwZW9mIGV9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oZSl7aWYoIWV8fFwib2JqZWN0XCIhPT1zdC50eXBlKGUpfHxlLm5vZGVUeXBlfHxzdC5pc1dpbmRvdyhlKSlyZXR1cm4hMTt0cnl7aWYoZS5jb25zdHJ1Y3RvciYmIW90LmNhbGwoZSxcImNvbnN0cnVjdG9yXCIpJiYhb3QuY2FsbChlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcImlzUHJvdG90eXBlT2ZcIikpcmV0dXJuITF9Y2F0Y2gobil7cmV0dXJuITF9dmFyIHI7Zm9yKHIgaW4gZSk7cmV0dXJuIHI9PT10fHxvdC5jYWxsKGUscil9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKHQgaW4gZSlyZXR1cm4hMTtyZXR1cm4hMH0sZXJyb3I6ZnVuY3Rpb24oZSl7dGhyb3cgRXJyb3IoZSl9LHBhcnNlSFRNTDpmdW5jdGlvbihlLHQsbil7aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBudWxsO1wiYm9vbGVhblwiPT10eXBlb2YgdCYmKG49dCx0PSExKSx0PXR8fFY7dmFyIHI9cHQuZXhlYyhlKSxpPSFuJiZbXTtyZXR1cm4gcj9bdC5jcmVhdGVFbGVtZW50KHJbMV0pXToocj1zdC5idWlsZEZyYWdtZW50KFtlXSx0LGkpLGkmJnN0KGkpLnJlbW92ZSgpLHN0Lm1lcmdlKFtdLHIuY2hpbGROb2RlcykpfSxwYXJzZUpTT046ZnVuY3Rpb24obil7cmV0dXJuIGUuSlNPTiYmZS5KU09OLnBhcnNlP2UuSlNPTi5wYXJzZShuKTpudWxsPT09bj9uOlwic3RyaW5nXCI9PXR5cGVvZiBuJiYobj1zdC50cmltKG4pLG4mJmR0LnRlc3Qobi5yZXBsYWNlKGd0LFwiQFwiKS5yZXBsYWNlKG10LFwiXVwiKS5yZXBsYWNlKGh0LFwiXCIpKSk/RnVuY3Rpb24oXCJyZXR1cm4gXCIrbikoKTooc3QuZXJyb3IoXCJJbnZhbGlkIEpTT046IFwiK24pLHQpfSxwYXJzZVhNTDpmdW5jdGlvbihuKXt2YXIgcixpO2lmKCFufHxcInN0cmluZ1wiIT10eXBlb2YgbilyZXR1cm4gbnVsbDt0cnl7ZS5ET01QYXJzZXI/KGk9bmV3IERPTVBhcnNlcixyPWkucGFyc2VGcm9tU3RyaW5nKG4sXCJ0ZXh0L3htbFwiKSk6KHI9bmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpLHIuYXN5bmM9XCJmYWxzZVwiLHIubG9hZFhNTChuKSl9Y2F0Y2gobyl7cj10fXJldHVybiByJiZyLmRvY3VtZW50RWxlbWVudCYmIXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGh8fHN0LmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK24pLHJ9LG5vb3A6ZnVuY3Rpb24oKXt9LGdsb2JhbEV2YWw6ZnVuY3Rpb24odCl7dCYmc3QudHJpbSh0KSYmKGUuZXhlY1NjcmlwdHx8ZnVuY3Rpb24odCl7ZS5ldmFsLmNhbGwoZSx0KX0pKHQpfSxjYW1lbENhc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSh5dCxcIm1zLVwiKS5yZXBsYWNlKHZ0LGJ0KX0sbm9kZU5hbWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dC50b0xvd2VyQ2FzZSgpfSxlYWNoOmZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvPTAsYT1lLmxlbmd0aCxzPW4oZSk7aWYocil7aWYocylmb3IoO2E+byYmKGk9dC5hcHBseShlW29dLHIpLGkhPT0hMSk7bysrKTtlbHNlIGZvcihvIGluIGUpaWYoaT10LmFwcGx5KGVbb10sciksaT09PSExKWJyZWFrfWVsc2UgaWYocylmb3IoO2E+byYmKGk9dC5jYWxsKGVbb10sbyxlW29dKSxpIT09ITEpO28rKyk7ZWxzZSBmb3IobyBpbiBlKWlmKGk9dC5jYWxsKGVbb10sbyxlW29dKSxpPT09ITEpYnJlYWs7cmV0dXJuIGV9LHRyaW06YXQmJiFhdC5jYWxsKFwiXFx1ZmVmZlxcdTAwYTBcIik/ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/XCJcIjphdC5jYWxsKGUpfTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9cIlwiOihlK1wiXCIpLnJlcGxhY2UoY3QsXCJcIil9LG1ha2VBcnJheTpmdW5jdGlvbihlLHQpe3ZhciByPXR8fFtdO3JldHVybiBudWxsIT1lJiYobihPYmplY3QoZSkpP3N0Lm1lcmdlKHIsXCJzdHJpbmdcIj09dHlwZW9mIGU/W2VdOmUpOnR0LmNhbGwocixlKSkscn0saW5BcnJheTpmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYodCl7aWYocnQpcmV0dXJuIHJ0LmNhbGwodCxlLG4pO2ZvcihyPXQubGVuZ3RoLG49bj8wPm4/TWF0aC5tYXgoMCxyK24pOm46MDtyPm47bisrKWlmKG4gaW4gdCYmdFtuXT09PWUpcmV0dXJuIG59cmV0dXJuLTF9LG1lcmdlOmZ1bmN0aW9uKGUsbil7dmFyIHI9bi5sZW5ndGgsaT1lLmxlbmd0aCxvPTA7aWYoXCJudW1iZXJcIj09dHlwZW9mIHIpZm9yKDtyPm87bysrKWVbaSsrXT1uW29dO2Vsc2UgZm9yKDtuW29dIT09dDspZVtpKytdPW5bbysrXTtyZXR1cm4gZS5sZW5ndGg9aSxlfSxncmVwOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPVtdLG89MCxhPWUubGVuZ3RoO2ZvcihuPSEhbjthPm87bysrKXI9ISF0KGVbb10sbyksbiE9PXImJmkucHVzaChlW29dKTtyZXR1cm4gaX0sbWFwOmZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvPTAsYT1lLmxlbmd0aCxzPW4oZSksdT1bXTtpZihzKWZvcig7YT5vO28rKylpPXQoZVtvXSxvLHIpLG51bGwhPWkmJih1W3UubGVuZ3RoXT1pKTtlbHNlIGZvcihvIGluIGUpaT10KGVbb10sbyxyKSxudWxsIT1pJiYodVt1Lmxlbmd0aF09aSk7cmV0dXJuIGV0LmFwcGx5KFtdLHUpfSxndWlkOjEscHJveHk6ZnVuY3Rpb24oZSxuKXt2YXIgcixpLG87cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIG4mJihyPWVbbl0sbj1lLGU9ciksc3QuaXNGdW5jdGlvbihlKT8oaT1udC5jYWxsKGFyZ3VtZW50cywyKSxvPWZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkobnx8dGhpcyxpLmNvbmNhdChudC5jYWxsKGFyZ3VtZW50cykpKX0sby5ndWlkPWUuZ3VpZD1lLmd1aWR8fHN0Lmd1aWQrKyxvKTp0fSxhY2Nlc3M6ZnVuY3Rpb24oZSxuLHIsaSxvLGEscyl7dmFyIHU9MCxsPWUubGVuZ3RoLGM9bnVsbD09cjtpZihcIm9iamVjdFwiPT09c3QudHlwZShyKSl7bz0hMDtmb3IodSBpbiByKXN0LmFjY2VzcyhlLG4sdSxyW3VdLCEwLGEscyl9ZWxzZSBpZihpIT09dCYmKG89ITAsc3QuaXNGdW5jdGlvbihpKXx8KHM9ITApLGMmJihzPyhuLmNhbGwoZSxpKSxuPW51bGwpOihjPW4sbj1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGMuY2FsbChzdChlKSxuKX0pKSxuKSlmb3IoO2w+dTt1KyspbihlW3VdLHIscz9pOmkuY2FsbChlW3VdLHUsbihlW3VdLHIpKSk7cmV0dXJuIG8/ZTpjP24uY2FsbChlKTpsP24oZVswXSxyKTphfSxub3c6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKX19KSxzdC5yZWFkeS5wcm9taXNlPWZ1bmN0aW9uKHQpe2lmKCFVKWlmKFU9c3QuRGVmZXJyZWQoKSxcImNvbXBsZXRlXCI9PT1WLnJlYWR5U3RhdGUpc2V0VGltZW91dChzdC5yZWFkeSk7ZWxzZSBpZihWLmFkZEV2ZW50TGlzdGVuZXIpVi5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLHh0LCExKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsc3QucmVhZHksITEpO2Vsc2V7Vi5hdHRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLHh0KSxlLmF0dGFjaEV2ZW50KFwib25sb2FkXCIsc3QucmVhZHkpO3ZhciBuPSExO3RyeXtuPW51bGw9PWUuZnJhbWVFbGVtZW50JiZWLmRvY3VtZW50RWxlbWVudH1jYXRjaChyKXt9biYmbi5kb1Njcm9sbCYmZnVuY3Rpb24gaSgpe2lmKCFzdC5pc1JlYWR5KXt0cnl7bi5kb1Njcm9sbChcImxlZnRcIil9Y2F0Y2goZSl7cmV0dXJuIHNldFRpbWVvdXQoaSw1MCl9c3QucmVhZHkoKX19KCl9cmV0dXJuIFUucHJvbWlzZSh0KX0sc3QuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3JcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oZSx0KXtRW1wiW29iamVjdCBcIit0K1wiXVwiXT10LnRvTG93ZXJDYXNlKCl9KSxYPXN0KFYpO3ZhciBUdD17fTtzdC5DYWxsYmFja3M9ZnVuY3Rpb24oZSl7ZT1cInN0cmluZ1wiPT10eXBlb2YgZT9UdFtlXXx8cihlKTpzdC5leHRlbmQoe30sZSk7dmFyIG4saSxvLGEscyx1LGw9W10sYz0hZS5vbmNlJiZbXSxmPWZ1bmN0aW9uKHQpe2ZvcihuPWUubWVtb3J5JiZ0LGk9ITAsdT1hfHwwLGE9MCxzPWwubGVuZ3RoLG89ITA7bCYmcz51O3UrKylpZihsW3VdLmFwcGx5KHRbMF0sdFsxXSk9PT0hMSYmZS5zdG9wT25GYWxzZSl7bj0hMTticmVha31vPSExLGwmJihjP2MubGVuZ3RoJiZmKGMuc2hpZnQoKSk6bj9sPVtdOnAuZGlzYWJsZSgpKX0scD17YWRkOmZ1bmN0aW9uKCl7aWYobCl7dmFyIHQ9bC5sZW5ndGg7KGZ1bmN0aW9uIHIodCl7c3QuZWFjaCh0LGZ1bmN0aW9uKHQsbil7dmFyIGk9c3QudHlwZShuKTtcImZ1bmN0aW9uXCI9PT1pP2UudW5pcXVlJiZwLmhhcyhuKXx8bC5wdXNoKG4pOm4mJm4ubGVuZ3RoJiZcInN0cmluZ1wiIT09aSYmcihuKX0pfSkoYXJndW1lbnRzKSxvP3M9bC5sZW5ndGg6biYmKGE9dCxmKG4pKX1yZXR1cm4gdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIGwmJnN0LmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuOyhuPXN0LmluQXJyYXkodCxsLG4pKT4tMTspbC5zcGxpY2UobiwxKSxvJiYocz49biYmcy0tLHU+PW4mJnUtLSl9KSx0aGlzfSxoYXM6ZnVuY3Rpb24oZSl7cmV0dXJuIHN0LmluQXJyYXkoZSxsKT4tMX0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gbD1bXSx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGw9Yz1uPXQsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hbH0sbG9jazpmdW5jdGlvbigpe3JldHVybiBjPXQsbnx8cC5kaXNhYmxlKCksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuIWN9LGZpcmVXaXRoOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8W10sdD1bZSx0LnNsaWNlP3Quc2xpY2UoKTp0XSwhbHx8aSYmIWN8fChvP2MucHVzaCh0KTpmKHQpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIHAuZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFpfX07cmV0dXJuIHB9LHN0LmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9W1tcInJlc29sdmVcIixcImRvbmVcIixzdC5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcInJlc29sdmVkXCJdLFtcInJlamVjdFwiLFwiZmFpbFwiLHN0LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFwicmVqZWN0ZWRcIl0sW1wibm90aWZ5XCIsXCJwcm9ncmVzc1wiLHN0LkNhbGxiYWNrcyhcIm1lbW9yeVwiKV1dLG49XCJwZW5kaW5nXCIscj17c3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIGkuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSx0aGlzfSx0aGVuOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzO3JldHVybiBzdC5EZWZlcnJlZChmdW5jdGlvbihuKXtzdC5lYWNoKHQsZnVuY3Rpb24odCxvKXt2YXIgYT1vWzBdLHM9c3QuaXNGdW5jdGlvbihlW3RdKSYmZVt0XTtpW29bMV1dKGZ1bmN0aW9uKCl7dmFyIGU9cyYmcy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7ZSYmc3QuaXNGdW5jdGlvbihlLnByb21pc2UpP2UucHJvbWlzZSgpLmRvbmUobi5yZXNvbHZlKS5mYWlsKG4ucmVqZWN0KS5wcm9ncmVzcyhuLm5vdGlmeSk6blthK1wiV2l0aFwiXSh0aGlzPT09cj9uLnByb21pc2UoKTp0aGlzLHM/W2VdOmFyZ3VtZW50cyl9KX0pLGU9bnVsbH0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZT9zdC5leHRlbmQoZSxyKTpyfX0saT17fTtyZXR1cm4gci5waXBlPXIudGhlbixzdC5lYWNoKHQsZnVuY3Rpb24oZSxvKXt2YXIgYT1vWzJdLHM9b1szXTtyW29bMV1dPWEuYWRkLHMmJmEuYWRkKGZ1bmN0aW9uKCl7bj1zfSx0WzFeZV1bMl0uZGlzYWJsZSx0WzJdWzJdLmxvY2spLGlbb1swXV09ZnVuY3Rpb24oKXtyZXR1cm4gaVtvWzBdK1wiV2l0aFwiXSh0aGlzPT09aT9yOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxpW29bMF0rXCJXaXRoXCJdPWEuZmlyZVdpdGh9KSxyLnByb21pc2UoaSksZSYmZS5jYWxsKGksaSksaX0sd2hlbjpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaT0wLG89bnQuY2FsbChhcmd1bWVudHMpLGE9by5sZW5ndGgscz0xIT09YXx8ZSYmc3QuaXNGdW5jdGlvbihlLnByb21pc2UpP2E6MCx1PTE9PT1zP2U6c3QuRGVmZXJyZWQoKSxsPWZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gZnVuY3Rpb24oaSl7bltlXT10aGlzLHJbZV09YXJndW1lbnRzLmxlbmd0aD4xP250LmNhbGwoYXJndW1lbnRzKTppLHI9PT10P3Uubm90aWZ5V2l0aChuLHIpOi0tc3x8dS5yZXNvbHZlV2l0aChuLHIpfX07aWYoYT4xKWZvcih0PUFycmF5KGEpLG49QXJyYXkoYSkscj1BcnJheShhKTthPmk7aSsrKW9baV0mJnN0LmlzRnVuY3Rpb24ob1tpXS5wcm9taXNlKT9vW2ldLnByb21pc2UoKS5kb25lKGwoaSxyLG8pKS5mYWlsKHUucmVqZWN0KS5wcm9ncmVzcyhsKGksbix0KSk6LS1zO3JldHVybiBzfHx1LnJlc29sdmVXaXRoKHIsbyksdS5wcm9taXNlKCl9fSksc3Quc3VwcG9ydD1mdW5jdGlvbigpe3ZhciBuLHIsaSxvLGEscyx1LGwsYyxmLHA9Vi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2lmKHAuc2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIsXCJ0XCIpLHAuaW5uZXJIVE1MPVwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCIscj1wLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSxpPXAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpWzBdLCFyfHwhaXx8IXIubGVuZ3RoKXJldHVybnt9O289Vi5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLGE9by5hcHBlbmRDaGlsZChWLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLHM9cC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdLGkuc3R5bGUuY3NzVGV4dD1cInRvcDoxcHg7ZmxvYXQ6bGVmdDtvcGFjaXR5Oi41XCIsbj17Z2V0U2V0QXR0cmlidXRlOlwidFwiIT09cC5jbGFzc05hbWUsbGVhZGluZ1doaXRlc3BhY2U6Mz09PXAuZmlyc3RDaGlsZC5ub2RlVHlwZSx0Ym9keTohcC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpLmxlbmd0aCxodG1sU2VyaWFsaXplOiEhcC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIikubGVuZ3RoLHN0eWxlOi90b3AvLnRlc3QoaS5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKSksaHJlZk5vcm1hbGl6ZWQ6XCIvYVwiPT09aS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLG9wYWNpdHk6L14wLjUvLnRlc3QoaS5zdHlsZS5vcGFjaXR5KSxjc3NGbG9hdDohIWkuc3R5bGUuY3NzRmxvYXQsY2hlY2tPbjohIXMudmFsdWUsb3B0U2VsZWN0ZWQ6YS5zZWxlY3RlZCxlbmN0eXBlOiEhVi5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKS5lbmN0eXBlLGh0bWw1Q2xvbmU6XCI8Om5hdj48LzpuYXY+XCIhPT1WLmNyZWF0ZUVsZW1lbnQoXCJuYXZcIikuY2xvbmVOb2RlKCEwKS5vdXRlckhUTUwsYm94TW9kZWw6XCJDU1MxQ29tcGF0XCI9PT1WLmNvbXBhdE1vZGUsZGVsZXRlRXhwYW5kbzohMCxub0Nsb25lRXZlbnQ6ITAsaW5saW5lQmxvY2tOZWVkc0xheW91dDohMSxzaHJpbmtXcmFwQmxvY2tzOiExLHJlbGlhYmxlTWFyZ2luUmlnaHQ6ITAsYm94U2l6aW5nUmVsaWFibGU6ITAscGl4ZWxQb3NpdGlvbjohMX0scy5jaGVja2VkPSEwLG4ubm9DbG9uZUNoZWNrZWQ9cy5jbG9uZU5vZGUoITApLmNoZWNrZWQsby5kaXNhYmxlZD0hMCxuLm9wdERpc2FibGVkPSFhLmRpc2FibGVkO3RyeXtkZWxldGUgcC50ZXN0fWNhdGNoKGQpe24uZGVsZXRlRXhwYW5kbz0hMX1zPVYuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLHMuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxuLmlucHV0PVwiXCI9PT1zLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpLHMudmFsdWU9XCJ0XCIscy5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJyYWRpb1wiKSxuLnJhZGlvVmFsdWU9XCJ0XCI9PT1zLnZhbHVlLHMuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLFwidFwiKSxzLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcInRcIiksdT1WLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSx1LmFwcGVuZENoaWxkKHMpLG4uYXBwZW5kQ2hlY2tlZD1zLmNoZWNrZWQsbi5jaGVja0Nsb25lPXUuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLHAuYXR0YWNoRXZlbnQmJihwLmF0dGFjaEV2ZW50KFwib25jbGlja1wiLGZ1bmN0aW9uKCl7bi5ub0Nsb25lRXZlbnQ9ITF9KSxwLmNsb25lTm9kZSghMCkuY2xpY2soKSk7Zm9yKGYgaW57c3VibWl0OiEwLGNoYW5nZTohMCxmb2N1c2luOiEwfSlwLnNldEF0dHJpYnV0ZShsPVwib25cIitmLFwidFwiKSxuW2YrXCJCdWJibGVzXCJdPWwgaW4gZXx8cC5hdHRyaWJ1dGVzW2xdLmV4cGFuZG89PT0hMTtyZXR1cm4gcC5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cImNvbnRlbnQtYm94XCIscC5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiXCIsbi5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09cC5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxzdChmdW5jdGlvbigpe3ZhciByLGksbyxhPVwicGFkZGluZzowO21hcmdpbjowO2JvcmRlcjowO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiLHM9Vi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07cyYmKHI9Vi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHIuc3R5bGUuY3NzVGV4dD1cImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4XCIscy5hcHBlbmRDaGlsZChyKS5hcHBlbmRDaGlsZChwKSxwLmlubmVySFRNTD1cIjx0YWJsZT48dHI+PHRkPjwvdGQ+PHRkPnQ8L3RkPjwvdHI+PC90YWJsZT5cIixvPXAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZFwiKSxvWzBdLnN0eWxlLmNzc1RleHQ9XCJwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjA7ZGlzcGxheTpub25lXCIsYz0wPT09b1swXS5vZmZzZXRIZWlnaHQsb1swXS5zdHlsZS5kaXNwbGF5PVwiXCIsb1sxXS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLG4ucmVsaWFibGVIaWRkZW5PZmZzZXRzPWMmJjA9PT1vWzBdLm9mZnNldEhlaWdodCxwLmlubmVySFRNTD1cIlwiLHAuc3R5bGUuY3NzVGV4dD1cImJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjFweDtib3JkZXI6MXB4O2Rpc3BsYXk6YmxvY2s7d2lkdGg6NHB4O21hcmdpbi10b3A6MSU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjElO1wiLG4uYm94U2l6aW5nPTQ9PT1wLm9mZnNldFdpZHRoLG4uZG9lc05vdEluY2x1ZGVNYXJnaW5JbkJvZHlPZmZzZXQ9MSE9PXMub2Zmc2V0VG9wLGUuZ2V0Q29tcHV0ZWRTdHlsZSYmKG4ucGl4ZWxQb3NpdGlvbj1cIjElXCIhPT0oZS5nZXRDb21wdXRlZFN0eWxlKHAsbnVsbCl8fHt9KS50b3Asbi5ib3hTaXppbmdSZWxpYWJsZT1cIjRweFwiPT09KGUuZ2V0Q29tcHV0ZWRTdHlsZShwLG51bGwpfHx7d2lkdGg6XCI0cHhcIn0pLndpZHRoLGk9cC5hcHBlbmRDaGlsZChWLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLGkuc3R5bGUuY3NzVGV4dD1wLnN0eWxlLmNzc1RleHQ9YSxpLnN0eWxlLm1hcmdpblJpZ2h0PWkuc3R5bGUud2lkdGg9XCIwXCIscC5zdHlsZS53aWR0aD1cIjFweFwiLG4ucmVsaWFibGVNYXJnaW5SaWdodD0hcGFyc2VGbG9hdCgoZS5nZXRDb21wdXRlZFN0eWxlKGksbnVsbCl8fHt9KS5tYXJnaW5SaWdodCkpLHAuc3R5bGUuem9vbSE9PXQmJihwLmlubmVySFRNTD1cIlwiLHAuc3R5bGUuY3NzVGV4dD1hK1wid2lkdGg6MXB4O3BhZGRpbmc6MXB4O2Rpc3BsYXk6aW5saW5lO3pvb206MVwiLG4uaW5saW5lQmxvY2tOZWVkc0xheW91dD0zPT09cC5vZmZzZXRXaWR0aCxwLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLHAuaW5uZXJIVE1MPVwiPGRpdj48L2Rpdj5cIixwLmZpcnN0Q2hpbGQuc3R5bGUud2lkdGg9XCI1cHhcIixuLnNocmlua1dyYXBCbG9ja3M9MyE9PXAub2Zmc2V0V2lkdGgscy5zdHlsZS56b29tPTEpLHMucmVtb3ZlQ2hpbGQocikscj1wPW89aT1udWxsKX0pLHI9bz11PWE9aT1zPW51bGwsbn0oKTt2YXIgd3Q9Lyg/Olxce1tcXHNcXFNdKlxcfXxcXFtbXFxzXFxTXSpcXF0pJC8sTnQ9LyhbQS1aXSkvZztzdC5leHRlbmQoe2NhY2hlOnt9LGV4cGFuZG86XCJqUXVlcnlcIisoWitNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZyxcIlwiKSxub0RhdGE6e2VtYmVkOiEwLG9iamVjdDpcImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMFwiLGFwcGxldDohMH0saGFzRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gZT1lLm5vZGVUeXBlP3N0LmNhY2hlW2Vbc3QuZXhwYW5kb11dOmVbc3QuZXhwYW5kb10sISFlJiYhcyhlKX0sZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGkoZSx0LG4sITEpfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8oZSx0LCExKX0sX2RhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBpKGUsdCxuLCEwKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbyhlLHQsITApfSxhY2NlcHREYXRhOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUmJnN0Lm5vRGF0YVtlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldO3JldHVybiF0fHx0IT09ITAmJmUuZ2V0QXR0cmlidXRlKFwiY2xhc3NpZFwiKT09PXR9fSksc3QuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKGUsbil7dmFyIHIsaSxvPXRoaXNbMF0scz0wLHU9bnVsbDtpZihlPT09dCl7aWYodGhpcy5sZW5ndGgmJih1PXN0LmRhdGEobyksMT09PW8ubm9kZVR5cGUmJiFzdC5fZGF0YShvLFwicGFyc2VkQXR0cnNcIikpKXtmb3Iocj1vLmF0dHJpYnV0ZXM7ci5sZW5ndGg+cztzKyspaT1yW3NdLm5hbWUsaS5pbmRleE9mKFwiZGF0YS1cIil8fChpPXN0LmNhbWVsQ2FzZShpLnN1YnN0cmluZyg1KSksYShvLGksdVtpXSkpO3N0Ll9kYXRhKG8sXCJwYXJzZWRBdHRyc1wiLCEwKX1yZXR1cm4gdX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZT90aGlzLmVhY2goZnVuY3Rpb24oKXtzdC5kYXRhKHRoaXMsZSl9KTpzdC5hY2Nlc3ModGhpcyxmdW5jdGlvbihuKXtyZXR1cm4gbj09PXQ/bz9hKG8sZSxzdC5kYXRhKG8sZSkpOm51bGw6KHRoaXMuZWFjaChmdW5jdGlvbigpe3N0LmRhdGEodGhpcyxlLG4pfSksdCl9LG51bGwsbixhcmd1bWVudHMubGVuZ3RoPjEsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3N0LnJlbW92ZURhdGEodGhpcyxlKX0pfX0pLHN0LmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpO3JldHVybiBlPyhuPShufHxcImZ4XCIpK1wicXVldWVcIixpPXN0Ll9kYXRhKGUsbiksciYmKCFpfHxzdC5pc0FycmF5KHIpP2k9c3QuX2RhdGEoZSxuLHN0Lm1ha2VBcnJheShyKSk6aS5wdXNoKHIpKSxpfHxbXSk6dH0sZGVxdWV1ZTpmdW5jdGlvbihlLHQpe3Q9dHx8XCJmeFwiO3ZhciBuPXN0LnF1ZXVlKGUsdCkscj1uLmxlbmd0aCxpPW4uc2hpZnQoKSxvPXN0Ll9xdWV1ZUhvb2tzKGUsdCksYT1mdW5jdGlvbigpe3N0LmRlcXVldWUoZSx0KX07XCJpbnByb2dyZXNzXCI9PT1pJiYoaT1uLnNoaWZ0KCksci0tKSxvLmN1cj1pLGkmJihcImZ4XCI9PT10JiZuLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBvLnN0b3AsaS5jYWxsKGUsYSxvKSksIXImJm8mJm8uZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihlLHQpe3ZhciBuPXQrXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIHN0Ll9kYXRhKGUsbil8fHN0Ll9kYXRhKGUsbix7ZW1wdHk6c3QuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCl7c3QuX3JlbW92ZURhdGEoZSx0K1wicXVldWVcIiksc3QuX3JlbW92ZURhdGEoZSxuKX0pfSl9fSksc3QuZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihlLG4pe3ZhciByPTI7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGUmJihuPWUsZT1cImZ4XCIsci0tKSxyPmFyZ3VtZW50cy5sZW5ndGg/c3QucXVldWUodGhpc1swXSxlKTpuPT09dD90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PXN0LnF1ZXVlKHRoaXMsZSxuKTtzdC5fcXVldWVIb29rcyh0aGlzLGUpLFwiZnhcIj09PWUmJlwiaW5wcm9ncmVzc1wiIT09dFswXSYmc3QuZGVxdWV1ZSh0aGlzLGUpfSl9LGRlcXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3N0LmRlcXVldWUodGhpcyxlKX0pfSxkZWxheTpmdW5jdGlvbihlLHQpe3JldHVybiBlPXN0LmZ4P3N0LmZ4LnNwZWVkc1tlXXx8ZTplLHQ9dHx8XCJmeFwiLHRoaXMucXVldWUodCxmdW5jdGlvbih0LG4pe3ZhciByPXNldFRpbWVvdXQodCxlKTtuLnN0b3A9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocil9fSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucXVldWUoZXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihlLG4pe3ZhciByLGk9MSxvPXN0LkRlZmVycmVkKCksYT10aGlzLHM9dGhpcy5sZW5ndGgsdT1mdW5jdGlvbigpey0taXx8by5yZXNvbHZlV2l0aChhLFthXSl9O2ZvcihcInN0cmluZ1wiIT10eXBlb2YgZSYmKG49ZSxlPXQpLGU9ZXx8XCJmeFwiO3MtLTspcj1zdC5fZGF0YShhW3NdLGUrXCJxdWV1ZUhvb2tzXCIpLHImJnIuZW1wdHkmJihpKyssci5lbXB0eS5hZGQodSkpO3JldHVybiB1KCksby5wcm9taXNlKG4pfX0pO3ZhciBDdCxrdCxFdD0vW1xcdFxcclxcbl0vZyxTdD0vXFxyL2csQXQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdCkkL2ksanQ9L14oPzphfGFyZWEpJC9pLER0PS9eKD86Y2hlY2tlZHxzZWxlY3RlZHxhdXRvZm9jdXN8YXV0b3BsYXl8YXN5bmN8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWQpJC9pLEx0PS9eKD86Y2hlY2tlZHxzZWxlY3RlZCkkL2ksSHQ9c3Quc3VwcG9ydC5nZXRTZXRBdHRyaWJ1dGUsTXQ9c3Quc3VwcG9ydC5pbnB1dDtzdC5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gc3QuYWNjZXNzKHRoaXMsc3QuYXR0cixlLHQsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7c3QucmVtb3ZlQXR0cih0aGlzLGUpfSl9LHByb3A6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gc3QuYWNjZXNzKHRoaXMsc3QucHJvcCxlLHQsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihlKXtyZXR1cm4gZT1zdC5wcm9wRml4W2VdfHxlLHRoaXMuZWFjaChmdW5jdGlvbigpe3RyeXt0aGlzW2VdPXQsZGVsZXRlIHRoaXNbZV19Y2F0Y2gobil7fX0pfSxhZGRDbGFzczpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLGE9MCxzPXRoaXMubGVuZ3RoLHU9XCJzdHJpbmdcIj09dHlwZW9mIGUmJmU7aWYoc3QuaXNGdW5jdGlvbihlKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKHQpe3N0KHRoaXMpLmFkZENsYXNzKGUuY2FsbCh0aGlzLHQsdGhpcy5jbGFzc05hbWUpKX0pO2lmKHUpZm9yKHQ9KGV8fFwiXCIpLm1hdGNoKGx0KXx8W107cz5hO2ErKylpZihuPXRoaXNbYV0scj0xPT09bi5ub2RlVHlwZSYmKG4uY2xhc3NOYW1lPyhcIiBcIituLmNsYXNzTmFtZStcIiBcIikucmVwbGFjZShFdCxcIiBcIik6XCIgXCIpKXtmb3Iobz0wO2k9dFtvKytdOykwPnIuaW5kZXhPZihcIiBcIitpK1wiIFwiKSYmKHIrPWkrXCIgXCIpO24uY2xhc3NOYW1lPXN0LnRyaW0ocil9cmV0dXJuIHRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sYT0wLHM9dGhpcy5sZW5ndGgsdT0wPT09YXJndW1lbnRzLmxlbmd0aHx8XCJzdHJpbmdcIj09dHlwZW9mIGUmJmU7aWYoc3QuaXNGdW5jdGlvbihlKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKHQpe3N0KHRoaXMpLnJlbW92ZUNsYXNzKGUuY2FsbCh0aGlzLHQsdGhpcy5jbGFzc05hbWUpKX0pO2lmKHUpZm9yKHQ9KGV8fFwiXCIpLm1hdGNoKGx0KXx8W107cz5hO2ErKylpZihuPXRoaXNbYV0scj0xPT09bi5ub2RlVHlwZSYmKG4uY2xhc3NOYW1lPyhcIiBcIituLmNsYXNzTmFtZStcIiBcIikucmVwbGFjZShFdCxcIiBcIik6XCJcIikpe2ZvcihvPTA7aT10W28rK107KWZvcig7ci5pbmRleE9mKFwiIFwiK2krXCIgXCIpPj0wOylyPXIucmVwbGFjZShcIiBcIitpK1wiIFwiLFwiIFwiKTtuLmNsYXNzTmFtZT1lP3N0LnRyaW0ocik6XCJcIn1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj10eXBlb2YgZSxyPVwiYm9vbGVhblwiPT10eXBlb2YgdDtyZXR1cm4gc3QuaXNGdW5jdGlvbihlKT90aGlzLmVhY2goZnVuY3Rpb24obil7c3QodGhpcykudG9nZ2xlQ2xhc3MoZS5jYWxsKHRoaXMsbix0aGlzLmNsYXNzTmFtZSx0KSx0KX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe2lmKFwic3RyaW5nXCI9PT1uKWZvcih2YXIgaSxvPTAsYT1zdCh0aGlzKSxzPXQsdT1lLm1hdGNoKGx0KXx8W107aT11W28rK107KXM9cj9zOiFhLmhhc0NsYXNzKGkpLGFbcz9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXShpKTtlbHNlKFwidW5kZWZpbmVkXCI9PT1ufHxcImJvb2xlYW5cIj09PW4pJiYodGhpcy5jbGFzc05hbWUmJnN0Ll9kYXRhKHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIsdGhpcy5jbGFzc05hbWUpLHRoaXMuY2xhc3NOYW1lPXRoaXMuY2xhc3NOYW1lfHxlPT09ITE/XCJcIjpzdC5fZGF0YSh0aGlzLFwiX19jbGFzc05hbWVfX1wiKXx8XCJcIil9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiIFwiK2UrXCIgXCIsbj0wLHI9dGhpcy5sZW5ndGg7cj5uO24rKylpZigxPT09dGhpc1tuXS5ub2RlVHlwZSYmKFwiIFwiK3RoaXNbbl0uY2xhc3NOYW1lK1wiIFwiKS5yZXBsYWNlKEV0LFwiIFwiKS5pbmRleE9mKHQpPj0wKXJldHVybiEwO3JldHVybiExfSx2YWw6ZnVuY3Rpb24oZSl7dmFyIG4scixpLG89dGhpc1swXTt7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gaT1zdC5pc0Z1bmN0aW9uKGUpLHRoaXMuZWFjaChmdW5jdGlvbihyKXt2YXIgbyxhPXN0KHRoaXMpOzE9PT10aGlzLm5vZGVUeXBlJiYobz1pP2UuY2FsbCh0aGlzLHIsYS52YWwoKSk6ZSxudWxsPT1vP289XCJcIjpcIm51bWJlclwiPT10eXBlb2Ygbz9vKz1cIlwiOnN0LmlzQXJyYXkobykmJihvPXN0Lm1hcChvLGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP1wiXCI6ZStcIlwifSkpLG49c3QudmFsSG9va3NbdGhpcy50eXBlXXx8c3QudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxuJiZcInNldFwiaW4gbiYmbi5zZXQodGhpcyxvLFwidmFsdWVcIikhPT10fHwodGhpcy52YWx1ZT1vKSl9KTtpZihvKXJldHVybiBuPXN0LnZhbEhvb2tzW28udHlwZV18fHN0LnZhbEhvb2tzW28ubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sbiYmXCJnZXRcImluIG4mJihyPW4uZ2V0KG8sXCJ2YWx1ZVwiKSkhPT10P3I6KHI9by52YWx1ZSxcInN0cmluZ1wiPT10eXBlb2Ygcj9yLnJlcGxhY2UoU3QsXCJcIik6bnVsbD09cj9cIlwiOnIpfX19KSxzdC5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihlKXt2YXIgdD1lLmF0dHJpYnV0ZXMudmFsdWU7cmV0dXJuIXR8fHQuc3BlY2lmaWVkP2UudmFsdWU6ZS50ZXh0fX0sc2VsZWN0OntnZXQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG4scj1lLm9wdGlvbnMsaT1lLnNlbGVjdGVkSW5kZXgsbz1cInNlbGVjdC1vbmVcIj09PWUudHlwZXx8MD5pLGE9bz9udWxsOltdLHM9bz9pKzE6ci5sZW5ndGgsdT0wPmk/czpvP2k6MDtzPnU7dSsrKWlmKG49clt1XSwhKCFuLnNlbGVjdGVkJiZ1IT09aXx8KHN0LnN1cHBvcnQub3B0RGlzYWJsZWQ/bi5kaXNhYmxlZDpudWxsIT09bi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSl8fG4ucGFyZW50Tm9kZS5kaXNhYmxlZCYmc3Qubm9kZU5hbWUobi5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZih0PXN0KG4pLnZhbCgpLG8pcmV0dXJuIHQ7YS5wdXNoKHQpfXJldHVybiBhfSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1zdC5tYWtlQXJyYXkodCk7cmV0dXJuIHN0KGUpLmZpbmQoXCJvcHRpb25cIikuZWFjaChmdW5jdGlvbigpe3RoaXMuc2VsZWN0ZWQ9c3QuaW5BcnJheShzdCh0aGlzKS52YWwoKSxuKT49MH0pLG4ubGVuZ3RofHwoZS5zZWxlY3RlZEluZGV4PS0xKSxufX19LGF0dHI6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpLG8sYSxzPWUubm9kZVR5cGU7aWYoZSYmMyE9PXMmJjghPT1zJiYyIT09cylyZXR1cm4gZS5nZXRBdHRyaWJ1dGU9PT10P3N0LnByb3AoZSxuLHIpOihhPTEhPT1zfHwhc3QuaXNYTUxEb2MoZSksYSYmKG49bi50b0xvd2VyQ2FzZSgpLG89c3QuYXR0ckhvb2tzW25dfHwoRHQudGVzdChuKT9rdDpDdCkpLHI9PT10P28mJmEmJlwiZ2V0XCJpbiBvJiZudWxsIT09KGk9by5nZXQoZSxuKSk/aTooZS5nZXRBdHRyaWJ1dGUhPT10JiYoaT1lLmdldEF0dHJpYnV0ZShuKSksbnVsbD09aT90OmkpOm51bGwhPT1yP28mJmEmJlwic2V0XCJpbiBvJiYoaT1vLnNldChlLHIsbikpIT09dD9pOihlLnNldEF0dHJpYnV0ZShuLHIrXCJcIikscik6KHN0LnJlbW92ZUF0dHIoZSxuKSx0KSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk9MCxvPXQmJnQubWF0Y2gobHQpO2lmKG8mJjE9PT1lLm5vZGVUeXBlKWZvcig7bj1vW2krK107KXI9c3QucHJvcEZpeFtuXXx8bixEdC50ZXN0KG4pPyFIdCYmTHQudGVzdChuKT9lW3N0LmNhbWVsQ2FzZShcImRlZmF1bHQtXCIrbildPWVbcl09ITE6ZVtyXT0hMTpzdC5hdHRyKGUsbixcIlwiKSxlLnJlbW92ZUF0dHJpYnV0ZShIdD9uOnIpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihlLHQpe2lmKCFzdC5zdXBwb3J0LnJhZGlvVmFsdWUmJlwicmFkaW9cIj09PXQmJnN0Lm5vZGVOYW1lKGUsXCJpbnB1dFwiKSl7dmFyIG49ZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsdCksbiYmKGUudmFsdWU9biksdH19fX0scHJvcEZpeDp7dGFiaW5kZXg6XCJ0YWJJbmRleFwiLHJlYWRvbmx5OlwicmVhZE9ubHlcIixcImZvclwiOlwiaHRtbEZvclwiLFwiY2xhc3NcIjpcImNsYXNzTmFtZVwiLG1heGxlbmd0aDpcIm1heExlbmd0aFwiLGNlbGxzcGFjaW5nOlwiY2VsbFNwYWNpbmdcIixjZWxscGFkZGluZzpcImNlbGxQYWRkaW5nXCIscm93c3BhbjpcInJvd1NwYW5cIixjb2xzcGFuOlwiY29sU3BhblwiLHVzZW1hcDpcInVzZU1hcFwiLGZyYW1lYm9yZGVyOlwiZnJhbWVCb3JkZXJcIixjb250ZW50ZWRpdGFibGU6XCJjb250ZW50RWRpdGFibGVcIn0scHJvcDpmdW5jdGlvbihlLG4scil7dmFyIGksbyxhLHM9ZS5ub2RlVHlwZTtpZihlJiYzIT09cyYmOCE9PXMmJjIhPT1zKXJldHVybiBhPTEhPT1zfHwhc3QuaXNYTUxEb2MoZSksYSYmKG49c3QucHJvcEZpeFtuXXx8bixvPXN0LnByb3BIb29rc1tuXSksciE9PXQ/byYmXCJzZXRcImluIG8mJihpPW8uc2V0KGUscixuKSkhPT10P2k6ZVtuXT1yOm8mJlwiZ2V0XCJpbiBvJiZudWxsIT09KGk9by5nZXQoZSxuKSk/aTplW25dfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS5nZXRBdHRyaWJ1dGVOb2RlKFwidGFiaW5kZXhcIik7cmV0dXJuIG4mJm4uc3BlY2lmaWVkP3BhcnNlSW50KG4udmFsdWUsMTApOkF0LnRlc3QoZS5ub2RlTmFtZSl8fGp0LnRlc3QoZS5ub2RlTmFtZSkmJmUuaHJlZj8wOnR9fX19KSxrdD17Z2V0OmZ1bmN0aW9uKGUsbil7dmFyIHI9c3QucHJvcChlLG4pLGk9XCJib29sZWFuXCI9PXR5cGVvZiByJiZlLmdldEF0dHJpYnV0ZShuKSxvPVwiYm9vbGVhblwiPT10eXBlb2Ygcj9NdCYmSHQ/bnVsbCE9aTpMdC50ZXN0KG4pP2Vbc3QuY2FtZWxDYXNlKFwiZGVmYXVsdC1cIituKV06ISFpOmUuZ2V0QXR0cmlidXRlTm9kZShuKTtyZXR1cm4gbyYmby52YWx1ZSE9PSExP24udG9Mb3dlckNhc2UoKTp0fSxzZXQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0PT09ITE/c3QucmVtb3ZlQXR0cihlLG4pOk10JiZIdHx8IUx0LnRlc3Qobik/ZS5zZXRBdHRyaWJ1dGUoIUh0JiZzdC5wcm9wRml4W25dfHxuLG4pOmVbc3QuY2FtZWxDYXNlKFwiZGVmYXVsdC1cIituKV09ZVtuXT0hMCxufX0sTXQmJkh0fHwoc3QuYXR0ckhvb2tzLnZhbHVlPXtnZXQ6ZnVuY3Rpb24oZSxuKXt2YXIgcj1lLmdldEF0dHJpYnV0ZU5vZGUobik7cmV0dXJuIHN0Lm5vZGVOYW1lKGUsXCJpbnB1dFwiKT9lLmRlZmF1bHRWYWx1ZTpyJiZyLnNwZWNpZmllZD9yLnZhbHVlOnRcbn0sc2V0OmZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gc3Qubm9kZU5hbWUoZSxcImlucHV0XCIpPyhlLmRlZmF1bHRWYWx1ZT1uLHQpOkN0JiZDdC5zZXQoZSxuLHIpfX0pLEh0fHwoQ3Q9c3QudmFsSG9va3MuYnV0dG9uPXtnZXQ6ZnVuY3Rpb24oZSxuKXt2YXIgcj1lLmdldEF0dHJpYnV0ZU5vZGUobik7cmV0dXJuIHImJihcImlkXCI9PT1ufHxcIm5hbWVcIj09PW58fFwiY29vcmRzXCI9PT1uP1wiXCIhPT1yLnZhbHVlOnIuc3BlY2lmaWVkKT9yLnZhbHVlOnR9LHNldDpmdW5jdGlvbihlLG4scil7dmFyIGk9ZS5nZXRBdHRyaWJ1dGVOb2RlKHIpO3JldHVybiBpfHxlLnNldEF0dHJpYnV0ZU5vZGUoaT1lLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKHIpKSxpLnZhbHVlPW4rPVwiXCIsXCJ2YWx1ZVwiPT09cnx8bj09PWUuZ2V0QXR0cmlidXRlKHIpP246dH19LHN0LmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGU9e2dldDpDdC5nZXQsc2V0OmZ1bmN0aW9uKGUsdCxuKXtDdC5zZXQoZSxcIlwiPT09dD8hMTp0LG4pfX0sc3QuZWFjaChbXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLGZ1bmN0aW9uKGUsbil7c3QuYXR0ckhvb2tzW25dPXN0LmV4dGVuZChzdC5hdHRySG9va3Nbbl0se3NldDpmdW5jdGlvbihlLHIpe3JldHVyblwiXCI9PT1yPyhlLnNldEF0dHJpYnV0ZShuLFwiYXV0b1wiKSxyKTp0fX0pfSkpLHN0LnN1cHBvcnQuaHJlZk5vcm1hbGl6ZWR8fChzdC5lYWNoKFtcImhyZWZcIixcInNyY1wiLFwid2lkdGhcIixcImhlaWdodFwiXSxmdW5jdGlvbihlLG4pe3N0LmF0dHJIb29rc1tuXT1zdC5leHRlbmQoc3QuYXR0ckhvb2tzW25dLHtnZXQ6ZnVuY3Rpb24oZSl7dmFyIHI9ZS5nZXRBdHRyaWJ1dGUobiwyKTtyZXR1cm4gbnVsbD09cj90OnJ9fSl9KSxzdC5lYWNoKFtcImhyZWZcIixcInNyY1wiXSxmdW5jdGlvbihlLHQpe3N0LnByb3BIb29rc1t0XT17Z2V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSh0LDQpfX19KSksc3Quc3VwcG9ydC5zdHlsZXx8KHN0LmF0dHJIb29rcy5zdHlsZT17Z2V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnN0eWxlLmNzc1RleHR8fHR9LHNldDpmdW5jdGlvbihlLHQpe3JldHVybiBlLnN0eWxlLmNzc1RleHQ9dCtcIlwifX0pLHN0LnN1cHBvcnQub3B0U2VsZWN0ZWR8fChzdC5wcm9wSG9va3Muc2VsZWN0ZWQ9c3QuZXh0ZW5kKHN0LnByb3BIb29rcy5zZWxlY3RlZCx7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmKHQuc2VsZWN0ZWRJbmRleCx0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KSxudWxsfX0pKSxzdC5zdXBwb3J0LmVuY3R5cGV8fChzdC5wcm9wRml4LmVuY3R5cGU9XCJlbmNvZGluZ1wiKSxzdC5zdXBwb3J0LmNoZWNrT258fHN0LmVhY2goW1wicmFkaW9cIixcImNoZWNrYm94XCJdLGZ1bmN0aW9uKCl7c3QudmFsSG9va3NbdGhpc109e2dldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmUudmFsdWV9fX0pLHN0LmVhY2goW1wicmFkaW9cIixcImNoZWNrYm94XCJdLGZ1bmN0aW9uKCl7c3QudmFsSG9va3NbdGhpc109c3QuZXh0ZW5kKHN0LnZhbEhvb2tzW3RoaXNdLHtzZXQ6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gc3QuaXNBcnJheShuKT9lLmNoZWNrZWQ9c3QuaW5BcnJheShzdChlKS52YWwoKSxuKT49MDp0fX0pfSk7dmFyIHF0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhKSQvaSxfdD0vXmtleS8sRnQ9L14oPzptb3VzZXxjb250ZXh0bWVudSl8Y2xpY2svLE90PS9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxCdD0vXihbXi5dKikoPzpcXC4oLispfCkkLztzdC5ldmVudD17Z2xvYmFsOnt9LGFkZDpmdW5jdGlvbihlLG4scixpLG8pe3ZhciBhLHMsdSxsLGMsZixwLGQsaCxnLG0seT0zIT09ZS5ub2RlVHlwZSYmOCE9PWUubm9kZVR5cGUmJnN0Ll9kYXRhKGUpO2lmKHkpe2ZvcihyLmhhbmRsZXImJihhPXIscj1hLmhhbmRsZXIsbz1hLnNlbGVjdG9yKSxyLmd1aWR8fChyLmd1aWQ9c3QuZ3VpZCsrKSwobD15LmV2ZW50cyl8fChsPXkuZXZlbnRzPXt9KSwocz15LmhhbmRsZSl8fChzPXkuaGFuZGxlPWZ1bmN0aW9uKGUpe3JldHVybiBzdD09PXR8fGUmJnN0LmV2ZW50LnRyaWdnZXJlZD09PWUudHlwZT90OnN0LmV2ZW50LmRpc3BhdGNoLmFwcGx5KHMuZWxlbSxhcmd1bWVudHMpfSxzLmVsZW09ZSksbj0obnx8XCJcIikubWF0Y2gobHQpfHxbXCJcIl0sYz1uLmxlbmd0aDtjLS07KXU9QnQuZXhlYyhuW2NdKXx8W10saD1tPXVbMV0sZz0odVsyXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxwPXN0LmV2ZW50LnNwZWNpYWxbaF18fHt9LGg9KG8/cC5kZWxlZ2F0ZVR5cGU6cC5iaW5kVHlwZSl8fGgscD1zdC5ldmVudC5zcGVjaWFsW2hdfHx7fSxmPXN0LmV4dGVuZCh7dHlwZTpoLG9yaWdUeXBlOm0sZGF0YTppLGhhbmRsZXI6cixndWlkOnIuZ3VpZCxzZWxlY3RvcjpvLG5lZWRzQ29udGV4dDpvJiZzdC5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KG8pLG5hbWVzcGFjZTpnLmpvaW4oXCIuXCIpfSxhKSwoZD1sW2hdKXx8KGQ9bFtoXT1bXSxkLmRlbGVnYXRlQ291bnQ9MCxwLnNldHVwJiZwLnNldHVwLmNhbGwoZSxpLGcscykhPT0hMXx8KGUuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIoaCxzLCExKTplLmF0dGFjaEV2ZW50JiZlLmF0dGFjaEV2ZW50KFwib25cIitoLHMpKSkscC5hZGQmJihwLmFkZC5jYWxsKGUsZiksZi5oYW5kbGVyLmd1aWR8fChmLmhhbmRsZXIuZ3VpZD1yLmd1aWQpKSxvP2Quc3BsaWNlKGQuZGVsZWdhdGVDb3VudCsrLDAsZik6ZC5wdXNoKGYpLHN0LmV2ZW50Lmdsb2JhbFtoXT0hMDtlPW51bGx9fSxyZW1vdmU6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLG09c3QuaGFzRGF0YShlKSYmc3QuX2RhdGEoZSk7aWYobSYmKHU9bS5ldmVudHMpKXtmb3IodD0odHx8XCJcIikubWF0Y2gobHQpfHxbXCJcIl0sbD10Lmxlbmd0aDtsLS07KWlmKHM9QnQuZXhlYyh0W2xdKXx8W10sZD1nPXNbMV0saD0oc1syXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxkKXtmb3IoZj1zdC5ldmVudC5zcGVjaWFsW2RdfHx7fSxkPShyP2YuZGVsZWdhdGVUeXBlOmYuYmluZFR5cGUpfHxkLHA9dVtkXXx8W10scz1zWzJdJiZSZWdFeHAoXCIoXnxcXFxcLilcIitoLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKSxhPW89cC5sZW5ndGg7by0tOyljPXBbb10sIWkmJmchPT1jLm9yaWdUeXBlfHxuJiZuLmd1aWQhPT1jLmd1aWR8fHMmJiFzLnRlc3QoYy5uYW1lc3BhY2UpfHxyJiZyIT09Yy5zZWxlY3RvciYmKFwiKipcIiE9PXJ8fCFjLnNlbGVjdG9yKXx8KHAuc3BsaWNlKG8sMSksYy5zZWxlY3RvciYmcC5kZWxlZ2F0ZUNvdW50LS0sZi5yZW1vdmUmJmYucmVtb3ZlLmNhbGwoZSxjKSk7YSYmIXAubGVuZ3RoJiYoZi50ZWFyZG93biYmZi50ZWFyZG93bi5jYWxsKGUsaCxtLmhhbmRsZSkhPT0hMXx8c3QucmVtb3ZlRXZlbnQoZSxkLG0uaGFuZGxlKSxkZWxldGUgdVtkXSl9ZWxzZSBmb3IoZCBpbiB1KXN0LmV2ZW50LnJlbW92ZShlLGQrdFtsXSxuLHIsITApO3N0LmlzRW1wdHlPYmplY3QodSkmJihkZWxldGUgbS5oYW5kbGUsc3QuX3JlbW92ZURhdGEoZSxcImV2ZW50c1wiKSl9fSx0cmlnZ2VyOmZ1bmN0aW9uKG4scixpLG8pe3ZhciBhLHMsdSxsLGMsZixwLGQ9W2l8fFZdLGg9bi50eXBlfHxuLGc9bi5uYW1lc3BhY2U/bi5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpOltdO2lmKHM9dT1pPWl8fFYsMyE9PWkubm9kZVR5cGUmJjghPT1pLm5vZGVUeXBlJiYhT3QudGVzdChoK3N0LmV2ZW50LnRyaWdnZXJlZCkmJihoLmluZGV4T2YoXCIuXCIpPj0wJiYoZz1oLnNwbGl0KFwiLlwiKSxoPWcuc2hpZnQoKSxnLnNvcnQoKSksYz0wPmguaW5kZXhPZihcIjpcIikmJlwib25cIitoLG49bltzdC5leHBhbmRvXT9uOm5ldyBzdC5FdmVudChoLFwib2JqZWN0XCI9PXR5cGVvZiBuJiZuKSxuLmlzVHJpZ2dlcj0hMCxuLm5hbWVzcGFjZT1nLmpvaW4oXCIuXCIpLG4ubmFtZXNwYWNlX3JlPW4ubmFtZXNwYWNlP1JlZ0V4cChcIihefFxcXFwuKVwiK2cuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsbi5yZXN1bHQ9dCxuLnRhcmdldHx8KG4udGFyZ2V0PWkpLHI9bnVsbD09cj9bbl06c3QubWFrZUFycmF5KHIsW25dKSxwPXN0LmV2ZW50LnNwZWNpYWxbaF18fHt9LG98fCFwLnRyaWdnZXJ8fHAudHJpZ2dlci5hcHBseShpLHIpIT09ITEpKXtpZighbyYmIXAubm9CdWJibGUmJiFzdC5pc1dpbmRvdyhpKSl7Zm9yKGw9cC5kZWxlZ2F0ZVR5cGV8fGgsT3QudGVzdChsK2gpfHwocz1zLnBhcmVudE5vZGUpO3M7cz1zLnBhcmVudE5vZGUpZC5wdXNoKHMpLHU9czt1PT09KGkub3duZXJEb2N1bWVudHx8VikmJmQucHVzaCh1LmRlZmF1bHRWaWV3fHx1LnBhcmVudFdpbmRvd3x8ZSl9Zm9yKGE9MDsocz1kW2ErK10pJiYhbi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOyluLnR5cGU9YT4xP2w6cC5iaW5kVHlwZXx8aCxmPShzdC5fZGF0YShzLFwiZXZlbnRzXCIpfHx7fSlbbi50eXBlXSYmc3QuX2RhdGEocyxcImhhbmRsZVwiKSxmJiZmLmFwcGx5KHMsciksZj1jJiZzW2NdLGYmJnN0LmFjY2VwdERhdGEocykmJmYuYXBwbHkmJmYuYXBwbHkocyxyKT09PSExJiZuLnByZXZlbnREZWZhdWx0KCk7aWYobi50eXBlPWgsIShvfHxuLmlzRGVmYXVsdFByZXZlbnRlZCgpfHxwLl9kZWZhdWx0JiZwLl9kZWZhdWx0LmFwcGx5KGkub3duZXJEb2N1bWVudCxyKSE9PSExfHxcImNsaWNrXCI9PT1oJiZzdC5ub2RlTmFtZShpLFwiYVwiKXx8IXN0LmFjY2VwdERhdGEoaSl8fCFjfHwhaVtoXXx8c3QuaXNXaW5kb3coaSkpKXt1PWlbY10sdSYmKGlbY109bnVsbCksc3QuZXZlbnQudHJpZ2dlcmVkPWg7dHJ5e2lbaF0oKX1jYXRjaChtKXt9c3QuZXZlbnQudHJpZ2dlcmVkPXQsdSYmKGlbY109dSl9cmV0dXJuIG4ucmVzdWx0fX0sZGlzcGF0Y2g6ZnVuY3Rpb24oZSl7ZT1zdC5ldmVudC5maXgoZSk7dmFyIG4scixpLG8sYSxzPVtdLHU9bnQuY2FsbChhcmd1bWVudHMpLGw9KHN0Ll9kYXRhKHRoaXMsXCJldmVudHNcIil8fHt9KVtlLnR5cGVdfHxbXSxjPXN0LmV2ZW50LnNwZWNpYWxbZS50eXBlXXx8e307aWYodVswXT1lLGUuZGVsZWdhdGVUYXJnZXQ9dGhpcywhYy5wcmVEaXNwYXRjaHx8Yy5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsZSkhPT0hMSl7Zm9yKHM9c3QuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLGUsbCksbj0wOyhvPXNbbisrXSkmJiFlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7KWZvcihlLmN1cnJlbnRUYXJnZXQ9by5lbGVtLHI9MDsoYT1vLmhhbmRsZXJzW3IrK10pJiYhZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpOykoIWUubmFtZXNwYWNlX3JlfHxlLm5hbWVzcGFjZV9yZS50ZXN0KGEubmFtZXNwYWNlKSkmJihlLmhhbmRsZU9iaj1hLGUuZGF0YT1hLmRhdGEsaT0oKHN0LmV2ZW50LnNwZWNpYWxbYS5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGEuaGFuZGxlcikuYXBwbHkoby5lbGVtLHUpLGkhPT10JiYoZS5yZXN1bHQ9aSk9PT0hMSYmKGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKSk7cmV0dXJuIGMucG9zdERpc3BhdGNoJiZjLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsZSksZS5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihlLG4pe3ZhciByLGksbyxhLHM9W10sdT1uLmRlbGVnYXRlQ291bnQsbD1lLnRhcmdldDtpZih1JiZsLm5vZGVUeXBlJiYoIWUuYnV0dG9ufHxcImNsaWNrXCIhPT1lLnR5cGUpKWZvcig7bCE9dGhpcztsPWwucGFyZW50Tm9kZXx8dGhpcylpZihsLmRpc2FibGVkIT09ITB8fFwiY2xpY2tcIiE9PWUudHlwZSl7Zm9yKGk9W10scj0wO3U+cjtyKyspYT1uW3JdLG89YS5zZWxlY3RvcitcIiBcIixpW29dPT09dCYmKGlbb109YS5uZWVkc0NvbnRleHQ/c3Qobyx0aGlzKS5pbmRleChsKT49MDpzdC5maW5kKG8sdGhpcyxudWxsLFtsXSkubGVuZ3RoKSxpW29dJiZpLnB1c2goYSk7aS5sZW5ndGgmJnMucHVzaCh7ZWxlbTpsLGhhbmRsZXJzOml9KX1yZXR1cm4gbi5sZW5ndGg+dSYmcy5wdXNoKHtlbGVtOnRoaXMsaGFuZGxlcnM6bi5zbGljZSh1KX0pLHN9LGZpeDpmdW5jdGlvbihlKXtpZihlW3N0LmV4cGFuZG9dKXJldHVybiBlO3ZhciB0LG4scj1lLGk9c3QuZXZlbnQuZml4SG9va3NbZS50eXBlXXx8e30sbz1pLnByb3BzP3RoaXMucHJvcHMuY29uY2F0KGkucHJvcHMpOnRoaXMucHJvcHM7Zm9yKGU9bmV3IHN0LkV2ZW50KHIpLHQ9by5sZW5ndGg7dC0tOyluPW9bdF0sZVtuXT1yW25dO3JldHVybiBlLnRhcmdldHx8KGUudGFyZ2V0PXIuc3JjRWxlbWVudHx8ViksMz09PWUudGFyZ2V0Lm5vZGVUeXBlJiYoZS50YXJnZXQ9ZS50YXJnZXQucGFyZW50Tm9kZSksZS5tZXRhS2V5PSEhZS5tZXRhS2V5LGkuZmlsdGVyP2kuZmlsdGVyKGUscik6ZX0scHJvcHM6XCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIi5zcGxpdChcIiBcIiksZml4SG9va3M6e30sa2V5SG9va3M6e3Byb3BzOlwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KFwiIFwiKSxmaWx0ZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbD09ZS53aGljaCYmKGUud2hpY2g9bnVsbCE9dC5jaGFyQ29kZT90LmNoYXJDb2RlOnQua2V5Q29kZSksZX19LG1vdXNlSG9va3M6e3Byb3BzOlwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIGZyb21FbGVtZW50IG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIuc3BsaXQoXCIgXCIpLGZpbHRlcjpmdW5jdGlvbihlLG4pe3ZhciByLGksbyxhPW4uYnV0dG9uLHM9bi5mcm9tRWxlbWVudDtyZXR1cm4gbnVsbD09ZS5wYWdlWCYmbnVsbCE9bi5jbGllbnRYJiYocj1lLnRhcmdldC5vd25lckRvY3VtZW50fHxWLGk9ci5kb2N1bWVudEVsZW1lbnQsbz1yLmJvZHksZS5wYWdlWD1uLmNsaWVudFgrKGkmJmkuc2Nyb2xsTGVmdHx8byYmby5zY3JvbGxMZWZ0fHwwKS0oaSYmaS5jbGllbnRMZWZ0fHxvJiZvLmNsaWVudExlZnR8fDApLGUucGFnZVk9bi5jbGllbnRZKyhpJiZpLnNjcm9sbFRvcHx8byYmby5zY3JvbGxUb3B8fDApLShpJiZpLmNsaWVudFRvcHx8byYmby5jbGllbnRUb3B8fDApKSwhZS5yZWxhdGVkVGFyZ2V0JiZzJiYoZS5yZWxhdGVkVGFyZ2V0PXM9PT1lLnRhcmdldD9uLnRvRWxlbWVudDpzKSxlLndoaWNofHxhPT09dHx8KGUud2hpY2g9MSZhPzE6MiZhPzM6NCZhPzI6MCksZX19LHNwZWNpYWw6e2xvYWQ6e25vQnViYmxlOiEwfSxjbGljazp7dHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiBzdC5ub2RlTmFtZSh0aGlzLFwiaW5wdXRcIikmJlwiY2hlY2tib3hcIj09PXRoaXMudHlwZSYmdGhpcy5jbGljaz8odGhpcy5jbGljaygpLCExKTp0fX0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09Vi5hY3RpdmVFbGVtZW50JiZ0aGlzLmZvY3VzKXRyeXtyZXR1cm4gdGhpcy5mb2N1cygpLCExfWNhdGNoKGUpe319LGRlbGVnYXRlVHlwZTpcImZvY3VzaW5cIn0sYmx1cjp7dHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzPT09Vi5hY3RpdmVFbGVtZW50JiZ0aGlzLmJsdXI/KHRoaXMuYmx1cigpLCExKTp0fSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c291dFwifSxiZWZvcmV1bmxvYWQ6e3Bvc3REaXNwYXRjaDpmdW5jdGlvbihlKXtlLnJlc3VsdCE9PXQmJihlLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9ZS5yZXN1bHQpfX19LHNpbXVsYXRlOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpPXN0LmV4dGVuZChuZXcgc3QuRXZlbnQsbix7dHlwZTplLGlzU2ltdWxhdGVkOiEwLG9yaWdpbmFsRXZlbnQ6e319KTtyP3N0LmV2ZW50LnRyaWdnZXIoaSxudWxsLHQpOnN0LmV2ZW50LmRpc3BhdGNoLmNhbGwodCxpKSxpLmlzRGVmYXVsdFByZXZlbnRlZCgpJiZuLnByZXZlbnREZWZhdWx0KCl9fSxzdC5yZW1vdmVFdmVudD1WLnJlbW92ZUV2ZW50TGlzdGVuZXI/ZnVuY3Rpb24oZSx0LG4pe2UucmVtb3ZlRXZlbnRMaXN0ZW5lciYmZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsbiwhMSl9OmZ1bmN0aW9uKGUsbixyKXt2YXIgaT1cIm9uXCIrbjtlLmRldGFjaEV2ZW50JiYoZVtpXT09PXQmJihlW2ldPW51bGwpLGUuZGV0YWNoRXZlbnQoaSxyKSl9LHN0LkV2ZW50PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBzdC5FdmVudD8oZSYmZS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0aGlzLnR5cGU9ZS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWUuZGVmYXVsdFByZXZlbnRlZHx8ZS5yZXR1cm5WYWx1ZT09PSExfHxlLmdldFByZXZlbnREZWZhdWx0JiZlLmdldFByZXZlbnREZWZhdWx0KCk/dTpsKTp0aGlzLnR5cGU9ZSxuJiZzdC5leHRlbmQodGhpcyxuKSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8c3Qubm93KCksdGhpc1tzdC5leHBhbmRvXT0hMCx0KTpuZXcgc3QuRXZlbnQoZSxuKX0sc3QuRXZlbnQucHJvdG90eXBlPXtpc0RlZmF1bHRQcmV2ZW50ZWQ6bCxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpsLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOmwscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9dSxlJiYoZS5wcmV2ZW50RGVmYXVsdD9lLnByZXZlbnREZWZhdWx0KCk6ZS5yZXR1cm5WYWx1ZT0hMSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXUsZSYmKGUuc3RvcFByb3BhZ2F0aW9uJiZlLnN0b3BQcm9wYWdhdGlvbigpLGUuY2FuY2VsQnViYmxlPSEwKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD11LHRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9fSxzdC5lYWNoKHttb3VzZWVudGVyOlwibW91c2VvdmVyXCIsbW91c2VsZWF2ZTpcIm1vdXNlb3V0XCJ9LGZ1bmN0aW9uKGUsdCl7c3QuZXZlbnQuc3BlY2lhbFtlXT17ZGVsZWdhdGVUeXBlOnQsYmluZFR5cGU6dCxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIG4scj10aGlzLGk9ZS5yZWxhdGVkVGFyZ2V0LG89ZS5oYW5kbGVPYmo7cmV0dXJuKCFpfHxpIT09ciYmIXN0LmNvbnRhaW5zKHIsaSkpJiYoZS50eXBlPW8ub3JpZ1R5cGUsbj1vLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLGUudHlwZT10KSxufX19KSxzdC5zdXBwb3J0LnN1Ym1pdEJ1YmJsZXN8fChzdC5ldmVudC5zcGVjaWFsLnN1Ym1pdD17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gc3Qubm9kZU5hbWUodGhpcyxcImZvcm1cIik/ITE6KHN0LmV2ZW50LmFkZCh0aGlzLFwiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0XCIsZnVuY3Rpb24oZSl7dmFyIG49ZS50YXJnZXQscj1zdC5ub2RlTmFtZShuLFwiaW5wdXRcIil8fHN0Lm5vZGVOYW1lKG4sXCJidXR0b25cIik/bi5mb3JtOnQ7ciYmIXN0Ll9kYXRhKHIsXCJzdWJtaXRCdWJibGVzXCIpJiYoc3QuZXZlbnQuYWRkKHIsXCJzdWJtaXQuX3N1Ym1pdFwiLGZ1bmN0aW9uKGUpe2UuX3N1Ym1pdF9idWJibGU9ITB9KSxzdC5fZGF0YShyLFwic3VibWl0QnViYmxlc1wiLCEwKSl9KSx0KX0scG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe2UuX3N1Ym1pdF9idWJibGUmJihkZWxldGUgZS5fc3VibWl0X2J1YmJsZSx0aGlzLnBhcmVudE5vZGUmJiFlLmlzVHJpZ2dlciYmc3QuZXZlbnQuc2ltdWxhdGUoXCJzdWJtaXRcIix0aGlzLnBhcmVudE5vZGUsZSwhMCkpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3JldHVybiBzdC5ub2RlTmFtZSh0aGlzLFwiZm9ybVwiKT8hMTooc3QuZXZlbnQucmVtb3ZlKHRoaXMsXCIuX3N1Ym1pdFwiKSx0KX19KSxzdC5zdXBwb3J0LmNoYW5nZUJ1YmJsZXN8fChzdC5ldmVudC5zcGVjaWFsLmNoYW5nZT17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gcXQudGVzdCh0aGlzLm5vZGVOYW1lKT8oKFwiY2hlY2tib3hcIj09PXRoaXMudHlwZXx8XCJyYWRpb1wiPT09dGhpcy50eXBlKSYmKHN0LmV2ZW50LmFkZCh0aGlzLFwicHJvcGVydHljaGFuZ2UuX2NoYW5nZVwiLGZ1bmN0aW9uKGUpe1wiY2hlY2tlZFwiPT09ZS5vcmlnaW5hbEV2ZW50LnByb3BlcnR5TmFtZSYmKHRoaXMuX2p1c3RfY2hhbmdlZD0hMCl9KSxzdC5ldmVudC5hZGQodGhpcyxcImNsaWNrLl9jaGFuZ2VcIixmdW5jdGlvbihlKXt0aGlzLl9qdXN0X2NoYW5nZWQmJiFlLmlzVHJpZ2dlciYmKHRoaXMuX2p1c3RfY2hhbmdlZD0hMSksc3QuZXZlbnQuc2ltdWxhdGUoXCJjaGFuZ2VcIix0aGlzLGUsITApfSkpLCExKTooc3QuZXZlbnQuYWRkKHRoaXMsXCJiZWZvcmVhY3RpdmF0ZS5fY2hhbmdlXCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQ7cXQudGVzdCh0Lm5vZGVOYW1lKSYmIXN0Ll9kYXRhKHQsXCJjaGFuZ2VCdWJibGVzXCIpJiYoc3QuZXZlbnQuYWRkKHQsXCJjaGFuZ2UuX2NoYW5nZVwiLGZ1bmN0aW9uKGUpeyF0aGlzLnBhcmVudE5vZGV8fGUuaXNTaW11bGF0ZWR8fGUuaXNUcmlnZ2VyfHxzdC5ldmVudC5zaW11bGF0ZShcImNoYW5nZVwiLHRoaXMucGFyZW50Tm9kZSxlLCEwKX0pLHN0Ll9kYXRhKHQsXCJjaGFuZ2VCdWJibGVzXCIsITApKX0pLHQpfSxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIG49ZS50YXJnZXQ7cmV0dXJuIHRoaXMhPT1ufHxlLmlzU2ltdWxhdGVkfHxlLmlzVHJpZ2dlcnx8XCJyYWRpb1wiIT09bi50eXBlJiZcImNoZWNrYm94XCIhPT1uLnR5cGU/ZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dH0sdGVhcmRvd246ZnVuY3Rpb24oKXtyZXR1cm4gc3QuZXZlbnQucmVtb3ZlKHRoaXMsXCIuX2NoYW5nZVwiKSwhcXQudGVzdCh0aGlzLm5vZGVOYW1lKX19KSxzdC5zdXBwb3J0LmZvY3VzaW5CdWJibGVzfHxzdC5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24oZSx0KXt2YXIgbj0wLHI9ZnVuY3Rpb24oZSl7c3QuZXZlbnQuc2ltdWxhdGUodCxlLnRhcmdldCxzdC5ldmVudC5maXgoZSksITApfTtzdC5ldmVudC5zcGVjaWFsW3RdPXtzZXR1cDpmdW5jdGlvbigpezA9PT1uKysmJlYuYWRkRXZlbnRMaXN0ZW5lcihlLHIsITApfSx0ZWFyZG93bjpmdW5jdGlvbigpezA9PT0tLW4mJlYucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHIsITApfX19KSxzdC5mbi5leHRlbmQoe29uOmZ1bmN0aW9uKGUsbixyLGksbyl7dmFyIGEscztpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7XCJzdHJpbmdcIiE9dHlwZW9mIG4mJihyPXJ8fG4sbj10KTtmb3IocyBpbiBlKXRoaXMub24ocyxuLHIsZVtzXSxvKTtyZXR1cm4gdGhpc31pZihudWxsPT1yJiZudWxsPT1pPyhpPW4scj1uPXQpOm51bGw9PWkmJihcInN0cmluZ1wiPT10eXBlb2Ygbj8oaT1yLHI9dCk6KGk9cixyPW4sbj10KSksaT09PSExKWk9bDtlbHNlIGlmKCFpKXJldHVybiB0aGlzO3JldHVybiAxPT09byYmKGE9aSxpPWZ1bmN0aW9uKGUpe3JldHVybiBzdCgpLm9mZihlKSxhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0saS5ndWlkPWEuZ3VpZHx8KGEuZ3VpZD1zdC5ndWlkKyspKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtzdC5ldmVudC5hZGQodGhpcyxlLGkscixuKX0pfSxvbmU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHRoaXMub24oZSx0LG4sciwxKX0sb2ZmOmZ1bmN0aW9uKGUsbixyKXt2YXIgaSxvO2lmKGUmJmUucHJldmVudERlZmF1bHQmJmUuaGFuZGxlT2JqKXJldHVybiBpPWUuaGFuZGxlT2JqLHN0KGUuZGVsZWdhdGVUYXJnZXQpLm9mZihpLm5hbWVzcGFjZT9pLm9yaWdUeXBlK1wiLlwiK2kubmFtZXNwYWNlOmkub3JpZ1R5cGUsaS5zZWxlY3RvcixpLmhhbmRsZXIpLHRoaXM7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpe2ZvcihvIGluIGUpdGhpcy5vZmYobyxuLGVbb10pO3JldHVybiB0aGlzfXJldHVybihuPT09ITF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pJiYocj1uLG49dCkscj09PSExJiYocj1sKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtzdC5ldmVudC5yZW1vdmUodGhpcyxlLHIsbil9KX0sYmluZDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMub24oZSxudWxsLHQsbil9LHVuYmluZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm9mZihlLG51bGwsdCl9LGRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLm9uKHQsZSxuLHIpfSx1bmRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vZmYoZSxcIioqXCIpOnRoaXMub2ZmKHQsZXx8XCIqKlwiLG4pfSx0cmlnZ2VyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3N0LmV2ZW50LnRyaWdnZXIoZSx0LHRoaXMpfSl9LHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGUsbil7dmFyIHI9dGhpc1swXTtyZXR1cm4gcj9zdC5ldmVudC50cmlnZ2VyKGUsbixyLCEwKTp0fSxob3ZlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoZSkubW91c2VsZWF2ZSh0fHxlKX19KSxzdC5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLHQpe3N0LmZuW3RdPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MD90aGlzLm9uKHQsbnVsbCxlLG4pOnRoaXMudHJpZ2dlcih0KX0sX3QudGVzdCh0KSYmKHN0LmV2ZW50LmZpeEhvb2tzW3RdPXN0LmV2ZW50LmtleUhvb2tzKSxGdC50ZXN0KHQpJiYoc3QuZXZlbnQuZml4SG9va3NbdF09c3QuZXZlbnQubW91c2VIb29rcyl9KSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGh0LnRlc3QoZStcIlwiKX1mdW5jdGlvbiByKCl7dmFyIGUsdD1bXTtyZXR1cm4gZT1mdW5jdGlvbihuLHIpe3JldHVybiB0LnB1c2gobis9XCIgXCIpPkMuY2FjaGVMZW5ndGgmJmRlbGV0ZSBlW3Quc2hpZnQoKV0sZVtuXT1yfX1mdW5jdGlvbiBpKGUpe3JldHVybiBlW1BdPSEwLGV9ZnVuY3Rpb24gbyhlKXt2YXIgdD1MLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dHJ5e3JldHVybiBlKHQpfWNhdGNoKG4pe3JldHVybiExfWZpbmFsbHl7dD1udWxsfX1mdW5jdGlvbiBhKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbCxjLGQsaCxnO2lmKCh0P3Qub3duZXJEb2N1bWVudHx8dDpSKSE9PUwmJkQodCksdD10fHxMLG49bnx8W10sIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBuO2lmKDEhPT0ocz10Lm5vZGVUeXBlKSYmOSE9PXMpcmV0dXJuW107aWYoIU0mJiFyKXtpZihpPWd0LmV4ZWMoZSkpaWYoYT1pWzFdKXtpZig5PT09cyl7aWYobz10LmdldEVsZW1lbnRCeUlkKGEpLCFvfHwhby5wYXJlbnROb2RlKXJldHVybiBuO2lmKG8uaWQ9PT1hKXJldHVybiBuLnB1c2gobyksbn1lbHNlIGlmKHQub3duZXJEb2N1bWVudCYmKG89dC5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpKSYmTyh0LG8pJiZvLmlkPT09YSlyZXR1cm4gbi5wdXNoKG8pLG59ZWxzZXtpZihpWzJdKXJldHVybiBRLmFwcGx5KG4sSy5jYWxsKHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSksMCkpLG47aWYoKGE9aVszXSkmJlcuZ2V0QnlDbGFzc05hbWUmJnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gUS5hcHBseShuLEsuY2FsbCh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYSksMCkpLG59aWYoVy5xc2EmJiFxLnRlc3QoZSkpe2lmKGM9ITAsZD1QLGg9dCxnPTk9PT1zJiZlLDE9PT1zJiZcIm9iamVjdFwiIT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXtmb3IobD1mKGUpLChjPXQuZ2V0QXR0cmlidXRlKFwiaWRcIikpP2Q9Yy5yZXBsYWNlKHZ0LFwiXFxcXCQmXCIpOnQuc2V0QXR0cmlidXRlKFwiaWRcIixkKSxkPVwiW2lkPSdcIitkK1wiJ10gXCIsdT1sLmxlbmd0aDt1LS07KWxbdV09ZCtwKGxbdV0pO2g9ZHQudGVzdChlKSYmdC5wYXJlbnROb2RlfHx0LGc9bC5qb2luKFwiLFwiKX1pZihnKXRyeXtyZXR1cm4gUS5hcHBseShuLEsuY2FsbChoLnF1ZXJ5U2VsZWN0b3JBbGwoZyksMCkpLG59Y2F0Y2gobSl7fWZpbmFsbHl7Y3x8dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKX19fXJldHVybiB4KGUucmVwbGFjZShhdCxcIiQxXCIpLHQsbixyKX1mdW5jdGlvbiBzKGUsdCl7Zm9yKHZhciBuPWUmJnQmJmUubmV4dFNpYmxpbmc7bjtuPW4ubmV4dFNpYmxpbmcpaWYobj09PXQpcmV0dXJuLTE7cmV0dXJuIGU/MTotMX1mdW5jdGlvbiB1KGUpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgbj10Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09biYmdC50eXBlPT09ZX19ZnVuY3Rpb24gbChlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIG49dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybihcImlucHV0XCI9PT1ufHxcImJ1dHRvblwiPT09bikmJnQudHlwZT09PWV9fWZ1bmN0aW9uIGMoZSl7cmV0dXJuIGkoZnVuY3Rpb24odCl7cmV0dXJuIHQ9K3QsaShmdW5jdGlvbihuLHIpe2Zvcih2YXIgaSxvPWUoW10sbi5sZW5ndGgsdCksYT1vLmxlbmd0aDthLS07KW5baT1vW2FdXSYmKG5baV09IShyW2ldPW5baV0pKX0pfSl9ZnVuY3Rpb24gZihlLHQpe3ZhciBuLHIsaSxvLHMsdSxsLGM9WFtlK1wiIFwiXTtpZihjKXJldHVybiB0PzA6Yy5zbGljZSgwKTtmb3Iocz1lLHU9W10sbD1DLnByZUZpbHRlcjtzOyl7KCFufHwocj11dC5leGVjKHMpKSkmJihyJiYocz1zLnNsaWNlKHJbMF0ubGVuZ3RoKXx8cyksdS5wdXNoKGk9W10pKSxuPSExLChyPWx0LmV4ZWMocykpJiYobj1yLnNoaWZ0KCksaS5wdXNoKHt2YWx1ZTpuLHR5cGU6clswXS5yZXBsYWNlKGF0LFwiIFwiKX0pLHM9cy5zbGljZShuLmxlbmd0aCkpO2ZvcihvIGluIEMuZmlsdGVyKSEocj1wdFtvXS5leGVjKHMpKXx8bFtvXSYmIShyPWxbb10ocikpfHwobj1yLnNoaWZ0KCksaS5wdXNoKHt2YWx1ZTpuLHR5cGU6byxtYXRjaGVzOnJ9KSxzPXMuc2xpY2Uobi5sZW5ndGgpKTtpZighbilicmVha31yZXR1cm4gdD9zLmxlbmd0aDpzP2EuZXJyb3IoZSk6WChlLHUpLnNsaWNlKDApfWZ1bmN0aW9uIHAoZSl7Zm9yKHZhciB0PTAsbj1lLmxlbmd0aCxyPVwiXCI7bj50O3QrKylyKz1lW3RdLnZhbHVlO3JldHVybiByfWZ1bmN0aW9uIGQoZSx0LG4pe3ZhciByPXQuZGlyLGk9biYmXCJwYXJlbnROb2RlXCI9PT10LmRpcixvPUkrKztyZXR1cm4gdC5maXJzdD9mdW5jdGlvbih0LG4sbyl7Zm9yKDt0PXRbcl07KWlmKDE9PT10Lm5vZGVUeXBlfHxpKXJldHVybiBlKHQsbixvKX06ZnVuY3Rpb24odCxuLGEpe3ZhciBzLHUsbCxjPSQrXCIgXCIrbztpZihhKXtmb3IoO3Q9dFtyXTspaWYoKDE9PT10Lm5vZGVUeXBlfHxpKSYmZSh0LG4sYSkpcmV0dXJuITB9ZWxzZSBmb3IoO3Q9dFtyXTspaWYoMT09PXQubm9kZVR5cGV8fGkpaWYobD10W1BdfHwodFtQXT17fSksKHU9bFtyXSkmJnVbMF09PT1jKXtpZigocz11WzFdKT09PSEwfHxzPT09TilyZXR1cm4gcz09PSEwfWVsc2UgaWYodT1sW3JdPVtjXSx1WzFdPWUodCxuLGEpfHxOLHVbMV09PT0hMClyZXR1cm4hMH19ZnVuY3Rpb24gaChlKXtyZXR1cm4gZS5sZW5ndGg+MT9mdW5jdGlvbih0LG4scil7Zm9yKHZhciBpPWUubGVuZ3RoO2ktLTspaWYoIWVbaV0odCxuLHIpKXJldHVybiExO3JldHVybiEwfTplWzBdfWZ1bmN0aW9uIGcoZSx0LG4scixpKXtmb3IodmFyIG8sYT1bXSxzPTAsdT1lLmxlbmd0aCxsPW51bGwhPXQ7dT5zO3MrKykobz1lW3NdKSYmKCFufHxuKG8scixpKSkmJihhLnB1c2gobyksbCYmdC5wdXNoKHMpKTtyZXR1cm4gYX1mdW5jdGlvbiBtKGUsdCxuLHIsbyxhKXtyZXR1cm4gciYmIXJbUF0mJihyPW0ocikpLG8mJiFvW1BdJiYobz1tKG8sYSkpLGkoZnVuY3Rpb24oaSxhLHMsdSl7dmFyIGwsYyxmLHA9W10sZD1bXSxoPWEubGVuZ3RoLG09aXx8Yih0fHxcIipcIixzLm5vZGVUeXBlP1tzXTpzLFtdKSx5PSFlfHwhaSYmdD9tOmcobSxwLGUscyx1KSx2PW4/b3x8KGk/ZTpofHxyKT9bXTphOnk7aWYobiYmbih5LHYscyx1KSxyKWZvcihsPWcodixkKSxyKGwsW10scyx1KSxjPWwubGVuZ3RoO2MtLTspKGY9bFtjXSkmJih2W2RbY11dPSEoeVtkW2NdXT1mKSk7aWYoaSl7aWYob3x8ZSl7aWYobyl7Zm9yKGw9W10sYz12Lmxlbmd0aDtjLS07KShmPXZbY10pJiZsLnB1c2goeVtjXT1mKTtvKG51bGwsdj1bXSxsLHUpfWZvcihjPXYubGVuZ3RoO2MtLTspKGY9dltjXSkmJihsPW8/Wi5jYWxsKGksZik6cFtjXSk+LTEmJihpW2xdPSEoYVtsXT1mKSl9fWVsc2Ugdj1nKHY9PT1hP3Yuc3BsaWNlKGgsdi5sZW5ndGgpOnYpLG8/byhudWxsLGEsdix1KTpRLmFwcGx5KGEsdil9KX1mdW5jdGlvbiB5KGUpe2Zvcih2YXIgdCxuLHIsaT1lLmxlbmd0aCxvPUMucmVsYXRpdmVbZVswXS50eXBlXSxhPW98fEMucmVsYXRpdmVbXCIgXCJdLHM9bz8xOjAsdT1kKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dH0sYSwhMCksbD1kKGZ1bmN0aW9uKGUpe3JldHVybiBaLmNhbGwodCxlKT4tMX0sYSwhMCksYz1bZnVuY3Rpb24oZSxuLHIpe3JldHVybiFvJiYocnx8biE9PWopfHwoKHQ9bikubm9kZVR5cGU/dShlLG4scik6bChlLG4scikpfV07aT5zO3MrKylpZihuPUMucmVsYXRpdmVbZVtzXS50eXBlXSljPVtkKGgoYyksbildO2Vsc2V7aWYobj1DLmZpbHRlcltlW3NdLnR5cGVdLmFwcGx5KG51bGwsZVtzXS5tYXRjaGVzKSxuW1BdKXtmb3Iocj0rK3M7aT5yJiYhQy5yZWxhdGl2ZVtlW3JdLnR5cGVdO3IrKyk7cmV0dXJuIG0ocz4xJiZoKGMpLHM+MSYmcChlLnNsaWNlKDAscy0xKSkucmVwbGFjZShhdCxcIiQxXCIpLG4scj5zJiZ5KGUuc2xpY2UocyxyKSksaT5yJiZ5KGU9ZS5zbGljZShyKSksaT5yJiZwKGUpKX1jLnB1c2gobil9cmV0dXJuIGgoYyl9ZnVuY3Rpb24gdihlLHQpe3ZhciBuPTAscj10Lmxlbmd0aD4wLG89ZS5sZW5ndGg+MCxzPWZ1bmN0aW9uKGkscyx1LGwsYyl7dmFyIGYscCxkLGg9W10sbT0wLHk9XCIwXCIsdj1pJiZbXSxiPW51bGwhPWMseD1qLFQ9aXx8byYmQy5maW5kLlRBRyhcIipcIixjJiZzLnBhcmVudE5vZGV8fHMpLHc9JCs9bnVsbD09eD8xOk1hdGguRTtmb3IoYiYmKGo9cyE9PUwmJnMsTj1uKTtudWxsIT0oZj1UW3ldKTt5Kyspe2lmKG8mJmYpe2ZvcihwPTA7ZD1lW3BdO3ArKylpZihkKGYscyx1KSl7bC5wdXNoKGYpO2JyZWFrfWImJigkPXcsTj0rK24pfXImJigoZj0hZCYmZikmJm0tLSxpJiZ2LnB1c2goZikpfWlmKG0rPXksciYmeSE9PW0pe2ZvcihwPTA7ZD10W3BdO3ArKylkKHYsaCxzLHUpO2lmKGkpe2lmKG0+MClmb3IoO3ktLTspdlt5XXx8aFt5XXx8KGhbeV09Ry5jYWxsKGwpKTtoPWcoaCl9US5hcHBseShsLGgpLGImJiFpJiZoLmxlbmd0aD4wJiZtK3QubGVuZ3RoPjEmJmEudW5pcXVlU29ydChsKX1yZXR1cm4gYiYmKCQ9dyxqPXgpLHZ9O3JldHVybiByP2kocyk6c31mdW5jdGlvbiBiKGUsdCxuKXtmb3IodmFyIHI9MCxpPXQubGVuZ3RoO2k+cjtyKyspYShlLHRbcl0sbik7cmV0dXJuIG59ZnVuY3Rpb24geChlLHQsbixyKXt2YXIgaSxvLGEscyx1LGw9ZihlKTtpZighciYmMT09PWwubGVuZ3RoKXtpZihvPWxbMF09bFswXS5zbGljZSgwKSxvLmxlbmd0aD4yJiZcIklEXCI9PT0oYT1vWzBdKS50eXBlJiY5PT09dC5ub2RlVHlwZSYmIU0mJkMucmVsYXRpdmVbb1sxXS50eXBlXSl7aWYodD1DLmZpbmQuSUQoYS5tYXRjaGVzWzBdLnJlcGxhY2UoeHQsVHQpLHQpWzBdLCF0KXJldHVybiBuO2U9ZS5zbGljZShvLnNoaWZ0KCkudmFsdWUubGVuZ3RoKX1mb3IoaT1wdC5uZWVkc0NvbnRleHQudGVzdChlKT8tMTpvLmxlbmd0aC0xO2k+PTAmJihhPW9baV0sIUMucmVsYXRpdmVbcz1hLnR5cGVdKTtpLS0paWYoKHU9Qy5maW5kW3NdKSYmKHI9dShhLm1hdGNoZXNbMF0ucmVwbGFjZSh4dCxUdCksZHQudGVzdChvWzBdLnR5cGUpJiZ0LnBhcmVudE5vZGV8fHQpKSl7aWYoby5zcGxpY2UoaSwxKSxlPXIubGVuZ3RoJiZwKG8pLCFlKXJldHVybiBRLmFwcGx5KG4sSy5jYWxsKHIsMCkpLG47YnJlYWt9fXJldHVybiBTKGUsbCkocix0LE0sbixkdC50ZXN0KGUpKSxufWZ1bmN0aW9uIFQoKXt9dmFyIHcsTixDLGssRSxTLEEsaixELEwsSCxNLHEsXyxGLE8sQixQPVwic2l6emxlXCIrLW5ldyBEYXRlLFI9ZS5kb2N1bWVudCxXPXt9LCQ9MCxJPTAsej1yKCksWD1yKCksVT1yKCksVj10eXBlb2YgdCxZPTE8PDMxLEo9W10sRz1KLnBvcCxRPUoucHVzaCxLPUouc2xpY2UsWj1KLmluZGV4T2Z8fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49dGhpcy5sZW5ndGg7bj50O3QrKylpZih0aGlzW3RdPT09ZSlyZXR1cm4gdDtyZXR1cm4tMX0sZXQ9XCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLHR0PVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsbnQ9dHQucmVwbGFjZShcIndcIixcIncjXCIpLHJ0PVwiKFsqXiR8IX5dPz0pXCIsaXQ9XCJcXFxcW1wiK2V0K1wiKihcIit0dCtcIilcIitldCtcIiooPzpcIitydCtldCtcIiooPzooWydcXFwiXSkoKD86XFxcXFxcXFwufFteXFxcXFxcXFxdKSo/KVxcXFwzfChcIitudCtcIil8KXwpXCIrZXQrXCIqXFxcXF1cIixvdD1cIjooXCIrdHQrXCIpKD86XFxcXCgoKFsnXFxcIl0pKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXSkqPylcXFxcM3woKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIraXQucmVwbGFjZSgzLDgpK1wiKSopfC4qKVxcXFwpfClcIixhdD1SZWdFeHAoXCJeXCIrZXQrXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiK2V0K1wiKyRcIixcImdcIiksdXQ9UmVnRXhwKFwiXlwiK2V0K1wiKixcIitldCtcIipcIiksbHQ9UmVnRXhwKFwiXlwiK2V0K1wiKihbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmPit+XSlcIitldCtcIipcIiksY3Q9UmVnRXhwKG90KSxmdD1SZWdFeHAoXCJeXCIrbnQrXCIkXCIpLHB0PXtJRDpSZWdFeHAoXCJeIyhcIit0dCtcIilcIiksQ0xBU1M6UmVnRXhwKFwiXlxcXFwuKFwiK3R0K1wiKVwiKSxOQU1FOlJlZ0V4cChcIl5cXFxcW25hbWU9WydcXFwiXT8oXCIrdHQrXCIpWydcXFwiXT9cXFxcXVwiKSxUQUc6UmVnRXhwKFwiXihcIit0dC5yZXBsYWNlKFwid1wiLFwidypcIikrXCIpXCIpLEFUVFI6UmVnRXhwKFwiXlwiK2l0KSxQU0VVRE86UmVnRXhwKFwiXlwiK290KSxDSElMRDpSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiK2V0K1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrZXQrXCIqKD86KFsrLV18KVwiK2V0K1wiKihcXFxcZCspfCkpXCIrZXQrXCIqXFxcXCl8KVwiLFwiaVwiKSxuZWVkc0NvbnRleHQ6UmVnRXhwKFwiXlwiK2V0K1wiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIitldCtcIiooKD86LVxcXFxkKT9cXFxcZCopXCIrZXQrXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LGR0PS9bXFx4MjBcXHRcXHJcXG5cXGZdKlsrfl0vLGh0PS9cXHtcXHMqXFxbbmF0aXZlIGNvZGVcXF1cXHMqXFx9LyxndD0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxtdD0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLHl0PS9eaFxcZCQvaSx2dD0vJ3xcXFxcL2csYnQ9L1xcPVtcXHgyMFxcdFxcclxcblxcZl0qKFteJ1wiXFxdXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXF0vZyx4dD0vXFxcXChbXFxkYS1mQS1GXXsxLDZ9W1xceDIwXFx0XFxyXFxuXFxmXT98LikvZyxUdD1mdW5jdGlvbihlLHQpe3ZhciBuPVwiMHhcIit0LTY1NTM2O3JldHVybiBuIT09bj90OjA+bj9TdHJpbmcuZnJvbUNoYXJDb2RlKG4rNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8bj4+MTAsNTYzMjB8MTAyMyZuKX07dHJ5e0suY2FsbChILmNoaWxkTm9kZXMsMClbMF0ubm9kZVR5cGV9Y2F0Y2god3Qpe0s9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49W107dD10aGlzW2VdO2UrKyluLnB1c2godCk7cmV0dXJuIG59fUU9YS5pc1hNTD1mdW5jdGlvbihlKXt2YXIgdD1lJiYoZS5vd25lckRvY3VtZW50fHxlKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIHQ/XCJIVE1MXCIhPT10Lm5vZGVOYW1lOiExfSxEPWEuc2V0RG9jdW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIHI9ZT9lLm93bmVyRG9jdW1lbnR8fGU6UjtyZXR1cm4gciE9PUwmJjk9PT1yLm5vZGVUeXBlJiZyLmRvY3VtZW50RWxlbWVudD8oTD1yLEg9ci5kb2N1bWVudEVsZW1lbnQsTT1FKHIpLFcudGFnTmFtZU5vQ29tbWVudHM9byhmdW5jdGlvbihlKXtyZXR1cm4gZS5hcHBlbmRDaGlsZChyLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCFlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGh9KSxXLmF0dHJpYnV0ZXM9byhmdW5jdGlvbihlKXtlLmlubmVySFRNTD1cIjxzZWxlY3Q+PC9zZWxlY3Q+XCI7dmFyIHQ9dHlwZW9mIGUubGFzdENoaWxkLmdldEF0dHJpYnV0ZShcIm11bHRpcGxlXCIpO3JldHVyblwiYm9vbGVhblwiIT09dCYmXCJzdHJpbmdcIiE9PXR9KSxXLmdldEJ5Q2xhc3NOYW1lPW8oZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPVwiPGRpdiBjbGFzcz0naGlkZGVuIGUnPjwvZGl2PjxkaXYgY2xhc3M9J2hpZGRlbic+PC9kaXY+XCIsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJlXCIpLmxlbmd0aD8oZS5sYXN0Q2hpbGQuY2xhc3NOYW1lPVwiZVwiLDI9PT1lLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJlXCIpLmxlbmd0aCk6ITF9KSxXLmdldEJ5TmFtZT1vKGZ1bmN0aW9uKGUpe2UuaWQ9UCswLGUuaW5uZXJIVE1MPVwiPGEgbmFtZT0nXCIrUCtcIic+PC9hPjxkaXYgbmFtZT0nXCIrUCtcIic+PC9kaXY+XCIsSC5pbnNlcnRCZWZvcmUoZSxILmZpcnN0Q2hpbGQpO3ZhciB0PXIuZ2V0RWxlbWVudHNCeU5hbWUmJnIuZ2V0RWxlbWVudHNCeU5hbWUoUCkubGVuZ3RoPT09MityLmdldEVsZW1lbnRzQnlOYW1lKFArMCkubGVuZ3RoO3JldHVybiBXLmdldElkTm90TmFtZT0hci5nZXRFbGVtZW50QnlJZChQKSxILnJlbW92ZUNoaWxkKGUpLHR9KSxDLmF0dHJIYW5kbGU9byhmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsZS5maXJzdENoaWxkJiZ0eXBlb2YgZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSE9PVYmJlwiI1wiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIil9KT97fTp7aHJlZjpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIsMil9LHR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKX19LFcuZ2V0SWROb3ROYW1lPyhDLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZih0eXBlb2YgdC5nZXRFbGVtZW50QnlJZCE9PVYmJiFNKXt2YXIgbj10LmdldEVsZW1lbnRCeUlkKGUpO3JldHVybiBuJiZuLnBhcmVudE5vZGU/W25dOltdfX0sQy5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKHh0LFR0KTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlKFwiaWRcIik9PT10fX0pOihDLmZpbmQuSUQ9ZnVuY3Rpb24oZSxuKXtpZih0eXBlb2Ygbi5nZXRFbGVtZW50QnlJZCE9PVYmJiFNKXt2YXIgcj1uLmdldEVsZW1lbnRCeUlkKGUpO3JldHVybiByP3IuaWQ9PT1lfHx0eXBlb2Ygci5nZXRBdHRyaWJ1dGVOb2RlIT09ViYmci5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikudmFsdWU9PT1lP1tyXTp0OltdfX0sQy5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKHh0LFR0KTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49dHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSE9PVYmJmUuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiBuJiZuLnZhbHVlPT09dH19KSxDLmZpbmQuVEFHPVcudGFnTmFtZU5vQ29tbWVudHM/ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdHlwZW9mIG4uZ2V0RWxlbWVudHNCeVRhZ05hbWUhPT1WP24uZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSk6dH06ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9MCxvPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSk7aWYoXCIqXCI9PT1lKXtmb3IoO249b1tpXTtpKyspMT09PW4ubm9kZVR5cGUmJnIucHVzaChuKTtyZXR1cm4gcn1yZXR1cm4gb30sQy5maW5kLk5BTUU9Vy5nZXRCeU5hbWUmJmZ1bmN0aW9uKGUsbil7cmV0dXJuIHR5cGVvZiBuLmdldEVsZW1lbnRzQnlOYW1lIT09Vj9uLmdldEVsZW1lbnRzQnlOYW1lKG5hbWUpOnR9LEMuZmluZC5DTEFTUz1XLmdldEJ5Q2xhc3NOYW1lJiZmdW5jdGlvbihlLG4pe3JldHVybiB0eXBlb2Ygbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPT09Vnx8TT90Om4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShlKX0sXz1bXSxxPVtcIjpmb2N1c1wiXSwoVy5xc2E9bihyLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKG8oZnVuY3Rpb24oZSl7ZS5pbm5lckhUTUw9XCI8c2VsZWN0PjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsZS5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGh8fHEucHVzaChcIlxcXFxbXCIrZXQrXCIqKD86Y2hlY2tlZHxkaXNhYmxlZHxpc21hcHxtdWx0aXBsZXxyZWFkb25seXxzZWxlY3RlZHx2YWx1ZSlcIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHxxLnB1c2goXCI6Y2hlY2tlZFwiKX0pLG8oZnVuY3Rpb24oZSl7ZS5pbm5lckhUTUw9XCI8aW5wdXQgdHlwZT0naGlkZGVuJyBpPScnLz5cIixlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbaV49JyddXCIpLmxlbmd0aCYmcS5wdXNoKFwiWypeJF09XCIrZXQrXCIqKD86XFxcIlxcXCJ8JycpXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aHx8cS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLHEucHVzaChcIiwuKjpcIil9KSksKFcubWF0Y2hlc1NlbGVjdG9yPW4oRj1ILm1hdGNoZXNTZWxlY3Rvcnx8SC5tb3pNYXRjaGVzU2VsZWN0b3J8fEgud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxILm9NYXRjaGVzU2VsZWN0b3J8fEgubXNNYXRjaGVzU2VsZWN0b3IpKSYmbyhmdW5jdGlvbihlKXtXLmRpc2Nvbm5lY3RlZE1hdGNoPUYuY2FsbChlLFwiZGl2XCIpLEYuY2FsbChlLFwiW3MhPScnXTp4XCIpLF8ucHVzaChcIiE9XCIsb3QpfSkscT1SZWdFeHAocS5qb2luKFwifFwiKSksXz1SZWdFeHAoXy5qb2luKFwifFwiKSksTz1uKEguY29udGFpbnMpfHxILmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uP2Z1bmN0aW9uKGUsdCl7dmFyIG49OT09PWUubm9kZVR5cGU/ZS5kb2N1bWVudEVsZW1lbnQ6ZSxyPXQmJnQucGFyZW50Tm9kZTtyZXR1cm4gZT09PXJ8fCEoIXJ8fDEhPT1yLm5vZGVUeXBlfHwhKG4uY29udGFpbnM/bi5jb250YWlucyhyKTplLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHIpKSl9OmZ1bmN0aW9uKGUsdCl7aWYodClmb3IoO3Q9dC5wYXJlbnROb2RlOylpZih0PT09ZSlyZXR1cm4hMDtyZXR1cm4hMX0sQj1ILmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uP2Z1bmN0aW9uKGUsdCl7dmFyIG47cmV0dXJuIGU9PT10PyhBPSEwLDApOihuPXQuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCkpPzEmbnx8ZS5wYXJlbnROb2RlJiYxMT09PWUucGFyZW50Tm9kZS5ub2RlVHlwZT9lPT09cnx8TyhSLGUpPy0xOnQ9PT1yfHxPKFIsdCk/MTowOjQmbj8tMToxOmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24/LTE6MX06ZnVuY3Rpb24oZSx0KXt2YXIgbixpPTAsbz1lLnBhcmVudE5vZGUsYT10LnBhcmVudE5vZGUsdT1bZV0sbD1bdF07aWYoZT09PXQpcmV0dXJuIEE9ITAsMDtpZihlLnNvdXJjZUluZGV4JiZ0LnNvdXJjZUluZGV4KXJldHVybih+dC5zb3VyY2VJbmRleHx8WSktKE8oUixlKSYmfmUuc291cmNlSW5kZXh8fFkpO2lmKCFvfHwhYSlyZXR1cm4gZT09PXI/LTE6dD09PXI/MTpvPy0xOmE/MTowO2lmKG89PT1hKXJldHVybiBzKGUsdCk7Zm9yKG49ZTtuPW4ucGFyZW50Tm9kZTspdS51bnNoaWZ0KG4pO2ZvcihuPXQ7bj1uLnBhcmVudE5vZGU7KWwudW5zaGlmdChuKTtmb3IoO3VbaV09PT1sW2ldOylpKys7cmV0dXJuIGk/cyh1W2ldLGxbaV0pOnVbaV09PT1SPy0xOmxbaV09PT1SPzE6MH0sQT0hMSxbMCwwXS5zb3J0KEIpLFcuZGV0ZWN0RHVwbGljYXRlcz1BLEwpOkx9LGEubWF0Y2hlcz1mdW5jdGlvbihlLHQpe3JldHVybiBhKGUsbnVsbCxudWxsLHQpfSxhLm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihlLHQpe2lmKChlLm93bmVyRG9jdW1lbnR8fGUpIT09TCYmRChlKSx0PXQucmVwbGFjZShidCxcIj0nJDEnXVwiKSwhKCFXLm1hdGNoZXNTZWxlY3Rvcnx8TXx8XyYmXy50ZXN0KHQpfHxxLnRlc3QodCkpKXRyeXt2YXIgbj1GLmNhbGwoZSx0KTtpZihufHxXLmRpc2Nvbm5lY3RlZE1hdGNofHxlLmRvY3VtZW50JiYxMSE9PWUuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIG59Y2F0Y2gocil7fXJldHVybiBhKHQsTCxudWxsLFtlXSkubGVuZ3RoPjB9LGEuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZS5vd25lckRvY3VtZW50fHxlKSE9PUwmJkQoZSksTyhlLHQpfSxhLmF0dHI9ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4oZS5vd25lckRvY3VtZW50fHxlKSE9PUwmJkQoZSksTXx8KHQ9dC50b0xvd2VyQ2FzZSgpKSwobj1DLmF0dHJIYW5kbGVbdF0pP24oZSk6TXx8Vy5hdHRyaWJ1dGVzP2UuZ2V0QXR0cmlidXRlKHQpOigobj1lLmdldEF0dHJpYnV0ZU5vZGUodCkpfHxlLmdldEF0dHJpYnV0ZSh0KSkmJmVbdF09PT0hMD90Om4mJm4uc3BlY2lmaWVkP24udmFsdWU6bnVsbH0sYS5lcnJvcj1mdW5jdGlvbihlKXt0aHJvdyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiK2UpfSxhLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1bXSxyPTEsaT0wO2lmKEE9IVcuZGV0ZWN0RHVwbGljYXRlcyxlLnNvcnQoQiksQSl7Zm9yKDt0PWVbcl07cisrKXQ9PT1lW3ItMV0mJihpPW4ucHVzaChyKSk7Zm9yKDtpLS07KWUuc3BsaWNlKG5baV0sMSl9cmV0dXJuIGV9LGs9YS5nZXRUZXh0PWZ1bmN0aW9uKGUpe3ZhciB0LG49XCJcIixyPTAsaT1lLm5vZGVUeXBlO2lmKGkpe2lmKDE9PT1pfHw5PT09aXx8MTE9PT1pKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZS50ZXh0Q29udGVudClyZXR1cm4gZS50ZXh0Q29udGVudDtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpbis9ayhlKX1lbHNlIGlmKDM9PT1pfHw0PT09aSlyZXR1cm4gZS5ub2RlVmFsdWV9ZWxzZSBmb3IoO3Q9ZVtyXTtyKyspbis9ayh0KTtyZXR1cm4gbn0sQz1hLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmksbWF0Y2g6cHQsZmluZDp7fSxyZWxhdGl2ZTp7XCI+XCI6e2RpcjpcInBhcmVudE5vZGVcIixmaXJzdDohMH0sXCIgXCI6e2RpcjpcInBhcmVudE5vZGVcIn0sXCIrXCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wiLGZpcnN0OiEwfSxcIn5cIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCJ9fSxwcmVGaWx0ZXI6e0FUVFI6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS5yZXBsYWNlKHh0LFR0KSxlWzNdPShlWzRdfHxlWzVdfHxcIlwiKS5yZXBsYWNlKHh0LFR0KSxcIn49XCI9PT1lWzJdJiYoZVszXT1cIiBcIitlWzNdK1wiIFwiKSxlLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0udG9Mb3dlckNhc2UoKSxcIm50aFwiPT09ZVsxXS5zbGljZSgwLDMpPyhlWzNdfHxhLmVycm9yKGVbMF0pLGVbNF09KyhlWzRdP2VbNV0rKGVbNl18fDEpOjIqKFwiZXZlblwiPT09ZVszXXx8XCJvZGRcIj09PWVbM10pKSxlWzVdPSsoZVs3XStlWzhdfHxcIm9kZFwiPT09ZVszXSkpOmVbM10mJmEuZXJyb3IoZVswXSksZX0sUFNFVURPOmZ1bmN0aW9uKGUpe3ZhciB0LG49IWVbNV0mJmVbMl07cmV0dXJuIHB0LkNISUxELnRlc3QoZVswXSk/bnVsbDooZVs0XT9lWzJdPWVbNF06biYmY3QudGVzdChuKSYmKHQ9ZihuLCEwKSkmJih0PW4uaW5kZXhPZihcIilcIixuLmxlbmd0aC10KS1uLmxlbmd0aCkmJihlWzBdPWVbMF0uc2xpY2UoMCx0KSxlWzJdPW4uc2xpY2UoMCx0KSksZS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGUpe3JldHVyblwiKlwiPT09ZT9mdW5jdGlvbigpe3JldHVybiEwfTooZT1lLnJlcGxhY2UoeHQsVHQpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24odCl7cmV0dXJuIHQubm9kZU5hbWUmJnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWV9KX0sQ0xBU1M6ZnVuY3Rpb24oZSl7dmFyIHQ9eltlK1wiIFwiXTtyZXR1cm4gdHx8KHQ9UmVnRXhwKFwiKF58XCIrZXQrXCIpXCIrZStcIihcIitldCtcInwkKVwiKSkmJnooZSxmdW5jdGlvbihlKXtyZXR1cm4gdC50ZXN0KGUuY2xhc3NOYW1lfHx0eXBlb2YgZS5nZXRBdHRyaWJ1dGUhPT1WJiZlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKX0pfSxBVFRSOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZnVuY3Rpb24ocil7dmFyIGk9YS5hdHRyKHIsZSk7cmV0dXJuIG51bGw9PWk/XCIhPVwiPT09dDp0PyhpKz1cIlwiLFwiPVwiPT09dD9pPT09bjpcIiE9XCI9PT10P2khPT1uOlwiXj1cIj09PXQ/biYmMD09PWkuaW5kZXhPZihuKTpcIio9XCI9PT10P24mJmkuaW5kZXhPZihuKT4tMTpcIiQ9XCI9PT10P24mJmkuc3Vic3RyKGkubGVuZ3RoLW4ubGVuZ3RoKT09PW46XCJ+PVwiPT09dD8oXCIgXCIraStcIiBcIikuaW5kZXhPZihuKT4tMTpcInw9XCI9PT10P2k9PT1ufHxpLnN1YnN0cigwLG4ubGVuZ3RoKzEpPT09bitcIi1cIjohMSk6ITB9fSxDSElMRDpmdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvPVwibnRoXCIhPT1lLnNsaWNlKDAsMyksYT1cImxhc3RcIiE9PWUuc2xpY2UoLTQpLHM9XCJvZi10eXBlXCI9PT10O3JldHVybiAxPT09ciYmMD09PWk/ZnVuY3Rpb24oZSl7cmV0dXJuISFlLnBhcmVudE5vZGV9OmZ1bmN0aW9uKHQsbix1KXt2YXIgbCxjLGYscCxkLGgsZz1vIT09YT9cIm5leHRTaWJsaW5nXCI6XCJwcmV2aW91c1NpYmxpbmdcIixtPXQucGFyZW50Tm9kZSx5PXMmJnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSx2PSF1JiYhcztpZihtKXtpZihvKXtmb3IoO2c7KXtmb3IoZj10O2Y9ZltnXTspaWYocz9mLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT15OjE9PT1mLm5vZGVUeXBlKXJldHVybiExO2g9Zz1cIm9ubHlcIj09PWUmJiFoJiZcIm5leHRTaWJsaW5nXCJ9cmV0dXJuITB9aWYoaD1bYT9tLmZpcnN0Q2hpbGQ6bS5sYXN0Q2hpbGRdLGEmJnYpe2ZvcihjPW1bUF18fChtW1BdPXt9KSxsPWNbZV18fFtdLGQ9bFswXT09PSQmJmxbMV0scD1sWzBdPT09JCYmbFsyXSxmPWQmJm0uY2hpbGROb2Rlc1tkXTtmPSsrZCYmZiYmZltnXXx8KHA9ZD0wKXx8aC5wb3AoKTspaWYoMT09PWYubm9kZVR5cGUmJisrcCYmZj09PXQpe2NbZV09WyQsZCxwXTticmVha319ZWxzZSBpZih2JiYobD0odFtQXXx8KHRbUF09e30pKVtlXSkmJmxbMF09PT0kKXA9bFsxXTtlbHNlIGZvcig7KGY9KytkJiZmJiZmW2ddfHwocD1kPTApfHxoLnBvcCgpKSYmKChzP2Yubm9kZU5hbWUudG9Mb3dlckNhc2UoKSE9PXk6MSE9PWYubm9kZVR5cGUpfHwhKytwfHwodiYmKChmW1BdfHwoZltQXT17fSkpW2VdPVskLHBdKSxmIT09dCkpOyk7cmV0dXJuIHAtPWkscD09PXJ8fDA9PT1wJXImJnAvcj49MH19fSxQU0VVRE86ZnVuY3Rpb24oZSx0KXt2YXIgbixyPUMucHNldWRvc1tlXXx8Qy5zZXRGaWx0ZXJzW2UudG9Mb3dlckNhc2UoKV18fGEuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiK2UpO3JldHVybiByW1BdP3IodCk6ci5sZW5ndGg+MT8obj1bZSxlLFwiXCIsdF0sQy5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGUudG9Mb3dlckNhc2UoKSk/aShmdW5jdGlvbihlLG4pe2Zvcih2YXIgaSxvPXIoZSx0KSxhPW8ubGVuZ3RoO2EtLTspaT1aLmNhbGwoZSxvW2FdKSxlW2ldPSEobltpXT1vW2FdKX0pOmZ1bmN0aW9uKGUpe3JldHVybiByKGUsMCxuKX0pOnJ9fSxwc2V1ZG9zOntub3Q6aShmdW5jdGlvbihlKXt2YXIgdD1bXSxuPVtdLHI9UyhlLnJlcGxhY2UoYXQsXCIkMVwiKSk7cmV0dXJuIHJbUF0/aShmdW5jdGlvbihlLHQsbixpKXtmb3IodmFyIG8sYT1yKGUsbnVsbCxpLFtdKSxzPWUubGVuZ3RoO3MtLTspKG89YVtzXSkmJihlW3NdPSEodFtzXT1vKSl9KTpmdW5jdGlvbihlLGksbyl7cmV0dXJuIHRbMF09ZSxyKHQsbnVsbCxvLG4pLCFuLnBvcCgpfX0pLGhhczppKGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gYShlLHQpLmxlbmd0aD4wfX0pLGNvbnRhaW5zOmkoZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybih0LnRleHRDb250ZW50fHx0LmlubmVyVGV4dHx8ayh0KSkuaW5kZXhPZihlKT4tMX19KSxsYW5nOmkoZnVuY3Rpb24oZSl7cmV0dXJuIGZ0LnRlc3QoZXx8XCJcIil8fGEuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIitlKSxlPWUucmVwbGFjZSh4dCxUdCkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbih0KXt2YXIgbjtkbyBpZihuPU0/dC5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKXx8dC5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpOnQubGFuZylyZXR1cm4gbj1uLnRvTG93ZXJDYXNlKCksbj09PWV8fDA9PT1uLmluZGV4T2YoZStcIi1cIik7d2hpbGUoKHQ9dC5wYXJlbnROb2RlKSYmMT09PXQubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbih0KXt2YXIgbj1lLmxvY2F0aW9uJiZlLmxvY2F0aW9uLmhhc2g7cmV0dXJuIG4mJm4uc2xpY2UoMSk9PT10LmlkfSxyb290OmZ1bmN0aW9uKGUpe3JldHVybiBlPT09SH0sZm9jdXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1MLmFjdGl2ZUVsZW1lbnQmJighTC5oYXNGb2N1c3x8TC5oYXNGb2N1cygpKSYmISEoZS50eXBlfHxlLmhyZWZ8fH5lLnRhYkluZGV4KX0sZW5hYmxlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5kaXNhYmxlZD09PSExfSxkaXNhYmxlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5kaXNhYmxlZD09PSEwfSxjaGVja2VkOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiYhIWUuY2hlY2tlZHx8XCJvcHRpb25cIj09PXQmJiEhZS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsZS5zZWxlY3RlZD09PSEwfSxlbXB0eTpmdW5jdGlvbihlKXtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpaWYoZS5ub2RlTmFtZT5cIkBcInx8Mz09PWUubm9kZVR5cGV8fDQ9PT1lLm5vZGVUeXBlKXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIUMucHNldWRvcy5lbXB0eShlKX0saGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiB5dC50ZXN0KGUubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihlKXtyZXR1cm4gbXQudGVzdChlLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiZcImJ1dHRvblwiPT09ZS50eXBlfHxcImJ1dHRvblwiPT09dH0sdGV4dDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm5cImlucHV0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09ZS50eXBlJiYobnVsbD09KHQ9ZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8dC50b0xvd2VyQ2FzZSgpPT09ZS50eXBlKX0sZmlyc3Q6YyhmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6YyhmdW5jdGlvbihlLHQpe3JldHVyblt0LTFdfSksZXE6YyhmdW5jdGlvbihlLHQsbil7cmV0dXJuWzA+bj9uK3Q6bl19KSxldmVuOmMoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDt0Pm47bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxvZGQ6YyhmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0xO3Q+bjtuKz0yKWUucHVzaChuKTtyZXR1cm4gZX0pLGx0OmMoZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj0wPm4/bit0Om47LS1yPj0wOyllLnB1c2gocik7cmV0dXJuIGV9KSxndDpjKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9MD5uP24rdDpuO3Q+KytyOyllLnB1c2gocik7cmV0dXJuIGV9KX19O2Zvcih3IGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KUMucHNldWRvc1t3XT11KHcpO2Zvcih3IGlue3N1Ym1pdDohMCxyZXNldDohMH0pQy5wc2V1ZG9zW3ddPWwodyk7Uz1hLmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9W10sbz1VW2UrXCIgXCJdO2lmKCFvKXtmb3IodHx8KHQ9ZihlKSksbj10Lmxlbmd0aDtuLS07KW89eSh0W25dKSxvW1BdP3IucHVzaChvKTppLnB1c2gobyk7bz1VKGUsdihpLHIpKX1yZXR1cm4gb30sQy5wc2V1ZG9zLm50aD1DLnBzZXVkb3MuZXEsQy5maWx0ZXJzPVQucHJvdG90eXBlPUMucHNldWRvcyxDLnNldEZpbHRlcnM9bmV3IFQsRCgpLGEuYXR0cj1zdC5hdHRyLHN0LmZpbmQ9YSxzdC5leHByPWEuc2VsZWN0b3JzLHN0LmV4cHJbXCI6XCJdPXN0LmV4cHIucHNldWRvcyxzdC51bmlxdWU9YS51bmlxdWVTb3J0LHN0LnRleHQ9YS5nZXRUZXh0LHN0LmlzWE1MRG9jPWEuaXNYTUwsc3QuY29udGFpbnM9YS5jb250YWluc30oZSk7dmFyIFB0PS9VbnRpbCQvLFJ0PS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFd0PS9eLlteOiNcXFtcXC4sXSokLywkdD1zdC5leHByLm1hdGNoLm5lZWRzQ29udGV4dCxJdD17Y2hpbGRyZW46ITAsY29udGVudHM6ITAsbmV4dDohMCxwcmV2OiEwfTtzdC5mbi5leHRlbmQoe2ZpbmQ6ZnVuY3Rpb24oZSl7dmFyIHQsbixyO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiByPXRoaXMsdGhpcy5wdXNoU3RhY2soc3QoZSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDtyLmxlbmd0aD50O3QrKylpZihzdC5jb250YWlucyhyW3RdLHRoaXMpKXJldHVybiEwfSkpO2ZvcihuPVtdLHQ9MDt0aGlzLmxlbmd0aD50O3QrKylzdC5maW5kKGUsdGhpc1t0XSxuKTtyZXR1cm4gbj10aGlzLnB1c2hTdGFjayhzdC51bmlxdWUobikpLG4uc2VsZWN0b3I9KHRoaXMuc2VsZWN0b3I/dGhpcy5zZWxlY3RvcitcIiBcIjpcIlwiKStlLG59LGhhczpmdW5jdGlvbihlKXt2YXIgdCxuPXN0KGUsdGhpcykscj1uLmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodD0wO3I+dDt0KyspaWYoc3QuY29udGFpbnModGhpcyxuW3RdKSlyZXR1cm4hMH0pfSxub3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYodGhpcyxlLCExKSl9LGZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZih0aGlzLGUsITApKX0saXM6ZnVuY3Rpb24oZSl7cmV0dXJuISFlJiYoXCJzdHJpbmdcIj09dHlwZW9mIGU/JHQudGVzdChlKT9zdChlLHRoaXMuY29udGV4dCkuaW5kZXgodGhpc1swXSk+PTA6c3QuZmlsdGVyKGUsdGhpcykubGVuZ3RoPjA6dGhpcy5maWx0ZXIoZSkubGVuZ3RoPjApfSxjbG9zZXN0OmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLHI9MCxpPXRoaXMubGVuZ3RoLG89W10sYT0kdC50ZXN0KGUpfHxcInN0cmluZ1wiIT10eXBlb2YgZT9zdChlLHR8fHRoaXMuY29udGV4dCk6MDtpPnI7cisrKWZvcihuPXRoaXNbcl07biYmbi5vd25lckRvY3VtZW50JiZuIT09dCYmMTEhPT1uLm5vZGVUeXBlOyl7aWYoYT9hLmluZGV4KG4pPi0xOnN0LmZpbmQubWF0Y2hlc1NlbGVjdG9yKG4sZSkpe28ucHVzaChuKTticmVha31uPW4ucGFyZW50Tm9kZX1yZXR1cm4gdGhpcy5wdXNoU3RhY2soby5sZW5ndGg+MT9zdC51bmlxdWUobyk6byl9LGluZGV4OmZ1bmN0aW9uKGUpe3JldHVybiBlP1wic3RyaW5nXCI9PXR5cGVvZiBlP3N0LmluQXJyYXkodGhpc1swXSxzdChlKSk6c3QuaW5BcnJheShlLmpxdWVyeT9lWzBdOmUsdGhpcyk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1cInN0cmluZ1wiPT10eXBlb2YgZT9zdChlLHQpOnN0Lm1ha2VBcnJheShlJiZlLm5vZGVUeXBlP1tlXTplKSxyPXN0Lm1lcmdlKHRoaXMuZ2V0KCksbik7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHN0LnVuaXF1ZShyKSl9LGFkZEJhY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWU/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoZSkpfX0pLHN0LmZuLmFuZFNlbGY9c3QuZm4uYWRkQmFjayxzdC5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiYxMSE9PXQubm9kZVR5cGU/dDpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBzdC5kaXIoZSxcInBhcmVudE5vZGVcIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHN0LmRpcihlLFwicGFyZW50Tm9kZVwiLG4pfSxuZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBjKGUsXCJuZXh0U2libGluZ1wiKX0scHJldjpmdW5jdGlvbihlKXtyZXR1cm4gYyhlLFwicHJldmlvdXNTaWJsaW5nXCIpXG59LG5leHRBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIHN0LmRpcihlLFwibmV4dFNpYmxpbmdcIil9LHByZXZBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIHN0LmRpcihlLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBzdC5kaXIoZSxcIm5leHRTaWJsaW5nXCIsbil9LHByZXZVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHN0LmRpcihlLFwicHJldmlvdXNTaWJsaW5nXCIsbil9LHNpYmxpbmdzOmZ1bmN0aW9uKGUpe3JldHVybiBzdC5zaWJsaW5nKChlLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGUpfSxjaGlsZHJlbjpmdW5jdGlvbihlKXtyZXR1cm4gc3Quc2libGluZyhlLmZpcnN0Q2hpbGQpfSxjb250ZW50czpmdW5jdGlvbihlKXtyZXR1cm4gc3Qubm9kZU5hbWUoZSxcImlmcmFtZVwiKT9lLmNvbnRlbnREb2N1bWVudHx8ZS5jb250ZW50V2luZG93LmRvY3VtZW50OnN0Lm1lcmdlKFtdLGUuY2hpbGROb2Rlcyl9fSxmdW5jdGlvbihlLHQpe3N0LmZuW2VdPWZ1bmN0aW9uKG4scil7dmFyIGk9c3QubWFwKHRoaXMsdCxuKTtyZXR1cm4gUHQudGVzdChlKXx8KHI9biksciYmXCJzdHJpbmdcIj09dHlwZW9mIHImJihpPXN0LmZpbHRlcihyLGkpKSxpPXRoaXMubGVuZ3RoPjEmJiFJdFtlXT9zdC51bmlxdWUoaSk6aSx0aGlzLmxlbmd0aD4xJiZSdC50ZXN0KGUpJiYoaT1pLnJldmVyc2UoKSksdGhpcy5wdXNoU3RhY2soaSl9fSksc3QuZXh0ZW5kKHtmaWx0ZXI6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBuJiYoZT1cIjpub3QoXCIrZStcIilcIiksMT09PXQubGVuZ3RoP3N0LmZpbmQubWF0Y2hlc1NlbGVjdG9yKHRbMF0sZSk/W3RbMF1dOltdOnN0LmZpbmQubWF0Y2hlcyhlLHQpfSxkaXI6ZnVuY3Rpb24oZSxuLHIpe2Zvcih2YXIgaT1bXSxvPWVbbl07byYmOSE9PW8ubm9kZVR5cGUmJihyPT09dHx8MSE9PW8ubm9kZVR5cGV8fCFzdChvKS5pcyhyKSk7KTE9PT1vLm5vZGVUeXBlJiZpLnB1c2gobyksbz1vW25dO3JldHVybiBpfSxzaWJsaW5nOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtdO2U7ZT1lLm5leHRTaWJsaW5nKTE9PT1lLm5vZGVUeXBlJiZlIT09dCYmbi5wdXNoKGUpO3JldHVybiBufX0pO3ZhciB6dD1cImFiYnJ8YXJ0aWNsZXxhc2lkZXxhdWRpb3xiZGl8Y2FudmFzfGRhdGF8ZGF0YWxpc3R8ZGV0YWlsc3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8aGVhZGVyfGhncm91cHxtYXJrfG1ldGVyfG5hdnxvdXRwdXR8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRpbWV8dmlkZW9cIixYdD0vIGpRdWVyeVxcZCs9XCIoPzpudWxsfFxcZCspXCIvZyxVdD1SZWdFeHAoXCI8KD86XCIrenQrXCIpW1xcXFxzLz5dXCIsXCJpXCIpLFZ0PS9eXFxzKy8sWXQ9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLEp0PS88KFtcXHc6XSspLyxHdD0vPHRib2R5L2ksUXQ9Lzx8JiM/XFx3KzsvLEt0PS88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksWnQ9L14oPzpjaGVja2JveHxyYWRpbykkL2ksZW49L2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSx0bj0vXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLG5uPS9edHJ1ZVxcLyguKikvLHJuPS9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxvbj17b3B0aW9uOlsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLGxlZ2VuZDpbMSxcIjxmaWVsZHNldD5cIixcIjwvZmllbGRzZXQ+XCJdLGFyZWE6WzEsXCI8bWFwPlwiLFwiPC9tYXA+XCJdLHBhcmFtOlsxLFwiPG9iamVjdD5cIixcIjwvb2JqZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDpzdC5zdXBwb3J0Lmh0bWxTZXJpYWxpemU/WzAsXCJcIixcIlwiXTpbMSxcIlg8ZGl2PlwiLFwiPC9kaXY+XCJdfSxhbj1wKFYpLHNuPWFuLmFwcGVuZENoaWxkKFYuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7b24ub3B0Z3JvdXA9b24ub3B0aW9uLG9uLnRib2R5PW9uLnRmb290PW9uLmNvbGdyb3VwPW9uLmNhcHRpb249b24udGhlYWQsb24udGg9b24udGQsc3QuZm4uZXh0ZW5kKHt0ZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBzdC5hY2Nlc3ModGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gZT09PXQ/c3QudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuYXBwZW5kKCh0aGlzWzBdJiZ0aGlzWzBdLm93bmVyRG9jdW1lbnR8fFYpLmNyZWF0ZVRleHROb2RlKGUpKX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSx3cmFwQWxsOmZ1bmN0aW9uKGUpe2lmKHN0LmlzRnVuY3Rpb24oZSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbih0KXtzdCh0aGlzKS53cmFwQWxsKGUuY2FsbCh0aGlzLHQpKX0pO2lmKHRoaXNbMF0pe3ZhciB0PXN0KGUsdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCk7dGhpc1swXS5wYXJlbnROb2RlJiZ0Lmluc2VydEJlZm9yZSh0aGlzWzBdKSx0Lm1hcChmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzO2UuZmlyc3RDaGlsZCYmMT09PWUuZmlyc3RDaGlsZC5ub2RlVHlwZTspZT1lLmZpcnN0Q2hpbGQ7cmV0dXJuIGV9KS5hcHBlbmQodGhpcyl9cmV0dXJuIHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihlKXtyZXR1cm4gc3QuaXNGdW5jdGlvbihlKT90aGlzLmVhY2goZnVuY3Rpb24odCl7c3QodGhpcykud3JhcElubmVyKGUuY2FsbCh0aGlzLHQpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PXN0KHRoaXMpLG49dC5jb250ZW50cygpO24ubGVuZ3RoP24ud3JhcEFsbChlKTp0LmFwcGVuZChlKX0pfSx3cmFwOmZ1bmN0aW9uKGUpe3ZhciB0PXN0LmlzRnVuY3Rpb24oZSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihuKXtzdCh0aGlzKS53cmFwQWxsKHQ/ZS5jYWxsKHRoaXMsbik6ZSl9KX0sdW53cmFwOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpe3N0Lm5vZGVOYW1lKHRoaXMsXCJib2R5XCIpfHxzdCh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSkuZW5kKCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywhMCxmdW5jdGlvbihlKXsoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpJiZ0aGlzLmFwcGVuZENoaWxkKGUpfSl9LHByZXBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsITAsZnVuY3Rpb24oZSl7KDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKSYmdGhpcy5pbnNlcnRCZWZvcmUoZSx0aGlzLmZpcnN0Q2hpbGQpfSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywhMSxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywhMSxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzLm5leHRTaWJsaW5nKX0pfSxyZW1vdmU6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4scj0wO251bGwhPShuPXRoaXNbcl0pO3IrKykoIWV8fHN0LmZpbHRlcihlLFtuXSkubGVuZ3RoPjApJiYodHx8MSE9PW4ubm9kZVR5cGV8fHN0LmNsZWFuRGF0YShiKG4pKSxuLnBhcmVudE5vZGUmJih0JiZzdC5jb250YWlucyhuLm93bmVyRG9jdW1lbnQsbikmJm0oYihuLFwic2NyaXB0XCIpKSxuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobikpKTtyZXR1cm4gdGhpc30sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD0wO251bGwhPShlPXRoaXNbdF0pO3QrKyl7Zm9yKDE9PT1lLm5vZGVUeXBlJiZzdC5jbGVhbkRhdGEoYihlLCExKSk7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5vcHRpb25zJiZzdC5ub2RlTmFtZShlLFwic2VsZWN0XCIpJiYoZS5vcHRpb25zLmxlbmd0aD0wKX1yZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1udWxsPT1lPyExOmUsdD1udWxsPT10P2U6dCx0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBzdC5jbG9uZSh0aGlzLGUsdCl9KX0saHRtbDpmdW5jdGlvbihlKXtyZXR1cm4gc3QuYWNjZXNzKHRoaXMsZnVuY3Rpb24oZSl7dmFyIG49dGhpc1swXXx8e30scj0wLGk9dGhpcy5sZW5ndGg7aWYoZT09PXQpcmV0dXJuIDE9PT1uLm5vZGVUeXBlP24uaW5uZXJIVE1MLnJlcGxhY2UoWHQsXCJcIik6dDtpZighKFwic3RyaW5nXCIhPXR5cGVvZiBlfHxLdC50ZXN0KGUpfHwhc3Quc3VwcG9ydC5odG1sU2VyaWFsaXplJiZVdC50ZXN0KGUpfHwhc3Quc3VwcG9ydC5sZWFkaW5nV2hpdGVzcGFjZSYmVnQudGVzdChlKXx8b25bKEp0LmV4ZWMoZSl8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXSkpe2U9ZS5yZXBsYWNlKFl0LFwiPCQxPjwvJDI+XCIpO3RyeXtmb3IoO2k+cjtyKyspbj10aGlzW3JdfHx7fSwxPT09bi5ub2RlVHlwZSYmKHN0LmNsZWFuRGF0YShiKG4sITEpKSxuLmlubmVySFRNTD1lKTtuPTB9Y2F0Y2gobyl7fX1uJiZ0aGlzLmVtcHR5KCkuYXBwZW5kKGUpfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LHJlcGxhY2VXaXRoOmZ1bmN0aW9uKGUpe3ZhciB0PXN0LmlzRnVuY3Rpb24oZSk7cmV0dXJuIHR8fFwic3RyaW5nXCI9PXR5cGVvZiBlfHwoZT1zdChlKS5ub3QodGhpcykuZGV0YWNoKCkpLHRoaXMuZG9tTWFuaXAoW2VdLCEwLGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubmV4dFNpYmxpbmcsbj10aGlzLnBhcmVudE5vZGU7KG4mJjE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGUpJiYoc3QodGhpcykucmVtb3ZlKCksdD90LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsdCk6bi5hcHBlbmRDaGlsZChlKSl9KX0sZGV0YWNoOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlbW92ZShlLCEwKX0sZG9tTWFuaXA6ZnVuY3Rpb24oZSxuLHIpe2U9ZXQuYXBwbHkoW10sZSk7dmFyIGksbyxhLHMsdSxsLGM9MCxmPXRoaXMubGVuZ3RoLHA9dGhpcyxtPWYtMSx5PWVbMF0sdj1zdC5pc0Z1bmN0aW9uKHkpO2lmKHZ8fCEoMT49Znx8XCJzdHJpbmdcIiE9dHlwZW9mIHl8fHN0LnN1cHBvcnQuY2hlY2tDbG9uZSkmJmVuLnRlc3QoeSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKXt2YXIgbz1wLmVxKGkpO3YmJihlWzBdPXkuY2FsbCh0aGlzLGksbj9vLmh0bWwoKTp0KSksby5kb21NYW5pcChlLG4scil9KTtpZihmJiYoaT1zdC5idWlsZEZyYWdtZW50KGUsdGhpc1swXS5vd25lckRvY3VtZW50LCExLHRoaXMpLG89aS5maXJzdENoaWxkLDE9PT1pLmNoaWxkTm9kZXMubGVuZ3RoJiYoaT1vKSxvKSl7Zm9yKG49biYmc3Qubm9kZU5hbWUobyxcInRyXCIpLGE9c3QubWFwKGIoaSxcInNjcmlwdFwiKSxoKSxzPWEubGVuZ3RoO2Y+YztjKyspdT1pLGMhPT1tJiYodT1zdC5jbG9uZSh1LCEwLCEwKSxzJiZzdC5tZXJnZShhLGIodSxcInNjcmlwdFwiKSkpLHIuY2FsbChuJiZzdC5ub2RlTmFtZSh0aGlzW2NdLFwidGFibGVcIik/ZCh0aGlzW2NdLFwidGJvZHlcIik6dGhpc1tjXSx1LGMpO2lmKHMpZm9yKGw9YVthLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LHN0Lm1hcChhLGcpLGM9MDtzPmM7YysrKXU9YVtjXSx0bi50ZXN0KHUudHlwZXx8XCJcIikmJiFzdC5fZGF0YSh1LFwiZ2xvYmFsRXZhbFwiKSYmc3QuY29udGFpbnMobCx1KSYmKHUuc3JjP3N0LmFqYXgoe3VybDp1LnNyYyx0eXBlOlwiR0VUXCIsZGF0YVR5cGU6XCJzY3JpcHRcIixhc3luYzohMSxnbG9iYWw6ITEsXCJ0aHJvd3NcIjohMH0pOnN0Lmdsb2JhbEV2YWwoKHUudGV4dHx8dS50ZXh0Q29udGVudHx8dS5pbm5lckhUTUx8fFwiXCIpLnJlcGxhY2Uocm4sXCJcIikpKTtpPW89bnVsbH1yZXR1cm4gdGhpc319KSxzdC5lYWNoKHthcHBlbmRUbzpcImFwcGVuZFwiLHByZXBlbmRUbzpcInByZXBlbmRcIixpbnNlcnRCZWZvcmU6XCJiZWZvcmVcIixpbnNlcnRBZnRlcjpcImFmdGVyXCIscmVwbGFjZUFsbDpcInJlcGxhY2VXaXRoXCJ9LGZ1bmN0aW9uKGUsdCl7c3QuZm5bZV09ZnVuY3Rpb24oZSl7Zm9yKHZhciBuLHI9MCxpPVtdLG89c3QoZSksYT1vLmxlbmd0aC0xO2E+PXI7cisrKW49cj09PWE/dGhpczp0aGlzLmNsb25lKCEwKSxzdChvW3JdKVt0XShuKSx0dC5hcHBseShpLG4uZ2V0KCkpO3JldHVybiB0aGlzLnB1c2hTdGFjayhpKX19KSxzdC5leHRlbmQoe2Nsb25lOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYSxzLHU9c3QuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpO2lmKHN0LnN1cHBvcnQuaHRtbDVDbG9uZXx8c3QuaXNYTUxEb2MoZSl8fCFVdC50ZXN0KFwiPFwiK2Uubm9kZU5hbWUrXCI+XCIpP3M9ZS5jbG9uZU5vZGUoITApOihzbi5pbm5lckhUTUw9ZS5vdXRlckhUTUwsc24ucmVtb3ZlQ2hpbGQocz1zbi5maXJzdENoaWxkKSksIShzdC5zdXBwb3J0Lm5vQ2xvbmVFdmVudCYmc3Quc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZHx8MSE9PWUubm9kZVR5cGUmJjExIT09ZS5ub2RlVHlwZXx8c3QuaXNYTUxEb2MoZSkpKWZvcihyPWIocyksaT1iKGUpLGE9MDtudWxsIT0obz1pW2FdKTsrK2EpclthXSYmdihvLHJbYV0pO2lmKHQpaWYobilmb3IoaT1pfHxiKGUpLHI9cnx8YihzKSxhPTA7bnVsbCE9KG89aVthXSk7YSsrKXkobyxyW2FdKTtlbHNlIHkoZSxzKTtyZXR1cm4gcj1iKHMsXCJzY3JpcHRcIiksci5sZW5ndGg+MCYmbShyLCF1JiZiKGUsXCJzY3JpcHRcIikpLHI9aT1vPW51bGwsc30sYnVpbGRGcmFnbWVudDpmdW5jdGlvbihlLHQsbixyKXtmb3IodmFyIGksbyxhLHMsdSxsLGMsZj1lLmxlbmd0aCxkPXAodCksaD1bXSxnPTA7Zj5nO2crKylpZihvPWVbZ10sb3x8MD09PW8paWYoXCJvYmplY3RcIj09PXN0LnR5cGUobykpc3QubWVyZ2UoaCxvLm5vZGVUeXBlP1tvXTpvKTtlbHNlIGlmKFF0LnRlc3Qobykpe2ZvcihzPXN8fGQuYXBwZW5kQ2hpbGQodC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxhPShKdC5leGVjKG8pfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSx1PW9uW2FdfHxvbi5fZGVmYXVsdCxzLmlubmVySFRNTD11WzFdK28ucmVwbGFjZShZdCxcIjwkMT48LyQyPlwiKSt1WzJdLGM9dVswXTtjLS07KXM9cy5sYXN0Q2hpbGQ7aWYoIXN0LnN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UmJlZ0LnRlc3QobykmJmgucHVzaCh0LmNyZWF0ZVRleHROb2RlKFZ0LmV4ZWMobylbMF0pKSwhc3Quc3VwcG9ydC50Ym9keSlmb3Iobz1cInRhYmxlXCIhPT1hfHxHdC50ZXN0KG8pP1wiPHRhYmxlPlwiIT09dVsxXXx8R3QudGVzdChvKT8wOnM6cy5maXJzdENoaWxkLGM9byYmby5jaGlsZE5vZGVzLmxlbmd0aDtjLS07KXN0Lm5vZGVOYW1lKGw9by5jaGlsZE5vZGVzW2NdLFwidGJvZHlcIikmJiFsLmNoaWxkTm9kZXMubGVuZ3RoJiZvLnJlbW92ZUNoaWxkKGwpO2ZvcihzdC5tZXJnZShoLHMuY2hpbGROb2Rlcykscy50ZXh0Q29udGVudD1cIlwiO3MuZmlyc3RDaGlsZDspcy5yZW1vdmVDaGlsZChzLmZpcnN0Q2hpbGQpO3M9ZC5sYXN0Q2hpbGR9ZWxzZSBoLnB1c2godC5jcmVhdGVUZXh0Tm9kZShvKSk7Zm9yKHMmJmQucmVtb3ZlQ2hpbGQocyksc3Quc3VwcG9ydC5hcHBlbmRDaGVja2VkfHxzdC5ncmVwKGIoaCxcImlucHV0XCIpLHgpLGc9MDtvPWhbZysrXTspaWYoKCFyfHwtMT09PXN0LmluQXJyYXkobyxyKSkmJihpPXN0LmNvbnRhaW5zKG8ub3duZXJEb2N1bWVudCxvKSxzPWIoZC5hcHBlbmRDaGlsZChvKSxcInNjcmlwdFwiKSxpJiZtKHMpLG4pKWZvcihjPTA7bz1zW2MrK107KXRuLnRlc3Qoby50eXBlfHxcIlwiKSYmbi5wdXNoKG8pO3JldHVybiBzPW51bGwsZH0sY2xlYW5EYXRhOmZ1bmN0aW9uKGUsbil7Zm9yKHZhciByLGksbyxhLHM9MCx1PXN0LmV4cGFuZG8sbD1zdC5jYWNoZSxjPXN0LnN1cHBvcnQuZGVsZXRlRXhwYW5kbyxmPXN0LmV2ZW50LnNwZWNpYWw7bnVsbCE9KG89ZVtzXSk7cysrKWlmKChufHxzdC5hY2NlcHREYXRhKG8pKSYmKGk9b1t1XSxyPWkmJmxbaV0pKXtpZihyLmV2ZW50cylmb3IoYSBpbiByLmV2ZW50cylmW2FdP3N0LmV2ZW50LnJlbW92ZShvLGEpOnN0LnJlbW92ZUV2ZW50KG8sYSxyLmhhbmRsZSk7bFtpXSYmKGRlbGV0ZSBsW2ldLGM/ZGVsZXRlIG9bdV06by5yZW1vdmVBdHRyaWJ1dGUhPT10P28ucmVtb3ZlQXR0cmlidXRlKHUpOm9bdV09bnVsbCxLLnB1c2goaSkpfX19KTt2YXIgdW4sbG4sY24sZm49L2FscGhhXFwoW14pXSpcXCkvaSxwbj0vb3BhY2l0eVxccyo9XFxzKihbXildKikvLGRuPS9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLyxobj0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sZ249L15tYXJnaW4vLG1uPVJlZ0V4cChcIl4oXCIrdXQrXCIpKC4qKSRcIixcImlcIikseW49UmVnRXhwKFwiXihcIit1dCtcIikoPyFweClbYS16JV0rJFwiLFwiaVwiKSx2bj1SZWdFeHAoXCJeKFsrLV0pPShcIit1dCtcIilcIixcImlcIiksYm49e0JPRFk6XCJibG9ja1wifSx4bj17cG9zaXRpb246XCJhYnNvbHV0ZVwiLHZpc2liaWxpdHk6XCJoaWRkZW5cIixkaXNwbGF5OlwiYmxvY2tcIn0sVG49e2xldHRlclNwYWNpbmc6MCxmb250V2VpZ2h0OjQwMH0sd249W1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLE5uPVtcIldlYmtpdFwiLFwiT1wiLFwiTW96XCIsXCJtc1wiXTtzdC5mbi5leHRlbmQoe2NzczpmdW5jdGlvbihlLG4pe3JldHVybiBzdC5hY2Nlc3ModGhpcyxmdW5jdGlvbihlLG4scil7dmFyIGksbyxhPXt9LHM9MDtpZihzdC5pc0FycmF5KG4pKXtmb3IoaT1sbihlKSxvPW4ubGVuZ3RoO28+cztzKyspYVtuW3NdXT1zdC5jc3MoZSxuW3NdLCExLGkpO3JldHVybiBhfXJldHVybiByIT09dD9zdC5zdHlsZShlLG4scik6c3QuY3NzKGUsbil9LGUsbixhcmd1bWVudHMubGVuZ3RoPjEpfSxzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIE4odGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gTih0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGUpe3ZhciB0PVwiYm9vbGVhblwiPT10eXBlb2YgZTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7KHQ/ZTp3KHRoaXMpKT9zdCh0aGlzKS5zaG93KCk6c3QodGhpcykuaGlkZSgpfSl9fSksc3QuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIG49dW4oZSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PW4/XCIxXCI6bn19fX0sY3NzTnVtYmVyOntjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmb250V2VpZ2h0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6e1wiZmxvYXRcIjpzdC5zdXBwb3J0LmNzc0Zsb2F0P1wiY3NzRmxvYXRcIjpcInN0eWxlRmxvYXRcIn0sc3R5bGU6ZnVuY3Rpb24oZSxuLHIsaSl7aWYoZSYmMyE9PWUubm9kZVR5cGUmJjghPT1lLm5vZGVUeXBlJiZlLnN0eWxlKXt2YXIgbyxhLHMsdT1zdC5jYW1lbENhc2UobiksbD1lLnN0eWxlO2lmKG49c3QuY3NzUHJvcHNbdV18fChzdC5jc3NQcm9wc1t1XT1UKGwsdSkpLHM9c3QuY3NzSG9va3Nbbl18fHN0LmNzc0hvb2tzW3VdLHI9PT10KXJldHVybiBzJiZcImdldFwiaW4gcyYmKG89cy5nZXQoZSwhMSxpKSkhPT10P286bFtuXTtpZihhPXR5cGVvZiByLFwic3RyaW5nXCI9PT1hJiYobz12bi5leGVjKHIpKSYmKHI9KG9bMV0rMSkqb1syXStwYXJzZUZsb2F0KHN0LmNzcyhlLG4pKSxhPVwibnVtYmVyXCIpLCEobnVsbD09cnx8XCJudW1iZXJcIj09PWEmJmlzTmFOKHIpfHwoXCJudW1iZXJcIiE9PWF8fHN0LmNzc051bWJlclt1XXx8KHIrPVwicHhcIiksc3Quc3VwcG9ydC5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1yfHwwIT09bi5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGxbbl09XCJpbmhlcml0XCIpLHMmJlwic2V0XCJpbiBzJiYocj1zLnNldChlLHIsaSkpPT09dCkpKXRyeXtsW25dPXJ9Y2F0Y2goYyl7fX19LGNzczpmdW5jdGlvbihlLG4scixpKXt2YXIgbyxhLHMsdT1zdC5jYW1lbENhc2Uobik7cmV0dXJuIG49c3QuY3NzUHJvcHNbdV18fChzdC5jc3NQcm9wc1t1XT1UKGUuc3R5bGUsdSkpLHM9c3QuY3NzSG9va3Nbbl18fHN0LmNzc0hvb2tzW3VdLHMmJlwiZ2V0XCJpbiBzJiYobz1zLmdldChlLCEwLHIpKSxvPT09dCYmKG89dW4oZSxuLGkpKSxcIm5vcm1hbFwiPT09byYmbiBpbiBUbiYmKG89VG5bbl0pLHI/KGE9cGFyc2VGbG9hdChvKSxyPT09ITB8fHN0LmlzTnVtZXJpYyhhKT9hfHwwOm8pOm99LHN3YXA6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhPXt9O2ZvcihvIGluIHQpYVtvXT1lLnN0eWxlW29dLGUuc3R5bGVbb109dFtvXTtpPW4uYXBwbHkoZSxyfHxbXSk7Zm9yKG8gaW4gdCllLnN0eWxlW29dPWFbb107cmV0dXJuIGl9fSksZS5nZXRDb21wdXRlZFN0eWxlPyhsbj1mdW5jdGlvbih0KXtyZXR1cm4gZS5nZXRDb21wdXRlZFN0eWxlKHQsbnVsbCl9LHVuPWZ1bmN0aW9uKGUsbixyKXt2YXIgaSxvLGEscz1yfHxsbihlKSx1PXM/cy5nZXRQcm9wZXJ0eVZhbHVlKG4pfHxzW25dOnQsbD1lLnN0eWxlO3JldHVybiBzJiYoXCJcIiE9PXV8fHN0LmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKXx8KHU9c3Quc3R5bGUoZSxuKSkseW4udGVzdCh1KSYmZ24udGVzdChuKSYmKGk9bC53aWR0aCxvPWwubWluV2lkdGgsYT1sLm1heFdpZHRoLGwubWluV2lkdGg9bC5tYXhXaWR0aD1sLndpZHRoPXUsdT1zLndpZHRoLGwud2lkdGg9aSxsLm1pbldpZHRoPW8sbC5tYXhXaWR0aD1hKSksdX0pOlYuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSYmKGxuPWZ1bmN0aW9uKGUpe3JldHVybiBlLmN1cnJlbnRTdHlsZX0sdW49ZnVuY3Rpb24oZSxuLHIpe3ZhciBpLG8sYSxzPXJ8fGxuKGUpLHU9cz9zW25dOnQsbD1lLnN0eWxlO3JldHVybiBudWxsPT11JiZsJiZsW25dJiYodT1sW25dKSx5bi50ZXN0KHUpJiYhZG4udGVzdChuKSYmKGk9bC5sZWZ0LG89ZS5ydW50aW1lU3R5bGUsYT1vJiZvLmxlZnQsYSYmKG8ubGVmdD1lLmN1cnJlbnRTdHlsZS5sZWZ0KSxsLmxlZnQ9XCJmb250U2l6ZVwiPT09bj9cIjFlbVwiOnUsdT1sLnBpeGVsTGVmdCtcInB4XCIsbC5sZWZ0PWksYSYmKG8ubGVmdD1hKSksXCJcIj09PXU/XCJhdXRvXCI6dX0pLHN0LmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihlLG4pe3N0LmNzc0hvb2tzW25dPXtnZXQ6ZnVuY3Rpb24oZSxyLGkpe3JldHVybiByPzA9PT1lLm9mZnNldFdpZHRoJiZobi50ZXN0KHN0LmNzcyhlLFwiZGlzcGxheVwiKSk/c3Quc3dhcChlLHhuLGZ1bmN0aW9uKCl7cmV0dXJuIEUoZSxuLGkpfSk6RShlLG4saSk6dH0sc2V0OmZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1yJiZsbihlKTtyZXR1cm4gQyhlLHQscj9rKGUsbixyLHN0LnN1cHBvcnQuYm94U2l6aW5nJiZcImJvcmRlci1ib3hcIj09PXN0LmNzcyhlLFwiYm94U2l6aW5nXCIsITEsaSksaSk6MCl9fX0pLHN0LnN1cHBvcnQub3BhY2l0eXx8KHN0LmNzc0hvb2tzLm9wYWNpdHk9e2dldDpmdW5jdGlvbihlLHQpe3JldHVybiBwbi50ZXN0KCh0JiZlLmN1cnJlbnRTdHlsZT9lLmN1cnJlbnRTdHlsZS5maWx0ZXI6ZS5zdHlsZS5maWx0ZXIpfHxcIlwiKT8uMDEqcGFyc2VGbG9hdChSZWdFeHAuJDEpK1wiXCI6dD9cIjFcIjpcIlwifSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnN0eWxlLHI9ZS5jdXJyZW50U3R5bGUsaT1zdC5pc051bWVyaWModCk/XCJhbHBoYShvcGFjaXR5PVwiKzEwMCp0K1wiKVwiOlwiXCIsbz1yJiZyLmZpbHRlcnx8bi5maWx0ZXJ8fFwiXCI7bi56b29tPTEsKHQ+PTF8fFwiXCI9PT10KSYmXCJcIj09PXN0LnRyaW0oby5yZXBsYWNlKGZuLFwiXCIpKSYmbi5yZW1vdmVBdHRyaWJ1dGUmJihuLnJlbW92ZUF0dHJpYnV0ZShcImZpbHRlclwiKSxcIlwiPT09dHx8ciYmIXIuZmlsdGVyKXx8KG4uZmlsdGVyPWZuLnRlc3Qobyk/by5yZXBsYWNlKGZuLGkpOm8rXCIgXCIraSl9fSksc3QoZnVuY3Rpb24oKXtzdC5zdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHR8fChzdC5jc3NIb29rcy5tYXJnaW5SaWdodD17Z2V0OmZ1bmN0aW9uKGUsbil7cmV0dXJuIG4/c3Quc3dhcChlLHtkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9LHVuLFtlLFwibWFyZ2luUmlnaHRcIl0pOnR9fSksIXN0LnN1cHBvcnQucGl4ZWxQb3NpdGlvbiYmc3QuZm4ucG9zaXRpb24mJnN0LmVhY2goW1widG9wXCIsXCJsZWZ0XCJdLGZ1bmN0aW9uKGUsbil7c3QuY3NzSG9va3Nbbl09e2dldDpmdW5jdGlvbihlLHIpe3JldHVybiByPyhyPXVuKGUsbikseW4udGVzdChyKT9zdChlKS5wb3NpdGlvbigpW25dK1wicHhcIjpyKTp0fX19KX0pLHN0LmV4cHImJnN0LmV4cHIuZmlsdGVycyYmKHN0LmV4cHIuZmlsdGVycy5oaWRkZW49ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lLm9mZnNldFdpZHRoJiYwPT09ZS5vZmZzZXRIZWlnaHR8fCFzdC5zdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cyYmXCJub25lXCI9PT0oZS5zdHlsZSYmZS5zdHlsZS5kaXNwbGF5fHxzdC5jc3MoZSxcImRpc3BsYXlcIikpfSxzdC5leHByLmZpbHRlcnMudmlzaWJsZT1mdW5jdGlvbihlKXtyZXR1cm4hc3QuZXhwci5maWx0ZXJzLmhpZGRlbihlKX0pLHN0LmVhY2goe21hcmdpbjpcIlwiLHBhZGRpbmc6XCJcIixib3JkZXI6XCJXaWR0aFwifSxmdW5jdGlvbihlLHQpe3N0LmNzc0hvb2tzW2UrdF09e2V4cGFuZDpmdW5jdGlvbihuKXtmb3IodmFyIHI9MCxpPXt9LG89XCJzdHJpbmdcIj09dHlwZW9mIG4/bi5zcGxpdChcIiBcIik6W25dOzQ+cjtyKyspaVtlK3duW3JdK3RdPW9bcl18fG9bci0yXXx8b1swXTtyZXR1cm4gaX19LGduLnRlc3QoZSl8fChzdC5jc3NIb29rc1tlK3RdLnNldD1DKX0pO3ZhciBDbj0vJTIwL2csa249L1xcW1xcXSQvLEVuPS9cXHI/XFxuL2csU249L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0KSQvaSxBbj0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7c3QuZm4uZXh0ZW5kKHtzZXJpYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gc3QucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgZT1zdC5wcm9wKHRoaXMsXCJlbGVtZW50c1wiKTtyZXR1cm4gZT9zdC5tYWtlQXJyYXkoZSk6dGhpc30pLmZpbHRlcihmdW5jdGlvbigpe3ZhciBlPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lJiYhc3QodGhpcykuaXMoXCI6ZGlzYWJsZWRcIikmJkFuLnRlc3QodGhpcy5ub2RlTmFtZSkmJiFTbi50ZXN0KGUpJiYodGhpcy5jaGVja2VkfHwhWnQudGVzdChlKSl9KS5tYXAoZnVuY3Rpb24oZSx0KXt2YXIgbj1zdCh0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09bj9udWxsOnN0LmlzQXJyYXkobik/c3QubWFwKG4sZnVuY3Rpb24oZSl7cmV0dXJue25hbWU6dC5uYW1lLHZhbHVlOmUucmVwbGFjZShFbixcIlxcclxcblwiKX19KTp7bmFtZTp0Lm5hbWUsdmFsdWU6bi5yZXBsYWNlKEVuLFwiXFxyXFxuXCIpfX0pLmdldCgpfX0pLHN0LnBhcmFtPWZ1bmN0aW9uKGUsbil7dmFyIHIsaT1bXSxvPWZ1bmN0aW9uKGUsdCl7dD1zdC5pc0Z1bmN0aW9uKHQpP3QoKTpudWxsPT10P1wiXCI6dCxpW2kubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoZSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KHQpfTtpZihuPT09dCYmKG49c3QuYWpheFNldHRpbmdzJiZzdC5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWwpLHN0LmlzQXJyYXkoZSl8fGUuanF1ZXJ5JiYhc3QuaXNQbGFpbk9iamVjdChlKSlzdC5lYWNoKGUsZnVuY3Rpb24oKXtvKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKHIgaW4gZSlqKHIsZVtyXSxuLG8pO3JldHVybiBpLmpvaW4oXCImXCIpLnJlcGxhY2UoQ24sXCIrXCIpfTt2YXIgam4sRG4sTG49c3Qubm93KCksSG49L1xcPy8sTW49LyMuKiQvLHFuPS8oWz8mXSlfPVteJl0qLyxfbj0vXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKilcXHI/JC9nbSxGbj0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxPbj0vXig/OkdFVHxIRUFEKSQvLEJuPS9eXFwvXFwvLyxQbj0vXihbXFx3ListXSs6KSg/OlxcL1xcLyhbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxSbj1zdC5mbi5sb2FkLFduPXt9LCRuPXt9LEluPVwiKi9cIi5jb25jYXQoXCIqXCIpO3RyeXtEbj1ZLmhyZWZ9Y2F0Y2goem4pe0RuPVYuY3JlYXRlRWxlbWVudChcImFcIiksRG4uaHJlZj1cIlwiLERuPURuLmhyZWZ9am49UG4uZXhlYyhEbi50b0xvd2VyQ2FzZSgpKXx8W10sc3QuZm4ubG9hZD1mdW5jdGlvbihlLG4scil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUmJlJuKXJldHVybiBSbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGksbyxhLHM9dGhpcyx1PWUuaW5kZXhPZihcIiBcIik7cmV0dXJuIHU+PTAmJihpPWUuc2xpY2UodSxlLmxlbmd0aCksZT1lLnNsaWNlKDAsdSkpLHN0LmlzRnVuY3Rpb24obik/KHI9bixuPXQpOm4mJlwib2JqZWN0XCI9PXR5cGVvZiBuJiYobz1cIlBPU1RcIikscy5sZW5ndGg+MCYmc3QuYWpheCh7dXJsOmUsdHlwZTpvLGRhdGFUeXBlOlwiaHRtbFwiLGRhdGE6bn0pLmRvbmUoZnVuY3Rpb24oZSl7YT1hcmd1bWVudHMscy5odG1sKGk/c3QoXCI8ZGl2PlwiKS5hcHBlbmQoc3QucGFyc2VIVE1MKGUpKS5maW5kKGkpOmUpfSkuY29tcGxldGUociYmZnVuY3Rpb24oZSx0KXtzLmVhY2gocixhfHxbZS5yZXNwb25zZVRleHQsdCxlXSl9KSx0aGlzfSxzdC5lYWNoKFtcImFqYXhTdGFydFwiLFwiYWpheFN0b3BcIixcImFqYXhDb21wbGV0ZVwiLFwiYWpheEVycm9yXCIsXCJhamF4U3VjY2Vzc1wiLFwiYWpheFNlbmRcIl0sZnVuY3Rpb24oZSx0KXtzdC5mblt0XT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5vbih0LGUpfX0pLHN0LmVhY2goW1wiZ2V0XCIsXCJwb3N0XCJdLGZ1bmN0aW9uKGUsbil7c3Rbbl09ZnVuY3Rpb24oZSxyLGksbyl7cmV0dXJuIHN0LmlzRnVuY3Rpb24ocikmJihvPW98fGksaT1yLHI9dCksc3QuYWpheCh7dXJsOmUsdHlwZTpuLGRhdGFUeXBlOm8sZGF0YTpyLHN1Y2Nlc3M6aX0pfX0pLHN0LmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6RG4sdHlwZTpcIkdFVFwiLGlzTG9jYWw6Rm4udGVzdChqblsxXSksZ2xvYmFsOiEwLHByb2Nlc3NEYXRhOiEwLGFzeW5jOiEwLGNvbnRlbnRUeXBlOlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsYWNjZXB0czp7XCIqXCI6SW4sdGV4dDpcInRleHQvcGxhaW5cIixodG1sOlwidGV4dC9odG1sXCIseG1sOlwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLGpzb246XCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIn0sY29udGVudHM6e3htbDoveG1sLyxodG1sOi9odG1sLyxqc29uOi9qc29uL30scmVzcG9uc2VGaWVsZHM6e3htbDpcInJlc3BvbnNlWE1MXCIsdGV4dDpcInJlc3BvbnNlVGV4dFwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOmUuU3RyaW5nLFwidGV4dCBodG1sXCI6ITAsXCJ0ZXh0IGpzb25cIjpzdC5wYXJzZUpTT04sXCJ0ZXh0IHhtbFwiOnN0LnBhcnNlWE1MfSxmbGF0T3B0aW9uczp7dXJsOiEwLGNvbnRleHQ6ITB9fSxhamF4U2V0dXA6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD9IKEgoZSxzdC5hamF4U2V0dGluZ3MpLHQpOkgoc3QuYWpheFNldHRpbmdzLGUpfSxhamF4UHJlZmlsdGVyOkQoV24pLGFqYXhUcmFuc3BvcnQ6RCgkbiksYWpheDpmdW5jdGlvbihlLG4pe2Z1bmN0aW9uIHIoZSxuLHIscyl7dmFyIGwsZix2LGIsVCxOPW47MiE9PXgmJih4PTIsdSYmY2xlYXJUaW1lb3V0KHUpLGk9dCxhPXN8fFwiXCIsdy5yZWFkeVN0YXRlPWU+MD80OjAsciYmKGI9TShwLHcscikpLGU+PTIwMCYmMzAwPmV8fDMwND09PWU/KHAuaWZNb2RpZmllZCYmKFQ9dy5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIiksVCYmKHN0Lmxhc3RNb2RpZmllZFtvXT1UKSxUPXcuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpLFQmJihzdC5ldGFnW29dPVQpKSwzMDQ9PT1lPyhsPSEwLE49XCJub3Rtb2RpZmllZFwiKToobD1xKHAsYiksTj1sLnN0YXRlLGY9bC5kYXRhLHY9bC5lcnJvcixsPSF2KSk6KHY9TiwoZXx8IU4pJiYoTj1cImVycm9yXCIsMD5lJiYoZT0wKSkpLHcuc3RhdHVzPWUsdy5zdGF0dXNUZXh0PShufHxOKStcIlwiLGw/Zy5yZXNvbHZlV2l0aChkLFtmLE4sd10pOmcucmVqZWN0V2l0aChkLFt3LE4sdl0pLHcuc3RhdHVzQ29kZSh5KSx5PXQsYyYmaC50cmlnZ2VyKGw/XCJhamF4U3VjY2Vzc1wiOlwiYWpheEVycm9yXCIsW3cscCxsP2Y6dl0pLG0uZmlyZVdpdGgoZCxbdyxOXSksYyYmKGgudHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLFt3LHBdKSwtLXN0LmFjdGl2ZXx8c3QuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpKSl9XCJvYmplY3RcIj09dHlwZW9mIGUmJihuPWUsZT10KSxuPW58fHt9O3ZhciBpLG8sYSxzLHUsbCxjLGYscD1zdC5hamF4U2V0dXAoe30sbiksZD1wLmNvbnRleHR8fHAsaD1wLmNvbnRleHQmJihkLm5vZGVUeXBlfHxkLmpxdWVyeSk/c3QoZCk6c3QuZXZlbnQsZz1zdC5EZWZlcnJlZCgpLG09c3QuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikseT1wLnN0YXR1c0NvZGV8fHt9LHY9e30sYj17fSx4PTAsVD1cImNhbmNlbGVkXCIsdz17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKDI9PT14KXtpZighcylmb3Iocz17fTt0PV9uLmV4ZWMoYSk7KXNbdFsxXS50b0xvd2VyQ2FzZSgpXT10WzJdO3Q9c1tlLnRvTG93ZXJDYXNlKCldfXJldHVybiBudWxsPT10P251bGw6dH0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIDI9PT14P2E6bnVsbH0sc2V0UmVxdWVzdEhlYWRlcjpmdW5jdGlvbihlLHQpe3ZhciBuPWUudG9Mb3dlckNhc2UoKTtyZXR1cm4geHx8KGU9YltuXT1iW25dfHxlLHZbZV09dCksdGhpc30sb3ZlcnJpZGVNaW1lVHlwZTpmdW5jdGlvbihlKXtyZXR1cm4geHx8KHAubWltZVR5cGU9ZSksdGhpc30sc3RhdHVzQ29kZTpmdW5jdGlvbihlKXt2YXIgdDtpZihlKWlmKDI+eClmb3IodCBpbiBlKXlbdF09W3lbdF0sZVt0XV07ZWxzZSB3LmFsd2F5cyhlW3cuc3RhdHVzXSk7cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fFQ7cmV0dXJuIGkmJmkuYWJvcnQodCkscigwLHQpLHRoaXN9fTtpZihnLnByb21pc2UodykuY29tcGxldGU9bS5hZGQsdy5zdWNjZXNzPXcuZG9uZSx3LmVycm9yPXcuZmFpbCxwLnVybD0oKGV8fHAudXJsfHxEbikrXCJcIikucmVwbGFjZShNbixcIlwiKS5yZXBsYWNlKEJuLGpuWzFdK1wiLy9cIikscC50eXBlPW4ubWV0aG9kfHxuLnR5cGV8fHAubWV0aG9kfHxwLnR5cGUscC5kYXRhVHlwZXM9c3QudHJpbShwLmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChsdCl8fFtcIlwiXSxudWxsPT1wLmNyb3NzRG9tYWluJiYobD1Qbi5leGVjKHAudXJsLnRvTG93ZXJDYXNlKCkpLHAuY3Jvc3NEb21haW49ISghbHx8bFsxXT09PWpuWzFdJiZsWzJdPT09am5bMl0mJihsWzNdfHwoXCJodHRwOlwiPT09bFsxXT84MDo0NDMpKT09KGpuWzNdfHwoXCJodHRwOlwiPT09am5bMV0/ODA6NDQzKSkpKSxwLmRhdGEmJnAucHJvY2Vzc0RhdGEmJlwic3RyaW5nXCIhPXR5cGVvZiBwLmRhdGEmJihwLmRhdGE9c3QucGFyYW0ocC5kYXRhLHAudHJhZGl0aW9uYWwpKSxMKFduLHAsbix3KSwyPT09eClyZXR1cm4gdztjPXAuZ2xvYmFsLGMmJjA9PT1zdC5hY3RpdmUrKyYmc3QuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSxwLnR5cGU9cC50eXBlLnRvVXBwZXJDYXNlKCkscC5oYXNDb250ZW50PSFPbi50ZXN0KHAudHlwZSksbz1wLnVybCxwLmhhc0NvbnRlbnR8fChwLmRhdGEmJihvPXAudXJsKz0oSG4udGVzdChvKT9cIiZcIjpcIj9cIikrcC5kYXRhLGRlbGV0ZSBwLmRhdGEpLHAuY2FjaGU9PT0hMSYmKHAudXJsPXFuLnRlc3Qobyk/by5yZXBsYWNlKHFuLFwiJDFfPVwiK0xuKyspOm8rKEhuLnRlc3Qobyk/XCImXCI6XCI/XCIpK1wiXz1cIitMbisrKSkscC5pZk1vZGlmaWVkJiYoc3QubGFzdE1vZGlmaWVkW29dJiZ3LnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLHN0Lmxhc3RNb2RpZmllZFtvXSksc3QuZXRhZ1tvXSYmdy5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLHN0LmV0YWdbb10pKSwocC5kYXRhJiZwLmhhc0NvbnRlbnQmJnAuY29udGVudFR5cGUhPT0hMXx8bi5jb250ZW50VHlwZSkmJncuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLHAuY29udGVudFR5cGUpLHcuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLHAuZGF0YVR5cGVzWzBdJiZwLmFjY2VwdHNbcC5kYXRhVHlwZXNbMF1dP3AuYWNjZXB0c1twLmRhdGFUeXBlc1swXV0rKFwiKlwiIT09cC5kYXRhVHlwZXNbMF0/XCIsIFwiK0luK1wiOyBxPTAuMDFcIjpcIlwiKTpwLmFjY2VwdHNbXCIqXCJdKTtmb3IoZiBpbiBwLmhlYWRlcnMpdy5zZXRSZXF1ZXN0SGVhZGVyKGYscC5oZWFkZXJzW2ZdKTtpZihwLmJlZm9yZVNlbmQmJihwLmJlZm9yZVNlbmQuY2FsbChkLHcscCk9PT0hMXx8Mj09PXgpKXJldHVybiB3LmFib3J0KCk7VD1cImFib3J0XCI7Zm9yKGYgaW57c3VjY2VzczoxLGVycm9yOjEsY29tcGxldGU6MX0pd1tmXShwW2ZdKTtpZihpPUwoJG4scCxuLHcpKXt3LnJlYWR5U3RhdGU9MSxjJiZoLnRyaWdnZXIoXCJhamF4U2VuZFwiLFt3LHBdKSxwLmFzeW5jJiZwLnRpbWVvdXQ+MCYmKHU9c2V0VGltZW91dChmdW5jdGlvbigpe3cuYWJvcnQoXCJ0aW1lb3V0XCIpfSxwLnRpbWVvdXQpKTt0cnl7eD0xLGkuc2VuZCh2LHIpfWNhdGNoKE4pe2lmKCEoMj54KSl0aHJvdyBOO3IoLTEsTil9fWVsc2UgcigtMSxcIk5vIFRyYW5zcG9ydFwiKTtyZXR1cm4gd30sZ2V0U2NyaXB0OmZ1bmN0aW9uKGUsbil7cmV0dXJuIHN0LmdldChlLHQsbixcInNjcmlwdFwiKX0sZ2V0SlNPTjpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHN0LmdldChlLHQsbixcImpzb25cIil9fSksc3QuYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6XCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwifSxjb250ZW50czp7c2NyaXB0Oi8oPzpqYXZhfGVjbWEpc2NyaXB0L30sY29udmVydGVyczp7XCJ0ZXh0IHNjcmlwdFwiOmZ1bmN0aW9uKGUpe3JldHVybiBzdC5nbG9iYWxFdmFsKGUpLGV9fX0pLHN0LmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIixmdW5jdGlvbihlKXtlLmNhY2hlPT09dCYmKGUuY2FjaGU9ITEpLGUuY3Jvc3NEb21haW4mJihlLnR5cGU9XCJHRVRcIixlLmdsb2JhbD0hMSl9KSxzdC5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24oZSl7aWYoZS5jcm9zc0RvbWFpbil7dmFyIG4scj1WLmhlYWR8fHN0KFwiaGVhZFwiKVswXXx8Vi5kb2N1bWVudEVsZW1lbnQ7cmV0dXJue3NlbmQ6ZnVuY3Rpb24odCxpKXtuPVYuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxuLmFzeW5jPSEwLGUuc2NyaXB0Q2hhcnNldCYmKG4uY2hhcnNldD1lLnNjcmlwdENoYXJzZXQpLG4uc3JjPWUudXJsLG4ub25sb2FkPW4ub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKGUsdCl7KHR8fCFuLnJlYWR5U3RhdGV8fC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qobi5yZWFkeVN0YXRlKSkmJihuLm9ubG9hZD1uLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLG4ucGFyZW50Tm9kZSYmbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pLG49bnVsbCx0fHxpKDIwMCxcInN1Y2Nlc3NcIikpfSxyLmluc2VydEJlZm9yZShuLHIuZmlyc3RDaGlsZCl9LGFib3J0OmZ1bmN0aW9uKCl7biYmbi5vbmxvYWQodCwhMCl9fX19KTt2YXIgWG49W10sVW49Lyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztzdC5hamF4U2V0dXAoe2pzb25wOlwiY2FsbGJhY2tcIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGU9WG4ucG9wKCl8fHN0LmV4cGFuZG8rXCJfXCIrTG4rKztyZXR1cm4gdGhpc1tlXT0hMCxlfX0pLHN0LmFqYXhQcmVmaWx0ZXIoXCJqc29uIGpzb25wXCIsZnVuY3Rpb24obixyLGkpe3ZhciBvLGEscyx1PW4uanNvbnAhPT0hMSYmKFVuLnRlc3Qobi51cmwpP1widXJsXCI6XCJzdHJpbmdcIj09dHlwZW9mIG4uZGF0YSYmIShuLmNvbnRlbnRUeXBlfHxcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpJiZVbi50ZXN0KG4uZGF0YSkmJlwiZGF0YVwiKTtyZXR1cm4gdXx8XCJqc29ucFwiPT09bi5kYXRhVHlwZXNbMF0/KG89bi5qc29ucENhbGxiYWNrPXN0LmlzRnVuY3Rpb24obi5qc29ucENhbGxiYWNrKT9uLmpzb25wQ2FsbGJhY2soKTpuLmpzb25wQ2FsbGJhY2ssdT9uW3VdPW5bdV0ucmVwbGFjZShVbixcIiQxXCIrbyk6bi5qc29ucCE9PSExJiYobi51cmwrPShIbi50ZXN0KG4udXJsKT9cIiZcIjpcIj9cIikrbi5qc29ucCtcIj1cIitvKSxuLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXT1mdW5jdGlvbigpe3JldHVybiBzfHxzdC5lcnJvcihvK1wiIHdhcyBub3QgY2FsbGVkXCIpLHNbMF19LG4uZGF0YVR5cGVzWzBdPVwianNvblwiLGE9ZVtvXSxlW29dPWZ1bmN0aW9uKCl7cz1hcmd1bWVudHN9LGkuYWx3YXlzKGZ1bmN0aW9uKCl7ZVtvXT1hLG5bb10mJihuLmpzb25wQ2FsbGJhY2s9ci5qc29ucENhbGxiYWNrLFhuLnB1c2gobykpLHMmJnN0LmlzRnVuY3Rpb24oYSkmJmEoc1swXSkscz1hPXR9KSxcInNjcmlwdFwiKTp0fSk7dmFyIFZuLFluLEpuPTAsR249ZS5BY3RpdmVYT2JqZWN0JiZmdW5jdGlvbigpe3ZhciBlO2ZvcihlIGluIFZuKVZuW2VdKHQsITApfTtzdC5hamF4U2V0dGluZ3MueGhyPWUuQWN0aXZlWE9iamVjdD9mdW5jdGlvbigpe3JldHVybiF0aGlzLmlzTG9jYWwmJl8oKXx8RigpfTpfLFluPXN0LmFqYXhTZXR0aW5ncy54aHIoKSxzdC5zdXBwb3J0LmNvcnM9ISFZbiYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIFluLFluPXN0LnN1cHBvcnQuYWpheD0hIVluLFluJiZzdC5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKG4pe2lmKCFuLmNyb3NzRG9tYWlufHxzdC5zdXBwb3J0LmNvcnMpe3ZhciByO3JldHVybntzZW5kOmZ1bmN0aW9uKGksbyl7dmFyIGEscyx1PW4ueGhyKCk7aWYobi51c2VybmFtZT91Lm9wZW4obi50eXBlLG4udXJsLG4uYXN5bmMsbi51c2VybmFtZSxuLnBhc3N3b3JkKTp1Lm9wZW4obi50eXBlLG4udXJsLG4uYXN5bmMpLG4ueGhyRmllbGRzKWZvcihzIGluIG4ueGhyRmllbGRzKXVbc109bi54aHJGaWVsZHNbc107bi5taW1lVHlwZSYmdS5vdmVycmlkZU1pbWVUeXBlJiZ1Lm92ZXJyaWRlTWltZVR5cGUobi5taW1lVHlwZSksbi5jcm9zc0RvbWFpbnx8aVtcIlgtUmVxdWVzdGVkLVdpdGhcIl18fChpW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXT1cIlhNTEh0dHBSZXF1ZXN0XCIpO3RyeXtmb3IocyBpbiBpKXUuc2V0UmVxdWVzdEhlYWRlcihzLGlbc10pfWNhdGNoKGwpe311LnNlbmQobi5oYXNDb250ZW50JiZuLmRhdGF8fG51bGwpLHI9ZnVuY3Rpb24oZSxpKXt2YXIgcyxsLGMsZixwO3RyeXtpZihyJiYoaXx8ND09PXUucmVhZHlTdGF0ZSkpaWYocj10LGEmJih1Lm9ucmVhZHlzdGF0ZWNoYW5nZT1zdC5ub29wLEduJiZkZWxldGUgVm5bYV0pLGkpNCE9PXUucmVhZHlTdGF0ZSYmdS5hYm9ydCgpO2Vsc2V7Zj17fSxzPXUuc3RhdHVzLHA9dS5yZXNwb25zZVhNTCxjPXUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkscCYmcC5kb2N1bWVudEVsZW1lbnQmJihmLnhtbD1wKSxcInN0cmluZ1wiPT10eXBlb2YgdS5yZXNwb25zZVRleHQmJihmLnRleHQ9dS5yZXNwb25zZVRleHQpO3RyeXtsPXUuc3RhdHVzVGV4dH1jYXRjaChkKXtsPVwiXCJ9c3x8IW4uaXNMb2NhbHx8bi5jcm9zc0RvbWFpbj8xMjIzPT09cyYmKHM9MjA0KTpzPWYudGV4dD8yMDA6NDA0fX1jYXRjaChoKXtpfHxvKC0xLGgpfWYmJm8ocyxsLGYsYyl9LG4uYXN5bmM/ND09PXUucmVhZHlTdGF0ZT9zZXRUaW1lb3V0KHIpOihhPSsrSm4sR24mJihWbnx8KFZuPXt9LHN0KGUpLnVubG9hZChHbikpLFZuW2FdPXIpLHUub25yZWFkeXN0YXRlY2hhbmdlPXIpOnIoKX0sYWJvcnQ6ZnVuY3Rpb24oKXtyJiZyKHQsITApfX19fSk7dmFyIFFuLEtuLFpuPS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxlcj1SZWdFeHAoXCJeKD86KFsrLV0pPXwpKFwiK3V0K1wiKShbYS16JV0qKSRcIixcImlcIiksdHI9L3F1ZXVlSG9va3MkLyxucj1bV10scnI9e1wiKlwiOltmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT10aGlzLmNyZWF0ZVR3ZWVuKGUsdCksbz1lci5leGVjKHQpLGE9aS5jdXIoKSxzPSthfHwwLHU9MSxsPTIwO2lmKG8pe2lmKG49K29bMl0scj1vWzNdfHwoc3QuY3NzTnVtYmVyW2VdP1wiXCI6XCJweFwiKSxcInB4XCIhPT1yJiZzKXtzPXN0LmNzcyhpLmVsZW0sZSwhMCl8fG58fDE7ZG8gdT11fHxcIi41XCIscy89dSxzdC5zdHlsZShpLmVsZW0sZSxzK3IpO3doaWxlKHUhPT0odT1pLmN1cigpL2EpJiYxIT09dSYmLS1sKX1pLnVuaXQ9cixpLnN0YXJ0PXMsaS5lbmQ9b1sxXT9zKyhvWzFdKzEpKm46bn1yZXR1cm4gaX1dfTtzdC5BbmltYXRpb249c3QuZXh0ZW5kKFAse3R3ZWVuZXI6ZnVuY3Rpb24oZSx0KXtzdC5pc0Z1bmN0aW9uKGUpPyh0PWUsZT1bXCIqXCJdKTplPWUuc3BsaXQoXCIgXCIpO2Zvcih2YXIgbixyPTAsaT1lLmxlbmd0aDtpPnI7cisrKW49ZVtyXSxycltuXT1ycltuXXx8W10scnJbbl0udW5zaGlmdCh0KX0scHJlZmlsdGVyOmZ1bmN0aW9uKGUsdCl7dD9uci51bnNoaWZ0KGUpOm5yLnB1c2goZSl9fSksc3QuVHdlZW49JCwkLnByb3RvdHlwZT17Y29uc3RydWN0b3I6JCxpbml0OmZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt0aGlzLmVsZW09ZSx0aGlzLnByb3A9bix0aGlzLmVhc2luZz1pfHxcInN3aW5nXCIsdGhpcy5vcHRpb25zPXQsdGhpcy5zdGFydD10aGlzLm5vdz10aGlzLmN1cigpLHRoaXMuZW5kPXIsdGhpcy51bml0PW98fChzdC5jc3NOdW1iZXJbbl0/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT0kLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBlJiZlLmdldD9lLmdldCh0aGlzKTokLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyl9LHJ1bjpmdW5jdGlvbihlKXt2YXIgdCxuPSQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMucG9zPXQ9dGhpcy5vcHRpb25zLmR1cmF0aW9uP3N0LmVhc2luZ1t0aGlzLmVhc2luZ10oZSx0aGlzLm9wdGlvbnMuZHVyYXRpb24qZSwwLDEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKTplLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSp0K3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLG4mJm4uc2V0P24uc2V0KHRoaXMpOiQucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKSx0aGlzfX0sJC5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9JC5wcm90b3R5cGUsJC5wcm9wSG9va3M9e19kZWZhdWx0OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIG51bGw9PWUuZWxlbVtlLnByb3BdfHxlLmVsZW0uc3R5bGUmJm51bGwhPWUuZWxlbS5zdHlsZVtlLnByb3BdPyh0PXN0LmNzcyhlLmVsZW0sZS5wcm9wLFwiYXV0b1wiKSx0JiZcImF1dG9cIiE9PXQ/dDowKTplLmVsZW1bZS5wcm9wXX0sc2V0OmZ1bmN0aW9uKGUpe3N0LmZ4LnN0ZXBbZS5wcm9wXT9zdC5meC5zdGVwW2UucHJvcF0oZSk6ZS5lbGVtLnN0eWxlJiYobnVsbCE9ZS5lbGVtLnN0eWxlW3N0LmNzc1Byb3BzW2UucHJvcF1dfHxzdC5jc3NIb29rc1tlLnByb3BdKT9zdC5zdHlsZShlLmVsZW0sZS5wcm9wLGUubm93K2UudW5pdCk6ZS5lbGVtW2UucHJvcF09ZS5ub3d9fX0sJC5wcm9wSG9va3Muc2Nyb2xsVG9wPSQucHJvcEhvb2tzLnNjcm9sbExlZnQ9e3NldDpmdW5jdGlvbihlKXtlLmVsZW0ubm9kZVR5cGUmJmUuZWxlbS5wYXJlbnROb2RlJiYoZS5lbGVtW2UucHJvcF09ZS5ub3cpfX0sc3QuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oZSx0KXt2YXIgbj1zdC5mblt0XTtzdC5mblt0XT1mdW5jdGlvbihlLHIsaSl7cmV0dXJuIG51bGw9PWV8fFwiYm9vbGVhblwiPT10eXBlb2YgZT9uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTp0aGlzLmFuaW1hdGUoSSh0LCEwKSxlLHIsaSl9fSksc3QuZm4uZXh0ZW5kKHtmYWRlVG86ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHRoaXMuZmlsdGVyKHcpLmNzcyhcIm9wYWNpdHlcIiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTp0fSxlLG4scil9LGFuaW1hdGU6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9c3QuaXNFbXB0eU9iamVjdChlKSxvPXN0LnNwZWVkKHQsbixyKSxhPWZ1bmN0aW9uKCl7dmFyIHQ9UCh0aGlzLHN0LmV4dGVuZCh7fSxlKSxvKTthLmZpbmlzaD1mdW5jdGlvbigpe3Quc3RvcCghMCl9LChpfHxzdC5fZGF0YSh0aGlzLFwiZmluaXNoXCIpKSYmdC5zdG9wKCEwKX07cmV0dXJuIGEuZmluaXNoPWEsaXx8by5xdWV1ZT09PSExP3RoaXMuZWFjaChhKTp0aGlzLnF1ZXVlKG8ucXVldWUsYSl9LHN0b3A6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc3RvcDtkZWxldGUgZS5zdG9wLHQocil9O3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlJiYocj1uLG49ZSxlPXQpLG4mJmUhPT0hMSYmdGhpcy5xdWV1ZShlfHxcImZ4XCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PSEwLG49bnVsbCE9ZSYmZStcInF1ZXVlSG9va3NcIixvPXN0LnRpbWVycyxhPXN0Ll9kYXRhKHRoaXMpO2lmKG4pYVtuXSYmYVtuXS5zdG9wJiZpKGFbbl0pO2Vsc2UgZm9yKG4gaW4gYSlhW25dJiZhW25dLnN0b3AmJnRyLnRlc3QobikmJmkoYVtuXSk7Zm9yKG49by5sZW5ndGg7bi0tOylvW25dLmVsZW0hPT10aGlzfHxudWxsIT1lJiZvW25dLnF1ZXVlIT09ZXx8KG9bbl0uYW5pbS5zdG9wKHIpLHQ9ITEsby5zcGxpY2UobiwxKSk7KHR8fCFyKSYmc3QuZGVxdWV1ZSh0aGlzLGUpfSl9LGZpbmlzaDpmdW5jdGlvbihlKXtyZXR1cm4gZSE9PSExJiYoZT1lfHxcImZ4XCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0LG49c3QuX2RhdGEodGhpcykscj1uW2UrXCJxdWV1ZVwiXSxpPW5bZStcInF1ZXVlSG9va3NcIl0sbz1zdC50aW1lcnMsYT1yP3IubGVuZ3RoOjA7Zm9yKG4uZmluaXNoPSEwLHN0LnF1ZXVlKHRoaXMsZSxbXSksaSYmaS5jdXImJmkuY3VyLmZpbmlzaCYmaS5jdXIuZmluaXNoLmNhbGwodGhpcyksdD1vLmxlbmd0aDt0LS07KW9bdF0uZWxlbT09PXRoaXMmJm9bdF0ucXVldWU9PT1lJiYob1t0XS5hbmltLnN0b3AoITApLG8uc3BsaWNlKHQsMSkpO2Zvcih0PTA7YT50O3QrKylyW3RdJiZyW3RdLmZpbmlzaCYmclt0XS5maW5pc2guY2FsbCh0aGlzKTtkZWxldGUgbi5maW5pc2h9KX19KSxzdC5lYWNoKHtzbGlkZURvd246SShcInNob3dcIiksc2xpZGVVcDpJKFwiaGlkZVwiKSxzbGlkZVRvZ2dsZTpJKFwidG9nZ2xlXCIpLGZhZGVJbjp7b3BhY2l0eTpcInNob3dcIn0sZmFkZU91dDp7b3BhY2l0eTpcImhpZGVcIn0sZmFkZVRvZ2dsZTp7b3BhY2l0eTpcInRvZ2dsZVwifX0sZnVuY3Rpb24oZSx0KXtzdC5mbltlXT1mdW5jdGlvbihlLG4scil7cmV0dXJuIHRoaXMuYW5pbWF0ZSh0LGUsbixyKX19KSxzdC5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGU/c3QuZXh0ZW5kKHt9LGUpOntjb21wbGV0ZTpufHwhbiYmdHx8c3QuaXNGdW5jdGlvbihlKSYmZSxkdXJhdGlvbjplLGVhc2luZzpuJiZ0fHx0JiYhc3QuaXNGdW5jdGlvbih0KSYmdH07cmV0dXJuIHIuZHVyYXRpb249c3QuZngub2ZmPzA6XCJudW1iZXJcIj09dHlwZW9mIHIuZHVyYXRpb24/ci5kdXJhdGlvbjpyLmR1cmF0aW9uIGluIHN0LmZ4LnNwZWVkcz9zdC5meC5zcGVlZHNbci5kdXJhdGlvbl06c3QuZnguc3BlZWRzLl9kZWZhdWx0LChudWxsPT1yLnF1ZXVlfHxyLnF1ZXVlPT09ITApJiYoci5xdWV1ZT1cImZ4XCIpLHIub2xkPXIuY29tcGxldGUsci5jb21wbGV0ZT1mdW5jdGlvbigpe3N0LmlzRnVuY3Rpb24oci5vbGQpJiZyLm9sZC5jYWxsKHRoaXMpLHIucXVldWUmJnN0LmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0sc3QuZWFzaW5nPXtsaW5lYXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LHN3aW5nOmZ1bmN0aW9uKGUpe3JldHVybi41LU1hdGguY29zKGUqTWF0aC5QSSkvMn19LHN0LnRpbWVycz1bXSxzdC5meD0kLnByb3RvdHlwZS5pbml0LHN0LmZ4LnRpY2s9ZnVuY3Rpb24oKXt2YXIgZSxuPXN0LnRpbWVycyxyPTA7Zm9yKFFuPXN0Lm5vdygpO24ubGVuZ3RoPnI7cisrKWU9bltyXSxlKCl8fG5bcl0hPT1lfHxuLnNwbGljZShyLS0sMSk7bi5sZW5ndGh8fHN0LmZ4LnN0b3AoKSxRbj10fSxzdC5meC50aW1lcj1mdW5jdGlvbihlKXtlKCkmJnN0LnRpbWVycy5wdXNoKGUpJiZzdC5meC5zdGFydCgpfSxzdC5meC5pbnRlcnZhbD0xMyxzdC5meC5zdGFydD1mdW5jdGlvbigpe0tufHwoS249c2V0SW50ZXJ2YWwoc3QuZngudGljayxzdC5meC5pbnRlcnZhbCkpfSxzdC5meC5zdG9wPWZ1bmN0aW9uKCl7Y2xlYXJJbnRlcnZhbChLbiksS249bnVsbH0sc3QuZnguc3BlZWRzPXtzbG93OjYwMCxmYXN0OjIwMCxfZGVmYXVsdDo0MDB9LHN0LmZ4LnN0ZXA9e30sc3QuZXhwciYmc3QuZXhwci5maWx0ZXJzJiYoc3QuZXhwci5maWx0ZXJzLmFuaW1hdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBzdC5ncmVwKHN0LnRpbWVycyxmdW5jdGlvbih0KXtyZXR1cm4gZT09PXQuZWxlbX0pLmxlbmd0aH0pLHN0LmZuLm9mZnNldD1mdW5jdGlvbihlKXtpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiBlPT09dD90aGlzOnRoaXMuZWFjaChmdW5jdGlvbih0KXtzdC5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsZSx0KX0pO3ZhciBuLHIsaT17dG9wOjAsbGVmdDowfSxvPXRoaXNbMF0sYT1vJiZvLm93bmVyRG9jdW1lbnQ7aWYoYSlyZXR1cm4gbj1hLmRvY3VtZW50RWxlbWVudCxzdC5jb250YWlucyhuLG8pPyhvLmdldEJvdW5kaW5nQ2xpZW50UmVjdCE9PXQmJihpPW8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLHI9eihhKSx7dG9wOmkudG9wKyhyLnBhZ2VZT2Zmc2V0fHxuLnNjcm9sbFRvcCktKG4uY2xpZW50VG9wfHwwKSxsZWZ0OmkubGVmdCsoci5wYWdlWE9mZnNldHx8bi5zY3JvbGxMZWZ0KS0obi5jbGllbnRMZWZ0fHwwKX0pOml9LHN0Lm9mZnNldD17c2V0T2Zmc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1zdC5jc3MoZSxcInBvc2l0aW9uXCIpO1wic3RhdGljXCI9PT1yJiYoZS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpO3ZhciBpLG8sYT1zdChlKSxzPWEub2Zmc2V0KCksdT1zdC5jc3MoZSxcInRvcFwiKSxsPXN0LmNzcyhlLFwibGVmdFwiKSxjPShcImFic29sdXRlXCI9PT1yfHxcImZpeGVkXCI9PT1yKSYmc3QuaW5BcnJheShcImF1dG9cIixbdSxsXSk+LTEsZj17fSxwPXt9O2M/KHA9YS5wb3NpdGlvbigpLGk9cC50b3Asbz1wLmxlZnQpOihpPXBhcnNlRmxvYXQodSl8fDAsbz1wYXJzZUZsb2F0KGwpfHwwKSxzdC5pc0Z1bmN0aW9uKHQpJiYodD10LmNhbGwoZSxuLHMpKSxudWxsIT10LnRvcCYmKGYudG9wPXQudG9wLXMudG9wK2kpLG51bGwhPXQubGVmdCYmKGYubGVmdD10LmxlZnQtcy5sZWZ0K28pLFwidXNpbmdcImluIHQ/dC51c2luZy5jYWxsKGUsZik6YS5jc3MoZil9fSxzdC5mbi5leHRlbmQoe3Bvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGUsdCxuPXt0b3A6MCxsZWZ0OjB9LHI9dGhpc1swXTtyZXR1cm5cImZpeGVkXCI9PT1zdC5jc3MocixcInBvc2l0aW9uXCIpP3Q9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooZT10aGlzLm9mZnNldFBhcmVudCgpLHQ9dGhpcy5vZmZzZXQoKSxzdC5ub2RlTmFtZShlWzBdLFwiaHRtbFwiKXx8KG49ZS5vZmZzZXQoKSksbi50b3ArPXN0LmNzcyhlWzBdLFwiYm9yZGVyVG9wV2lkdGhcIiwhMCksbi5sZWZ0Kz1zdC5jc3MoZVswXSxcImJvcmRlckxlZnRXaWR0aFwiLCEwKSkse3RvcDp0LnRvcC1uLnRvcC1zdC5jc3MocixcIm1hcmdpblRvcFwiLCEwKSxsZWZ0OnQubGVmdC1uLmxlZnQtc3QuY3NzKHIsXCJtYXJnaW5MZWZ0XCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLm9mZnNldFBhcmVudHx8Vi5kb2N1bWVudEVsZW1lbnQ7ZSYmIXN0Lm5vZGVOYW1lKGUsXCJodG1sXCIpJiZcInN0YXRpY1wiPT09c3QuY3NzKGUsXCJwb3NpdGlvblwiKTspZT1lLm9mZnNldFBhcmVudDtyZXR1cm4gZXx8Vi5kb2N1bWVudEVsZW1lbnR9KX19KSxzdC5lYWNoKHtzY3JvbGxMZWZ0OlwicGFnZVhPZmZzZXRcIixzY3JvbGxUb3A6XCJwYWdlWU9mZnNldFwifSxmdW5jdGlvbihlLG4pe3ZhciByPS9ZLy50ZXN0KG4pO3N0LmZuW2VdPWZ1bmN0aW9uKGkpe3JldHVybiBzdC5hY2Nlc3ModGhpcyxmdW5jdGlvbihlLGksbyl7dmFyIGE9eihlKTtyZXR1cm4gbz09PXQ/YT9uIGluIGE/YVtuXTphLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtpXTplW2ldOihhP2Euc2Nyb2xsVG8ocj9zdChhKS5zY3JvbGxMZWZ0KCk6byxyP286c3QoYSkuc2Nyb2xsVG9wKCkpOmVbaV09byx0KX0sZSxpLGFyZ3VtZW50cy5sZW5ndGgsbnVsbCl9fSksc3QuZWFjaCh7SGVpZ2h0OlwiaGVpZ2h0XCIsV2lkdGg6XCJ3aWR0aFwifSxmdW5jdGlvbihlLG4pe3N0LmVhY2goe3BhZGRpbmc6XCJpbm5lclwiK2UsY29udGVudDpuLFwiXCI6XCJvdXRlclwiK2V9LGZ1bmN0aW9uKHIsaSl7c3QuZm5baV09ZnVuY3Rpb24oaSxvKXt2YXIgYT1hcmd1bWVudHMubGVuZ3RoJiYocnx8XCJib29sZWFuXCIhPXR5cGVvZiBpKSxzPXJ8fChpPT09ITB8fG89PT0hMD9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiBzdC5hY2Nlc3ModGhpcyxmdW5jdGlvbihuLHIsaSl7dmFyIG87cmV0dXJuIHN0LmlzV2luZG93KG4pP24uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W1wiY2xpZW50XCIrZV06OT09PW4ubm9kZVR5cGU/KG89bi5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgobi5ib2R5W1wic2Nyb2xsXCIrZV0sb1tcInNjcm9sbFwiK2VdLG4uYm9keVtcIm9mZnNldFwiK2VdLG9bXCJvZmZzZXRcIitlXSxvW1wiY2xpZW50XCIrZV0pKTppPT09dD9zdC5jc3MobixyLHMpOnN0LnN0eWxlKG4scixpLHMpfSxuLGE/aTp0LGEsbnVsbCl9fSl9KSxlLmpRdWVyeT1lLiQ9c3QsXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUuYW1kLmpRdWVyeSYmZGVmaW5lKFwianF1ZXJ5XCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gc3R9KX0pKHdpbmRvdyk7XG4vL0Agc291cmNlTWFwcGluZ1VSTD1qcXVlcnkubWluLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9zY3JpcHRzL2xpYnMvanF1ZXJ5Lm1pbi5qcyIsImltcG9ydCAnLi9qcXVlcnkubWluJztcbmltcG9ydCB7IGJnTXV0ZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvYmctbXVzaWMnO1xuLypcbiogICBTb3VuZENsb3VkIEN1c3RvbSBQbGF5ZXIgalF1ZXJ5IFBsdWdpblxuKiAgIEF1dGhvcjogTWF0YXMgUGV0cmlrYXMsIG1hdGFzQHNvdW5kY2xvdWQuY29tXG4qICAgQ29weXJpZ2h0IChjKSAyMDA5ICBTb3VuZENsb3VkIEx0ZC5cbiogICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4qICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbipcbiogICBVc2FnZTpcbiogICA8YSBocmVmPVwiaHR0cDovL3NvdW5kY2xvdWQuY29tL21hdGFzL2hvYm5vdHJvcGljXCIgY2xhc3M9XCJzYy1wbGF5ZXJcIj5NeSBuZXcgZHViIHRyYWNrPC9hPlxuKiAgIFRoZSBsaW5rIHdpbGwgYmUgYXV0b21hdGljYWxseSByZXBsYWNlZCBieSB0aGUgSFRNTCBiYXNlZCBwbGF5ZXJcbiovXG4oZnVuY3Rpb24oJCkge1xuICAvLyBDb252ZXJ0IG1pbGxpc2Vjb25kcyBpbnRvIEhvdXJzIChoKSwgTWludXRlcyAobSksIGFuZCBTZWNvbmRzIChzKVxuICB2YXIgdGltZWNvZGUgPSBmdW5jdGlvbihtcykge1xuICAgIHZhciBobXMgPSBmdW5jdGlvbihtcykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoOiBNYXRoLmZsb29yKG1zLyg2MCo2MCoxMDAwKSksXG4gICAgICAgICAgICBtOiBNYXRoLmZsb29yKChtcy82MDAwMCkgJSA2MCksXG4gICAgICAgICAgICBzOiBNYXRoLmZsb29yKChtcy8xMDAwKSAlIDYwKVxuICAgICAgICAgIH07XG4gICAgICAgIH0obXMpLFxuICAgICAgICB0YyA9IFtdOyAvLyBUaW1lY29kZSBhcnJheSB0byBiZSBqb2luZWQgd2l0aCAnLidcblxuICAgIGlmIChobXMuaCA+IDApIHtcbiAgICAgIHRjLnB1c2goaG1zLmgpO1xuICAgIH1cblxuICAgIHRjLnB1c2goKGhtcy5tIDwgMTAgJiYgaG1zLmggPiAwID8gXCIwXCIgKyBobXMubSA6IGhtcy5tKSk7XG4gICAgdGMucHVzaCgoaG1zLnMgPCAxMCAgPyBcIjBcIiArIGhtcy5zIDogaG1zLnMpKTtcblxuICAgIHJldHVybiB0Yy5qb2luKCcuJyk7XG4gIH07XG4gIC8vIHNodWZmbGUgdGhlIGFycmF5XG4gIHZhciBzaHVmZmxlID0gZnVuY3Rpb24oYXJyKSB7XG4gICAgYXJyLnNvcnQoZnVuY3Rpb24oKSB7IHJldHVybiAxIC0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMyk7IH0gKTtcbiAgICByZXR1cm4gYXJyO1xuICB9O1xuXG4gIHZhciBkZWJ1ZyA9IHRydWUsXG4gICAgICB1c2VTYW5kQm94ID0gZmFsc2UsXG4gICAgICAkZG9jID0gJChkb2N1bWVudCksXG4gICAgICBsb2cgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYoZGVidWcgJiYgd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nKXtcbiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmxvZy5hcHBseSh3aW5kb3cuY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBubyBjb25zb2xlIGF2YWlsYWJsZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZG9tYWluID0gdXNlU2FuZEJveCA/ICdzYW5kYm94LXNvdW5kY2xvdWQuY29tJyA6ICdzb3VuZGNsb3VkLmNvbScsXG4gICAgICBzZWN1cmVEb2N1bWVudCA9IChkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicpLFxuICAgICAgLy8gY29udmVydCBhIFNvdW5kQ2xvdWQgcmVzb3VyY2UgVVJMIHRvIGFuIEFQSSBVUkxcbiAgICAgIHNjQXBpVXJsID0gZnVuY3Rpb24odXJsLCBhcGlLZXkpIHtcbiAgICAgICAgdmFyIHJlc29sdmVyID0gKCBzZWN1cmVEb2N1bWVudCB8fCAoL15odHRwcy9pKS50ZXN0KHVybCkgPyAnaHR0cHMnIDogJ2h0dHAnKSArICc6Ly9hcGkuJyArIGRvbWFpbiArICcvcmVzb2x2ZT91cmw9JyxcbiAgICAgICAgICAgIHBhcmFtcyA9ICdmb3JtYXQ9anNvbiZjb25zdW1lcl9rZXk9JyArIGFwaUtleSArJyZjYWxsYmFjaz0/JztcblxuICAgICAgICAvLyBmb3JjZSB0aGUgc2VjdXJlIHVybCBpbiB0aGUgc2VjdXJlIGVudmlyb25tZW50XG4gICAgICAgIGlmKCBzZWN1cmVEb2N1bWVudCApIHtcbiAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXmh0dHA6LywgJ2h0dHBzOicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgaXQncyBhbHJlYWR5IGEgcmVzb2x2ZWQgYXBpIHVybFxuICAgICAgICBpZiAoICgvYXBpXFwuLykudGVzdCh1cmwpICkge1xuICAgICAgICAgIHJldHVybiB1cmwgKyAnPycgKyBwYXJhbXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVyICsgdXJsICsgJyYnICsgcGFyYW1zO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gIC8vIFRPRE8gRXhwb3NlIHRoZSBhdWRpbyBlbmdpbmUsIHNvIGl0IGNhbiBiZSB1bml0LXRlc3RlZFxuICB2YXIgYXVkaW9FbmdpbmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHRtbDVBdWRpb0F2YWlsYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBmYWxzZTtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgIHZhciBhID0gbmV3IEF1ZGlvKCk7XG4gICAgICAgICAgc3RhdGUgPSBhLmNhblBsYXlUeXBlICYmICgvbWF5YmV8cHJvYmFibHkvKS50ZXN0KGEuY2FuUGxheVR5cGUoJ2F1ZGlvL21wZWcnKSk7XG4gICAgICAgICAgLy8gdW5jb21tZW50IHRoZSBmb2xsb3dpbmcgbGluZSwgaWYgeW91IHdhbnQgdG8gZW5hYmxlIHRoZSBodG1sNSBhdWRpbyBvbmx5IG9uIG1vYmlsZSBkZXZpY2VzXG4gICAgICAgICAgLy8gc3RhdGUgPSBzdGF0ZSAmJiAoL2lQYWR8aXBob25lfG1vYmlsZXxwcmVcXC8vaSkudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgfWNhdGNoKGUpe1xuICAgICAgICAgIC8vIHRoZXJlJ3Mgbm8gYXVkaW8gc3VwcG9ydCBoZXJlIHNhZGx5XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSgpLFxuICAgIGNhbGxiYWNrcyA9IHtcbiAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAkZG9jLnRyaWdnZXIoJ3NjUGxheWVyOm9uQXVkaW9SZWFkeScpO1xuICAgICAgfSxcbiAgICAgIG9uUGxheTogZnVuY3Rpb24oKSB7XG4gICAgICAgICRkb2MudHJpZ2dlcignc2NQbGF5ZXI6b25NZWRpYVBsYXknKTtcbiAgICAgIH0sXG4gICAgICBvblBhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJGRvYy50cmlnZ2VyKCdzY1BsYXllcjpvbk1lZGlhUGF1c2UnKTtcbiAgICAgIH0sXG4gICAgICBvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICRkb2MudHJpZ2dlcignc2NQbGF5ZXI6b25NZWRpYUVuZCcpO1xuICAgICAgfSxcbiAgICAgIG9uQnVmZmVyOiBmdW5jdGlvbihwZXJjZW50KSB7XG4gICAgICAgICRkb2MudHJpZ2dlcih7dHlwZTogJ3NjUGxheWVyOm9uTWVkaWFCdWZmZXJpbmcnLCBwZXJjZW50OiBwZXJjZW50fSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBodG1sNURyaXZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBsYXllciA9IG5ldyBBdWRpbygpLFxuICAgICAgICAgIG9uVGltZVVwZGF0ZSA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIHZhciBvYmogPSBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgYnVmZmVyID0gKChvYmouYnVmZmVyZWQubGVuZ3RoICYmIG9iai5idWZmZXJlZC5lbmQoMCkpIC8gb2JqLmR1cmF0aW9uKSAqIDEwMDtcbiAgICAgICAgICAgIC8vIGlwYWQgaGFzIG5vIHByb2dyZXNzIGV2ZW50cyBpbXBsZW1lbnRlZCB5ZXRcbiAgICAgICAgICAgIGNhbGxiYWNrcy5vbkJ1ZmZlcihidWZmZXIpO1xuICAgICAgICAgICAgLy8gYW5vdW5jZSBpZiBpdCdzIGZpbmlzaGVkIGZvciB0aGUgY2xpZW50cyB3aXRob3V0ICdlbmRlZCcgZXZlbnRzIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICBpZiAob2JqLmN1cnJlbnRUaW1lID09PSBvYmouZHVyYXRpb24pIHsgY2FsbGJhY2tzLm9uRW5kKCk7IH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uUHJvZ3Jlc3MgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBidWZmZXIgPSAoKG9iai5idWZmZXJlZC5sZW5ndGggJiYgb2JqLmJ1ZmZlcmVkLmVuZCgwKSkgLyBvYmouZHVyYXRpb24pICogMTAwO1xuICAgICAgICAgICAgY2FsbGJhY2tzLm9uQnVmZmVyKGJ1ZmZlcik7XG4gICAgICAgICAgfTtcblxuICAgICAgJCgnPGRpdiBjbGFzcz1cInNjLXBsYXllci1lbmdpbmUtY29udGFpbmVyXCI+PC9kaXY+JykuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkuYXBwZW5kKHBsYXllcik7XG5cbiAgICAgIC8vIHByZXBhcmUgdGhlIGxpc3RlbmVyc1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBjYWxsYmFja3Mub25QbGF5LCBmYWxzZSk7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigncGF1c2UnLCBjYWxsYmFja3Mub25QYXVzZSwgZmFsc2UpO1xuICAgICAgLy8gaGFuZGxlZCBpbiB0aGUgb25UaW1lVXBkYXRlIGZvciBub3cgdW50aWxsIGFsbCB0aGUgYnJvd3NlcnMgc3VwcG9ydCAnZW5kZWQnIGV2ZW50XG4gICAgICAvLyBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBjYWxsYmFja3Mub25FbmQsIGZhbHNlKTtcbiAgICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgb25UaW1lVXBkYXRlLCBmYWxzZSk7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBvblByb2dyZXNzLCBmYWxzZSk7XG5cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9hZDogZnVuY3Rpb24odHJhY2ssIGFwaUtleSkge1xuICAgICAgICAgIHBsYXllci5wYXVzZSgpO1xuICAgICAgICAgIHBsYXllci5zcmMgPSB0cmFjay5zdHJlYW1fdXJsICsgKC9cXD8vLnRlc3QodHJhY2suc3RyZWFtX3VybCkgPyAnJicgOiAnPycpICsgJ2NvbnN1bWVyX2tleT0nICsgYXBpS2V5O1xuICAgICAgICAgIHBsYXllci5sb2FkKCk7XG4gICAgICAgICAgcGxheWVyLnBsYXkoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGxheTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcGxheWVyLnBsYXkoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHBsYXllci5wYXVzZSgpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbigpe1xuICAgICAgICAgIGlmIChwbGF5ZXIuY3VycmVudFRpbWUpIHtcbiAgICAgICAgICAgIHBsYXllci5jdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICBwbGF5ZXIucGF1c2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlZWs6IGZ1bmN0aW9uKHJlbGF0aXZlKXtcbiAgICAgICAgICBwbGF5ZXIuY3VycmVudFRpbWUgPSBwbGF5ZXIuZHVyYXRpb24gKiByZWxhdGl2ZTtcbiAgICAgICAgICBwbGF5ZXIucGxheSgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXREdXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHBsYXllci5kdXJhdGlvbiAqIDEwMDA7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gcGxheWVyLmN1cnJlbnRUaW1lICogMTAwMDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Vm9sdW1lOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICBwbGF5ZXIudm9sdW1lID0gdmFsIC8gMTAwO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgfTtcblxuXG5cbiAgICB2YXIgZmxhc2hEcml2ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbmdpbmVJZCA9ICdzY1BsYXllckVuZ2luZScsXG4gICAgICAgICAgcGxheWVyLFxuICAgICAgICAgIGZsYXNoSHRtbCA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgdmFyIHN3ZiA9IChzZWN1cmVEb2N1bWVudCA/ICdodHRwcycgOiAnaHR0cCcpICsgJzovL3BsYXllci4nICsgZG9tYWluICsnL3BsYXllci5zd2Y/dXJsPScgKyB1cmwgKycmYW1wO2VuYWJsZV9hcGk9dHJ1ZSZhbXA7cGxheWVyX3R5cGU9ZW5naW5lJmFtcDtvYmplY3RfaWQ9JyArIGVuZ2luZUlkO1xuICAgICAgICAgICAgaWYgKCQuYnJvd3Nlci5tc2llKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnPG9iamVjdCBoZWlnaHQ9XCIxMDAlXCIgd2lkdGg9XCIxMDAlXCIgaWQ9XCInICsgZW5naW5lSWQgKyAnXCIgY2xhc3NpZD1cImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMFwiIGRhdGE9XCInICsgc3dmICsgJ1wiPicrXG4gICAgICAgICAgICAgICAgJzxwYXJhbSBuYW1lPVwibW92aWVcIiB2YWx1ZT1cIicgKyBzd2YgKyAnXCIgLz4nK1xuICAgICAgICAgICAgICAgICc8cGFyYW0gbmFtZT1cImFsbG93c2NyaXB0YWNjZXNzXCIgdmFsdWU9XCJhbHdheXNcIiAvPicrXG4gICAgICAgICAgICAgICAgJzwvb2JqZWN0Pic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gJzxvYmplY3QgaGVpZ2h0PVwiMTAwJVwiIHdpZHRoPVwiMTAwJVwiIGlkPVwiJyArIGVuZ2luZUlkICsgJ1wiPicrXG4gICAgICAgICAgICAgICAgJzxlbWJlZCBhbGxvd3NjcmlwdGFjY2Vzcz1cImFsd2F5c1wiIGhlaWdodD1cIjEwMCVcIiB3aWR0aD1cIjEwMCVcIiBzcmM9XCInICsgc3dmICsgJ1wiIHR5cGU9XCJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFwiIG5hbWU9XCInICsgZW5naW5lSWQgKyAnXCIgLz4nK1xuICAgICAgICAgICAgICAgICc8L29iamVjdD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cblxuICAgICAgLy8gbGlzdGVuIHRvIGF1ZGlvIGVuZ2luZSBldmVudHNcbiAgICAgIC8vIHdoZW4gdGhlIGxvYWRlZCB0cmFjayBpcyByZWFkeSB0byBwbGF5XG4gICAgICBzb3VuZGNsb3VkLmFkZEV2ZW50TGlzdGVuZXIoJ29uUGxheWVyUmVhZHknLCBmdW5jdGlvbihmbGFzaElkLCBkYXRhKSB7XG4gICAgICAgIHBsYXllciA9IHNvdW5kY2xvdWQuZ2V0UGxheWVyKGVuZ2luZUlkKTtcbiAgICAgICAgY2FsbGJhY2tzLm9uUmVhZHkoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyB3aGVuIHRoZSBsb2FkZWQgdHJhY2sgZmluaXNoZWQgcGxheWluZ1xuICAgICAgc291bmRjbG91ZC5hZGRFdmVudExpc3RlbmVyKCdvbk1lZGlhRW5kJywgY2FsbGJhY2tzLm9uRW5kKTtcblxuICAgICAgLy8gd2hlbiB0aGUgbG9hZGVkIHRyYWNrIGlzIHN0aWxsIGJ1ZmZlcmluZ1xuICAgICAgc291bmRjbG91ZC5hZGRFdmVudExpc3RlbmVyKCdvbk1lZGlhQnVmZmVyaW5nJywgZnVuY3Rpb24oZmxhc2hJZCwgZGF0YSkge1xuICAgICAgICBjYWxsYmFja3Mub25CdWZmZXIoZGF0YS5wZXJjZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyB3aGVuIHRoZSBsb2FkZWQgdHJhY2sgc3RhcnRlZCB0byBwbGF5XG4gICAgICBzb3VuZGNsb3VkLmFkZEV2ZW50TGlzdGVuZXIoJ29uTWVkaWFQbGF5JywgY2FsbGJhY2tzLm9uUGxheSk7XG5cbiAgICAgIC8vIHdoZW4gdGhlIGxvYWRlZCB0cmFjayBpcyB3YXMgcGF1c2VkXG4gICAgICBzb3VuZGNsb3VkLmFkZEV2ZW50TGlzdGVuZXIoJ29uTWVkaWFQYXVzZScsIGNhbGxiYWNrcy5vblBhdXNlKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9hZDogZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgICB2YXIgdXJsID0gdHJhY2sudXJpO1xuICAgICAgICAgIGlmKHBsYXllcil7XG4gICAgICAgICAgICBwbGF5ZXIuYXBpX2xvYWQodXJsKTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5lciBmb3IgdGhlIGZsYXNoIGVuZ2luZSAoSUUgbmVlZHMgdGhpcyB0byBvcGVyYXRlIHByb3Blcmx5KVxuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNjLXBsYXllci1lbmdpbmUtY29udGFpbmVyXCI+PC9kaXY+JykuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkuaHRtbChmbGFzaEh0bWwodXJsKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBwbGF5ZXIgJiYgcGxheWVyLmFwaV9wbGF5KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHBhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBwbGF5ZXIgJiYgcGxheWVyLmFwaV9wYXVzZSgpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbigpe1xuICAgICAgICAgIHBsYXllciAmJiBwbGF5ZXIuYXBpX3N0b3AoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VlazogZnVuY3Rpb24ocmVsYXRpdmUpe1xuICAgICAgICAgIHBsYXllciAmJiBwbGF5ZXIuYXBpX3NlZWtUbygocGxheWVyLmFwaV9nZXRUcmFja0R1cmF0aW9uKCkgKiByZWxhdGl2ZSkpO1xuICAgICAgICB9LFxuICAgICAgICBnZXREdXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHBsYXllciAmJiBwbGF5ZXIuYXBpX2dldFRyYWNrRHVyYXRpb24gJiYgcGxheWVyLmFwaV9nZXRUcmFja0R1cmF0aW9uKCkgKiAxMDAwO1xuICAgICAgICB9LFxuICAgICAgICBnZXRQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHBsYXllciAmJiBwbGF5ZXIuYXBpX2dldFRyYWNrUG9zaXRpb24gJiYgcGxheWVyLmFwaV9nZXRUcmFja1Bvc2l0aW9uKCkgKiAxMDAwO1xuICAgICAgICB9LFxuICAgICAgICBzZXRWb2x1bWU6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIGlmKHBsYXllciAmJiBwbGF5ZXIuYXBpX3NldFZvbHVtZSl7XG4gICAgICAgICAgICBwbGF5ZXIuYXBpX3NldFZvbHVtZSh2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gaHRtbDVBdWRpb0F2YWlsYWJsZT8gaHRtbDVEcml2ZXIoKSA6IGZsYXNoRHJpdmVyKCk7XG5cbiAgfSgpO1xuXG5cblxuICB2YXIgYXBpS2V5LFxuICAgICAgZGlkQXV0b1BsYXkgPSBmYWxzZSxcbiAgICAgIHBsYXllcnMgPSBbXSxcbiAgICAgIHVwZGF0ZXMgPSB7fSxcbiAgICAgIGN1cnJlbnRVcmwsXG4gICAgICBsb2FkVHJhY2tzRGF0YSA9IGZ1bmN0aW9uKCRwbGF5ZXIsIGxpbmtzLCBrZXkpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgIHBsYXllck9iaiA9IHtub2RlOiAkcGxheWVyLCB0cmFja3M6IFtdfSxcbiAgICAgICAgICAgIGxvYWRVcmwgPSBmdW5jdGlvbihsaW5rKSB7XG4gICAgICAgICAgICAgIHZhciBhcGlVcmwgPSBzY0FwaVVybChsaW5rLnVybCwgYXBpS2V5KTtcbiAgICAgICAgICAgICAgJC5nZXRKU09OKGFwaVVybCwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIGxvZygnZGF0YSBsb2FkZWQnLCBsaW5rLnVybCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICBpZihkYXRhLnRyYWNrcyl7XG4gICAgICAgICAgICAgICAgICAvLyBsb2coJ2RhdGEudHJhY2tzJywgZGF0YS50cmFja3MpO1xuICAgICAgICAgICAgICAgICAgcGxheWVyT2JqLnRyYWNrcyA9IHBsYXllck9iai50cmFja3MuY29uY2F0KGRhdGEudHJhY2tzKTtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihkYXRhLmR1cmF0aW9uKXtcbiAgICAgICAgICAgICAgICAgIC8vIGEgc2VjcmV0IGxpbmsgZml4LCB0aWxsIHRoZSBTQyBBUEkgcmV0dXJucyBwZXJtYWxpbmsgd2l0aCBzZWNyZXQgb24gc2VjcmV0IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICBkYXRhLnBlcm1hbGlua191cmwgPSBsaW5rLnVybDtcbiAgICAgICAgICAgICAgICAgIC8vIGlmIHRyYWNrLCBhZGQgdG8gcGxheWVyXG4gICAgICAgICAgICAgICAgICBwbGF5ZXJPYmoudHJhY2tzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoZGF0YS5jcmVhdG9yKXtcbiAgICAgICAgICAgICAgICAgIC8vIGl0J3MgYSBncm91cCFcbiAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2goe3VybDpkYXRhLnVyaSArICcvdHJhY2tzJ30pO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmKGRhdGEudXNlcm5hbWUpe1xuICAgICAgICAgICAgICAgICAgLy8gaWYgdXNlciwgZ2V0IGhpcyB0cmFja3Mgb3IgZmF2b3JpdGVzXG4gICAgICAgICAgICAgICAgICBpZigvZmF2b3JpdGVzLy50ZXN0KGxpbmsudXJsKSl7XG4gICAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2goe3VybDpkYXRhLnVyaSArICcvZmF2b3JpdGVzJ30pO1xuICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2goe3VybDpkYXRhLnVyaSArICcvdHJhY2tzJ30pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKCQuaXNBcnJheShkYXRhKSl7XG4gICAgICAgICAgICAgICAgICBwbGF5ZXJPYmoudHJhY2tzID0gcGxheWVyT2JqLnRyYWNrcy5jb25jYXQoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGxpbmtzW2luZGV4XSl7XG4gICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBhcmUgbW9yZSB0cmFjayB0byBsb2FkLCBnZXQgdGhlbSBmcm9tIHRoZSBhcGlcbiAgICAgICAgICAgICAgICAgIGxvYWRVcmwobGlua3NbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgIC8vIGlmIGxvYWRpbmcgZmluaXNoZXMsIGFub3VuY2UgaXQgdG8gdGhlIEdVSVxuICAgICAgICAgICAgICAgICAgcGxheWVyT2JqLm5vZGUudHJpZ2dlcih7dHlwZTonb25UcmFja0RhdGFMb2FkZWQnLCBwbGF5ZXJPYmo6IHBsYXllck9iaiwgdXJsOiBhcGlVcmx9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIH07XG4gICAgICAgIC8vIHVwZGF0ZSBjdXJyZW50IEFQSSBrZXlcbiAgICAgICAgYXBpS2V5ID0ga2V5O1xuICAgICAgICAvLyB1cGRhdGUgdGhlIHBsYXllcnMgcXVldWVcbiAgICAgICAgcGxheWVycy5wdXNoKHBsYXllck9iaik7XG4gICAgICAgIC8vIGxvYWQgZmlyc3QgdHJhY2tzXG4gICAgICAgIGxvYWRVcmwobGlua3NbaW5kZXhdKTtcbiAgICAgIH0sXG4gICAgICBhcnR3b3JrSW1hZ2UgPSBmdW5jdGlvbih0cmFjaywgdXNlUGxhY2Vob2xkZXIpIHtcbiAgICAgICAgaWYodXNlUGxhY2Vob2xkZXIpe1xuICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cInNjLWxvYWRpbmctYXJ0d29ya1wiPkxvYWRpbmcgQXJ0d29yazwvZGl2Pic7XG4gICAgICAgIH1lbHNlIGlmICh0cmFjay5hcnR3b3JrX3VybCkge1xuICAgICAgICAgIHJldHVybiAnPGltZyBzcmM9XCInICsgdHJhY2suYXJ0d29ya191cmwucmVwbGFjZSgnLWxhcmdlJywgJy10MzAweDMwMCcpICsgJ1wiLz4nO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJzYy1uby1hcnR3b3JrXCI+Tm8gQXJ0d29yazwvZGl2Pic7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1cGRhdGVUcmFja0luZm8gPSBmdW5jdGlvbigkcGxheWVyLCB0cmFjaykge1xuICAgICAgICAvLyB1cGRhdGUgdGhlIGN1cnJlbnQgdHJhY2sgaW5mbyBpbiB0aGUgcGxheWVyXG4gICAgICAgIC8vIGxvZygndXBkYXRlVHJhY2tJbmZvJywgdHJhY2spO1xuICAgICAgICAkKCcuc2MtaW5mbycsICRwbGF5ZXIpLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAkKCdoMycsIHRoaXMpLmh0bWwoJzxhIGhyZWY9XCInICsgdHJhY2sucGVybWFsaW5rX3VybCArJ1wiPicgKyB0cmFjay50aXRsZSArICc8L2E+Jyk7XG4gICAgICAgICAgJCgnaDQnLCB0aGlzKS5odG1sKCdieSA8YSBocmVmPVwiJyArIHRyYWNrLnVzZXIucGVybWFsaW5rX3VybCArJ1wiPicgKyB0cmFjay51c2VyLnVzZXJuYW1lICsgJzwvYT4nKTtcbiAgICAgICAgICAkKCdwJywgdGhpcykuaHRtbCh0cmFjay5kZXNjcmlwdGlvbiB8fCAnbm8gRGVzY3JpcHRpb24nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgYXJ0d29ya1xuICAgICAgICAkKCcuc2MtYXJ0d29yay1saXN0IGxpJywgJHBsYXllcikuZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgIHZhciAkaXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgIGl0ZW1UcmFjayA9ICRpdGVtLmRhdGEoJ3NjLXRyYWNrJyk7XG5cbiAgICAgICAgICBpZiAoaXRlbVRyYWNrID09PSB0cmFjaykge1xuICAgICAgICAgICAgLy8gc2hvdyB0cmFjayBhcnR3b3JrXG4gICAgICAgICAgICAkaXRlbVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgICAgIC5maW5kKCcuc2MtbG9hZGluZy1hcnR3b3JrJylcbiAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGltYWdlIGlzbid0IGxvYWRlZCB5ZXQsIGRvIGl0IG5vd1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnc2MtbG9hZGluZy1hcnR3b3JrJykuaHRtbChhcnR3b3JrSW1hZ2UodHJhY2ssIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAvLyByZXNldCBvdGhlciBhcnR3b3Jrc1xuICAgICAgICAgICAgJGl0ZW0ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgdHJhY2sgZHVyYXRpb24gaW4gdGhlIHByb2dyZXNzIGJhclxuICAgICAgICAkKCcuc2MtZHVyYXRpb24nLCAkcGxheWVyKS5odG1sKHRpbWVjb2RlKHRyYWNrLmR1cmF0aW9uKSk7XG4gICAgICAgIC8vIHB1dCB0aGUgd2F2ZWZvcm0gaW50byB0aGUgcHJvZ3Jlc3MgYmFyXG4gICAgICAgICQoJy5zYy13YXZlZm9ybS1jb250YWluZXInLCAkcGxheWVyKS5odG1sKCc8aW1nIHNyYz1cIicgKyB0cmFjay53YXZlZm9ybV91cmwgKydcIiAvPicpO1xuXG4gICAgICAgICRwbGF5ZXIudHJpZ2dlcignb25QbGF5ZXJUcmFja1N3aXRjaC5zY1BsYXllcicsIFt0cmFja10pO1xuICAgICAgfSxcbiAgICAgIHBsYXkgPSBmdW5jdGlvbih0cmFjaykge1xuICAgICAgICB2YXIgdXJsID0gdHJhY2sucGVybWFsaW5rX3VybDtcbiAgICAgICAgaWYoY3VycmVudFVybCA9PT0gdXJsKXtcbiAgICAgICAgICAvLyBsb2coJ3dpbGwgcGxheScpO1xuICAgICAgICAgIGF1ZGlvRW5naW5lLnBsYXkoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgY3VycmVudFVybCA9IHVybDtcbiAgICAgICAgICAvLyBsb2coJ3dpbGwgbG9hZCcsIHVybCk7XG4gICAgICAgICAgYXVkaW9FbmdpbmUubG9hZCh0cmFjaywgYXBpS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldFBsYXllckRhdGEgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBwbGF5ZXJzWyQobm9kZSkuZGF0YSgnc2MtcGxheWVyJykuaWRdO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZVBsYXlTdGF0dXMgPSBmdW5jdGlvbihwbGF5ZXIsIHN0YXR1cykge1xuICAgICAgICBpZihzdGF0dXMpe1xuICAgICAgICAgIC8vIHJlc2V0IGFsbCBvdGhlciBwbGF5ZXJzIHBsYXlpbmcgc3RhdHVzXG4gICAgICAgICAgJCgnZGl2LnNjLXBsYXllci5wbGF5aW5nJykucmVtb3ZlQ2xhc3MoJ3BsYXlpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICAkKHBsYXllcilcbiAgICAgICAgICAudG9nZ2xlQ2xhc3MoJ3BsYXlpbmcnLCBzdGF0dXMpXG4gICAgICAgICAgLnRyaWdnZXIoKHN0YXR1cyA/ICdvblBsYXllclBsYXknIDogJ29uUGxheWVyUGF1c2UnKSk7XG4gICAgICB9LFxuICAgICAgb25QbGF5ID0gZnVuY3Rpb24ocGxheWVyLCBpZCkge1xuICAgICAgICB2YXIgdHJhY2sgPSBnZXRQbGF5ZXJEYXRhKHBsYXllcikudHJhY2tzW2lkIHx8IDBdO1xuICAgICAgICB1cGRhdGVUcmFja0luZm8ocGxheWVyLCB0cmFjayk7XG4gICAgICAgIC8vIGNhY2hlIHRoZSByZWZlcmVuY2VzIHRvIG1vc3QgdXBkYXRlZCBET00gbm9kZXMgaW4gdGhlIHByb2dyZXNzIGJhclxuICAgICAgICB1cGRhdGVzID0ge1xuICAgICAgICAgICRidWZmZXI6ICQoJy5zYy1idWZmZXInLCBwbGF5ZXIpLFxuICAgICAgICAgICRwbGF5ZWQ6ICQoJy5zYy1wbGF5ZWQnLCBwbGF5ZXIpLFxuICAgICAgICAgIHBvc2l0aW9uOiAgJCgnLnNjLXBvc2l0aW9uJywgcGxheWVyKVswXVxuICAgICAgICB9O1xuICAgICAgICB1cGRhdGVQbGF5U3RhdHVzKHBsYXllciwgdHJ1ZSk7XG4gICAgICAgIHBsYXkodHJhY2spO1xuICAgICAgfSxcbiAgICAgIG9uUGF1c2UgPSBmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgdXBkYXRlUGxheVN0YXR1cyhwbGF5ZXIsIGZhbHNlKTtcbiAgICAgICAgYXVkaW9FbmdpbmUucGF1c2UoKTtcbiAgICAgIH0sXG4gICAgICBvbkZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJHBsYXllciA9IHVwZGF0ZXMuJHBsYXllZC5jbG9zZXN0KCcuc2MtcGxheWVyJyksXG4gICAgICAgICAgICAkbmV4dEl0ZW07XG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgc2NydWJiZXIgd2lkdGhcbiAgICAgICAgdXBkYXRlcy4kcGxheWVkLmNzcygnd2lkdGgnLCAnMCUnKTtcbiAgICAgICAgLy8gc2hvdyB0aGUgcG9zaXRpb24gaW4gdGhlIHRyYWNrIHBvc2l0aW9uIGNvdW50ZXJcbiAgICAgICAgdXBkYXRlcy5wb3NpdGlvbi5pbm5lckhUTUwgPSB0aW1lY29kZSgwKTtcbiAgICAgICAgLy8gcmVzZXQgdGhlIHBsYXllciBzdGF0ZVxuICAgICAgICB1cGRhdGVQbGF5U3RhdHVzKCRwbGF5ZXIsIGZhbHNlKTtcbiAgICAgICAgLy8gc3RvcCB0aGUgYXVkaW9cbiAgICAgICAgYXVkaW9FbmdpbmUuc3RvcCgpO1xuICAgICAgICAkcGxheWVyLnRyaWdnZXIoJ29uUGxheWVyVHJhY2tGaW5pc2gnKTtcbiAgICAgIH0sXG4gICAgICBvblNlZWsgPSBmdW5jdGlvbihwbGF5ZXIsIHJlbGF0aXZlKSB7XG4gICAgICAgIGF1ZGlvRW5naW5lLnNlZWsocmVsYXRpdmUpO1xuICAgICAgICAkKHBsYXllcikudHJpZ2dlcignb25QbGF5ZXJTZWVrJyk7XG4gICAgICAgIHVwZGF0ZVBsYXlTdGF0dXMocGxheWVyLCB0cnVlKTtcbiAgICAgIH0sXG4gICAgICBvblNraXAgPSBmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgdmFyICRwbGF5ZXIgPSAkKHBsYXllcik7XG4gICAgICAgIC8vIGNvbnRpbnVlIHBsYXlpbmcgdGhyb3VnaCBhbGwgcGxheWVyc1xuICAgICAgICBsb2coJ3RyYWNrIGZpbmlzaGVkIGdldCB0aGUgbmV4dCBvbmUnKTtcbiAgICAgICAgJG5leHRJdGVtID0gJCgnLnNjLXRyYWNrc2xpc3QgbGkuYWN0aXZlJywgJHBsYXllcikubmV4dCgnbGknKTtcbiAgICAgICAgLy8gdHJ5IHRvIGZpbmQgdGhlIG5leHQgdHJhY2sgaW4gb3RoZXIgcGxheWVyXG4gICAgICAgIGlmKCEkbmV4dEl0ZW0ubGVuZ3RoKXtcbiAgICAgICAgICAkbmV4dEl0ZW0gPSAkcGxheWVyLm5leHRBbGwoJ2Rpdi5zYy1wbGF5ZXI6Zmlyc3QnKS5maW5kKCcuc2MtdHJhY2tzbGlzdCBsaS5hY3RpdmUnKTtcbiAgICAgICAgfVxuICAgICAgICAkbmV4dEl0ZW0uY2xpY2soKTtcbiAgICAgIH0sXG4gICAgICBzb3VuZFZvbHVtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdm9sID0gODAsXG4gICAgICAgICAgICBjb29rcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpLFxuICAgICAgICAgICAgdm9sUnggPSBuZXcgUmVnRXhwKCdzY1BsYXllcl92b2x1bWU9KFxcXFxkKyknKTtcbiAgICAgICAgZm9yKHZhciBpIGluIGNvb2tzKXtcbiAgICAgICAgICBpZih2b2xSeC50ZXN0KGNvb2tzW2ldKSl7XG4gICAgICAgICAgICB2b2wgPSBwYXJzZUludChjb29rc1tpXS5tYXRjaCh2b2xSeClbMV0sIDEwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdm9sO1xuICAgICAgfSgpLFxuICAgICAgb25Wb2x1bWUgPSBmdW5jdGlvbih2b2x1bWUpIHtcbiAgICAgICAgdmFyIHZvbCA9IE1hdGguZmxvb3Iodm9sdW1lKTtcbiAgICAgICAgLy8gc2F2ZSB0aGUgdm9sdW1lIGluIHRoZSBjb29raWVcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICAgICAgICBzb3VuZFZvbHVtZSA9IHZvbDtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gWydzY1BsYXllcl92b2x1bWU9Jywgdm9sLCAnOyBleHBpcmVzPScsIGRhdGUudG9VVENTdHJpbmcoKSwgJzsgcGF0aD1cIi9cIiddLmpvaW4oJycpO1xuICAgICAgICAvLyB1cGRhdGUgdGhlIHZvbHVtZSBpbiB0aGUgZW5naW5lXG4gICAgICAgIGF1ZGlvRW5naW5lLnNldFZvbHVtZShzb3VuZFZvbHVtZSk7XG4gICAgICB9LFxuICAgICAgcG9zaXRpb25Qb2xsO1xuXG4gICAgLy8gbGlzdGVuIHRvIGF1ZGlvIGVuZ2luZSBldmVudHNcbiAgICAkZG9jXG4gICAgICAuYmluZCgnc2NQbGF5ZXI6b25BdWRpb1JlYWR5JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgbG9nKCdvblBsYXllclJlYWR5OiBhdWRpbyBlbmdpbmUgaXMgcmVhZHknKTtcbiAgICAgICAgYXVkaW9FbmdpbmUucGxheSgpO1xuICAgICAgICAvLyBzZXQgaW5pdGlhbCB2b2x1bWVcbiAgICAgICAgb25Wb2x1bWUoc291bmRWb2x1bWUpO1xuICAgICAgfSlcbiAgICAgIC8vIHdoZW4gdGhlIGxvYWRlZCB0cmFjayBzdGFydGVkIHRvIHBsYXlcbiAgICAgIC5iaW5kKCdzY1BsYXllcjpvbk1lZGlhUGxheScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocG9zaXRpb25Qb2xsKTtcbiAgICAgICAgcG9zaXRpb25Qb2xsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gYXVkaW9FbmdpbmUuZ2V0RHVyYXRpb24oKSxcbiAgICAgICAgICAgICAgcG9zaXRpb24gPSBhdWRpb0VuZ2luZS5nZXRQb3NpdGlvbigpLFxuICAgICAgICAgICAgICByZWxhdGl2ZSA9IChwb3NpdGlvbiAvIGR1cmF0aW9uKTtcblxuICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgc2NydWJiZXIgd2lkdGhcbiAgICAgICAgICB1cGRhdGVzLiRwbGF5ZWQuY3NzKCd3aWR0aCcsICgxMDAgKiByZWxhdGl2ZSkgKyAnJScpO1xuICAgICAgICAgIC8vIHNob3cgdGhlIHBvc2l0aW9uIGluIHRoZSB0cmFjayBwb3NpdGlvbiBjb3VudGVyXG4gICAgICAgICAgdXBkYXRlcy5wb3NpdGlvbi5pbm5lckhUTUwgPSB0aW1lY29kZShwb3NpdGlvbik7XG4gICAgICAgICAgLy8gYW5ub3VuY2UgdGhlIHRyYWNrIHBvc2l0aW9uIHRvIHRoZSBET01cbiAgICAgICAgICAkZG9jLnRyaWdnZXIoe1xuICAgICAgICAgICAgdHlwZTogJ29uTWVkaWFUaW1lVXBkYXRlLnNjUGxheWVyJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgICAgIHJlbGF0aXZlOiByZWxhdGl2ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCA1MDApO1xuICAgICAgfSlcbiAgICAgIC8vIHdoZW4gdGhlIGxvYWRlZCB0cmFjayBpcyB3YXMgcGF1c2VkXG4gICAgICAuYmluZCgnc2NQbGF5ZXI6b25NZWRpYVBhdXNlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChwb3NpdGlvblBvbGwpO1xuICAgICAgICBwb3NpdGlvblBvbGwgPSBudWxsO1xuICAgICAgfSlcbiAgICAgIC8vIGNoYW5nZSB0aGUgdm9sdW1lXG4gICAgICAuYmluZCgnc2NQbGF5ZXI6b25Wb2x1bWVDaGFuZ2UnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBvblZvbHVtZShldmVudC52b2x1bWUpO1xuICAgICAgfSlcbiAgICAgIC5iaW5kKCdzY1BsYXllcjpvbk1lZGlhRW5kJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgb25GaW5pc2goKTtcbiAgICAgIH0pXG4gICAgICAuYmluZCgnc2NQbGF5ZXI6b25NZWRpYUJ1ZmZlcmluZycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHVwZGF0ZXMuJGJ1ZmZlci5jc3MoJ3dpZHRoJywgZXZlbnQucGVyY2VudCArICclJyk7XG4gICAgICB9KTtcblxuXG4gIC8vIEdlbmVyYXRlIGN1c3RvbSBza2lubmFibGUgSFRNTC9DU1MvSmF2YVNjcmlwdCBiYXNlZCBTb3VuZENsb3VkIHBsYXllcnMgZnJvbSBsaW5rcyB0byBTb3VuZENsb3VkIHJlc291cmNlc1xuICAkLnNjUGxheWVyID0gZnVuY3Rpb24ob3B0aW9ucywgbm9kZSkge1xuICAgIHZhciBvcHRzID0gJC5leHRlbmQoe30sICQuc2NQbGF5ZXIuZGVmYXVsdHMsIG9wdGlvbnMpLFxuICAgICAgICBwbGF5ZXJJZCA9IHBsYXllcnMubGVuZ3RoLFxuICAgICAgICAkc291cmNlID0gbm9kZSAmJiAkKG5vZGUpLFxuICAgICAgICBzb3VyY2VDbGFzc2VzID0gJHNvdXJjZVswXS5jbGFzc05hbWUucmVwbGFjZSgnc2MtcGxheWVyJywgJycpLFxuICAgICAgICBsaW5rcyA9IG9wdHMubGlua3MgfHwgJC5tYXAoJCgnYScsICRzb3VyY2UpLmFkZCgkc291cmNlLmZpbHRlcignYScpKSwgZnVuY3Rpb24odmFsKSB7IHJldHVybiB7dXJsOiB2YWwuaHJlZiwgdGl0bGU6IHZhbC5pbm5lckhUTUx9OyB9KSxcbiAgICAgICAgJHBsYXllciA9ICQoJzxkaXYgY2xhc3M9XCJzYy1wbGF5ZXIgbG9hZGluZ1wiPjwvZGl2PicpLmRhdGEoJ3NjLXBsYXllcicsIHtpZDogcGxheWVySWR9KSxcbiAgICAgICAgJGFydHdvcmtzID0gJCgnPG9sIGNsYXNzPVwic2MtYXJ0d29yay1saXN0XCI+PC9vbD4nKS5hcHBlbmRUbygkcGxheWVyKSxcbiAgICAgICAgJGluZm8gPSAkKCc8ZGl2IGNsYXNzPVwic2MtaW5mb1wiPjxoMz48L2gzPjxoND48L2g0PjxwPjwvcD48YSBocmVmPVwiI1wiIGNsYXNzPVwic2MtaW5mby1jbG9zZVwiPlg8L2E+PC9kaXY+JykuYXBwZW5kVG8oJHBsYXllciksXG4gICAgICAgICRjb250cm9scyA9ICQoJzxkaXYgY2xhc3M9XCJzYy1jb250cm9sc1wiPjwvZGl2PicpLmFwcGVuZFRvKCRwbGF5ZXIpLFxuICAgICAgICAkbGlzdCA9ICQoJzxvbCBjbGFzcz1cInNjLXRyYWNrc2xpc3RcIj48L29sPicpLmFwcGVuZFRvKCRwbGF5ZXIpO1xuXG4gICAgICAgIC8vIGFkZCB0aGUgY2xhc3NlcyBvZiB0aGUgc291cmNlIG5vZGUgdG8gdGhlIHBsYXllciBpdHNlbGZcbiAgICAgICAgLy8gdGhlIHBsYXllcnMgY2FuIGJlIGluZHZpZHVhbGx5IHN0eWxlZCB0aGlzIHdheVxuICAgICAgICBpZihzb3VyY2VDbGFzc2VzIHx8IG9wdHMuY3VzdG9tQ2xhc3Mpe1xuICAgICAgICAgICRwbGF5ZXIuYWRkQ2xhc3Moc291cmNlQ2xhc3NlcykuYWRkQ2xhc3Mob3B0cy5jdXN0b21DbGFzcyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIGFkZGluZyBjb250cm9scyB0byB0aGUgcGxheWVyXG4gICAgICAgICRwbGF5ZXJcbiAgICAgICAgICAuZmluZCgnLnNjLWNvbnRyb2xzJylcbiAgICAgICAgICAgIC5hcHBlbmQoJzxhIGhyZWY9XCIjcGxheVwiIGNsYXNzPVwic2MtcGxheVwiPlBsYXk8L2E+IDxhIGhyZWY9XCIjcGF1c2VcIiBjbGFzcz1cInNjLXBhdXNlIGhpZGRlblwiPlBhdXNlPC9hPicpXG4gICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgLmFwcGVuZCgnPGEgaHJlZj1cIiNpbmZvXCIgY2xhc3M9XCJzYy1pbmZvLXRvZ2dsZVwiPkluZm88L2E+JylcbiAgICAgICAgICAuYXBwZW5kKCc8ZGl2IGNsYXNzPVwic2Mtc2NydWJiZXJcIj48L2Rpdj4nKVxuICAgICAgICAgICAgLmZpbmQoJy5zYy1zY3J1YmJlcicpXG4gICAgICAgICAgICAgIC5hcHBlbmQoJzxkaXYgY2xhc3M9XCJzYy12b2x1bWUtc2xpZGVyXCI+PHNwYW4gY2xhc3M9XCJzYy12b2x1bWUtc3RhdHVzXCIgc3R5bGU9XCJ3aWR0aDonICsgc291bmRWb2x1bWUgKyclXCI+PC9zcGFuPjwvZGl2PicpXG4gICAgICAgICAgICAgIC5hcHBlbmQoJzxkaXYgY2xhc3M9XCJzYy10aW1lLXNwYW5cIj48ZGl2IGNsYXNzPVwic2Mtd2F2ZWZvcm0tY29udGFpbmVyXCI+PC9kaXY+PGRpdiBjbGFzcz1cInNjLWJ1ZmZlclwiPjwvZGl2PjxkaXYgY2xhc3M9XCJzYy1wbGF5ZWRcIj48L2Rpdj48L2Rpdj4nKVxuICAgICAgICAgICAgICAuYXBwZW5kKCc8ZGl2IGNsYXNzPVwic2MtdGltZS1pbmRpY2F0b3JzXCI+PHNwYW4gY2xhc3M9XCJzYy1wb3NpdGlvblwiPjwvc3Bhbj4gfCA8c3BhbiBjbGFzcz1cInNjLWR1cmF0aW9uXCI+PC9zcGFuPjwvZGl2PicpO1xuXG4gICAgICAgIC8vIGxvYWQgYW5kIHBhcnNlIHRoZSB0cmFjayBkYXRhIGZyb20gU291bmRDbG91ZCBBUElcbiAgICAgICAgbG9hZFRyYWNrc0RhdGEoJHBsYXllciwgbGlua3MsIG9wdHMuYXBpS2V5KTtcbiAgICAgICAgLy8gaW5pdCB0aGUgcGxheWVyIEdVSSwgd2hlbiB0aGUgdHJhY2tzIGRhdGEgd2FzIGxhb2RlZFxuICAgICAgICAkcGxheWVyLmJpbmQoJ29uVHJhY2tEYXRhTG9hZGVkLnNjUGxheWVyJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAvLyBsb2coJ29uVHJhY2tEYXRhTG9hZGVkLnNjUGxheWVyJywgZXZlbnQucGxheWVyT2JqLCBwbGF5ZXJJZCwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICB2YXIgdHJhY2tzID0gZXZlbnQucGxheWVyT2JqLnRyYWNrcztcbiAgICAgICAgICBpZiAob3B0cy5yYW5kb21pemUpIHtcbiAgICAgICAgICAgIHRyYWNrcyA9IHNodWZmbGUodHJhY2tzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY3JlYXRlIHRoZSBwbGF5bGlzdFxuICAgICAgICAgICQuZWFjaCh0cmFja3MsIGZ1bmN0aW9uKGluZGV4LCB0cmFjaykge1xuICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IGluZGV4ID09PSAwO1xuICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGl0ZW0gaW4gdGhlIHBsYXlsaXN0XG4gICAgICAgICAgICAkKCc8bGk+PGEgaHJlZj1cIicgKyB0cmFjay5wZXJtYWxpbmtfdXJsICsnXCI+JyArIHRyYWNrLnRpdGxlICsgJzwvYT48c3BhbiBjbGFzcz1cInNjLXRyYWNrLWR1cmF0aW9uXCI+JyArIHRpbWVjb2RlKHRyYWNrLmR1cmF0aW9uKSArICc8L3NwYW4+PC9saT4nKS5kYXRhKCdzYy10cmFjaycsIHtpZDppbmRleH0pLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBhY3RpdmUpLmFwcGVuZFRvKCRsaXN0KTtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBpdGVtIGluIHRoZSBhcnR3b3JrIGxpc3RcbiAgICAgICAgICAgICQoJzxsaT48L2xpPicpXG4gICAgICAgICAgICAgIC5hcHBlbmQoYXJ0d29ya0ltYWdlKHRyYWNrLCBpbmRleCA+PSBvcHRzLmxvYWRBcnR3b3JrcykpXG4gICAgICAgICAgICAgIC5hcHBlbmRUbygkYXJ0d29ya3MpXG4gICAgICAgICAgICAgIC50b2dnbGVDbGFzcygnYWN0aXZlJywgYWN0aXZlKVxuICAgICAgICAgICAgICAuZGF0YSgnc2MtdHJhY2snLCB0cmFjayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gdXBkYXRlIHRoZSBlbGVtZW50IGJlZm9yZSByZW5kZXJpbmcgaXQgaW4gdGhlIERPTVxuICAgICAgICAgICRwbGF5ZXIuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKCQuaXNGdW5jdGlvbihvcHRzLmJlZm9yZVJlbmRlcikpe1xuICAgICAgICAgICAgICBvcHRzLmJlZm9yZVJlbmRlci5jYWxsKHRoaXMsIHRyYWNrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gc2V0IHRoZSBmaXJzdCB0cmFjaydzIGR1cmF0aW9uXG4gICAgICAgICAgJCgnLnNjLWR1cmF0aW9uJywgJHBsYXllcilbMF0uaW5uZXJIVE1MID0gdGltZWNvZGUodHJhY2tzWzBdLmR1cmF0aW9uKTtcbiAgICAgICAgICAkKCcuc2MtcG9zaXRpb24nLCAkcGxheWVyKVswXS5pbm5lckhUTUwgPSB0aW1lY29kZSgwKTtcbiAgICAgICAgICAvLyBzZXQgdXAgdGhlIGZpcnN0IHRyYWNrIGluZm9cbiAgICAgICAgICB1cGRhdGVUcmFja0luZm8oJHBsYXllciwgdHJhY2tzWzBdKTtcblxuICAgICAgICAgIC8vIGlmIGNvbnRpbm91cyBwbGF5IGVuYWJsZWQgYWx3YXlzIHNraXAgdG8gdGhlIG5leHQgdHJhY2sgYWZ0ZXIgb25lIGZpbmlzaGVzXG4gICAgICAgICAgaWYgKG9wdHMuY29udGludWVQbGF5YmFjaykge1xuICAgICAgICAgICAgJHBsYXllci5iaW5kKCdvblBsYXllclRyYWNrRmluaXNoJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgb25Ta2lwKCRwbGF5ZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gYW5ub3VuY2UgdGhlIHN1Y2Nlc2Z1bCBpbml0aWFsaXphdGlvblxuICAgICAgICAgICRwbGF5ZXJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbG9hZGluZycpXG4gICAgICAgICAgICAudHJpZ2dlcignb25QbGF5ZXJJbml0Jyk7XG5cbiAgICAgICAgICAvLyBpZiBhdXRvIHBsYXkgaXMgZW5hYmxlZCBhbmQgaXQncyB0aGUgZmlyc3QgcGxheWVyLCBzdGFydCBwbGF5aW5nXG4gICAgICAgICAgaWYob3B0cy5hdXRvUGxheSAmJiAhZGlkQXV0b1BsYXkpe1xuICAgICAgICAgICAgb25QbGF5KCRwbGF5ZXIpO1xuICAgICAgICAgICAgZGlkQXV0b1BsYXkgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgIC8vIHJlcGxhY2UgdGhlIERPTSBzb3VyY2UgKGlmIHRoZXJlJ3Mgb25lKVxuICAgICRzb3VyY2UuZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgJCh0aGlzKS5yZXBsYWNlV2l0aCgkcGxheWVyKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkcGxheWVyO1xuICB9O1xuXG4gIC8vIHN0b3AgYWxsIHBsYXllcnMsIG1pZ2h0IGJlIHVzZWZ1bCwgYmVmb3JlIHJlcGxhY2luZyB0aGUgcGxheWVyIGR5bmFtaWNhbGx5XG4gICQuc2NQbGF5ZXIuc3RvcEFsbCA9IGZ1bmN0aW9uKCkge1xuICAgICQoJy5zYy1wbGF5ZXIucGxheWluZyBhLnNjLXBhdXNlJykuY2xpY2soKTtcbiAgfTtcblxuICAvLyBkZXN0cm95IGFsbCB0aGUgcGxheWVycyBhbmQgYXVkaW8gZW5naW5lLCB1c2VmdWxsIHdoZW4gcmVsb2FkaW5nIHBhcnQgb2YgdGhlIHBhZ2UgYW5kIGF1ZGlvIGhhcyB0byBzdG9wXG4gICQuc2NQbGF5ZXIuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICQoJy5zYy1wbGF5ZXIsIC5zYy1wbGF5ZXItZW5naW5lLWNvbnRhaW5lcicpLnJlbW92ZSgpO1xuICB9O1xuXG4gIC8vIHBsdWdpbiB3cmFwcGVyXG4gICQuZm4uc2NQbGF5ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgLy8gcmVzZXQgdGhlIGF1dG8gcGxheVxuICAgIGRpZEF1dG9QbGF5ID0gZmFsc2U7XG4gICAgLy8gY3JlYXRlIHRoZSBwbGF5ZXJzXG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJC5zY1BsYXllcihvcHRpb25zLCB0aGlzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBkZWZhdWx0IHBsdWdpbiBvcHRpb25zXG4gICQuc2NQbGF5ZXIuZGVmYXVsdHMgPSAkLmZuLnNjUGxheWVyLmRlZmF1bHRzID0ge1xuICAgIGN1c3RvbUNsYXNzOiBudWxsLFxuICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSBkb20gb2JqZWN0IGJlZm9yZSB5b3UgcmVuZGVyIGl0LCBhZGQgbm9kZXMsIGdldCBtb3JlIGRhdGEgZnJvbSB0aGUgc2VydmljZXMgZXRjLlxuICAgIGJlZm9yZVJlbmRlciAgOiAgIGZ1bmN0aW9uKHRyYWNrc0RhdGEpIHtcbiAgICAgIHZhciAkcGxheWVyID0gJCh0aGlzKTtcbiAgICB9LFxuICAgIC8vIGluaXRpYWxpemF0aW9uLCB3aGVuIGRvbSBpcyByZWFkeVxuICAgIG9uRG9tUmVhZHkgIDogZnVuY3Rpb24oKSB7XG4gICAgICAkKCdhLnNjLXBsYXllciwgZGl2LnNjLXBsYXllcicpLnNjUGxheWVyKCk7XG4gICAgfSxcbiAgICBhdXRvUGxheTogZmFsc2UsXG4gICAgY29udGludWVQbGF5YmFjazogdHJ1ZSxcbiAgICByYW5kb21pemU6IGZhbHNlLFxuICAgIGxvYWRBcnR3b3JrczogNSxcbiAgICAvLyB0aGUgZGVmYXVsdCBBcGkga2V5IHNob3VsZCBiZSByZXBsYWNlZCBieSB5b3VyIG93biBvbmVcbiAgICAvLyBnZXQgaXQgaGVyZSBodHRwOi8vc291bmRjbG91ZC5jb20veW91L2FwcHMvbmV3XG4gICAgYXBpS2V5OiAnaHR1aVJkMUpQMTFXdzBYNzJUMUMzZydcbiAgfTtcblxuXG4gIC8vIHRoZSBHVUkgZXZlbnQgYmluZGluZ3NcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIHRvZ2dsaW5nIHBsYXkvcGF1c2VcbiAgJChkb2N1bWVudCkub24oJ2NsaWNrJywnYS5zYy1wbGF5LCBhLnNjLXBhdXNlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBiZ011dGUoKTtcbiAgICB2YXIgJGxpc3QgPSAkKHRoaXMpLmNsb3Nlc3QoJy5zYy1wbGF5ZXInKS5maW5kKCdvbC5zYy10cmFja3NsaXN0Jyk7XG4gICAgLy8gc2ltdWxhdGUgdGhlIGNsaWNrIGluIHRoZSB0cmFja2xpc3RcbiAgICAkbGlzdC5maW5kKCdsaS5hY3RpdmUnKS5jbGljaygpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG5cbiAgLy8gZGlzcGxheWluZyB0aGUgaW5mbyBwYW5lbCBpbiB0aGUgcGxheWVyXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljaycsJ2Euc2MtaW5mby10b2dnbGUsIGEuc2MtaW5mby1jbG9zZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICRsaW5rID0gJCh0aGlzKTtcbiAgICAkbGluay5jbG9zZXN0KCcuc2MtcGxheWVyJylcbiAgICAgIC5maW5kKCcuc2MtaW5mbycpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKS5lbmQoKVxuICAgICAgLmZpbmQoJ2Euc2MtaW5mby10b2dnbGUnKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICAvLyBzZWxlY3RpbmcgdHJhY2tzIGluIHRoZSBwbGF5bGlzdFxuICAkKGRvY3VtZW50KS5vbignY2xpY2snLCcuc2MtdHJhY2tzbGlzdCBsaScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0cmFjayA9ICQodGhpcyksXG4gICAgICAgICRwbGF5ZXIgPSAkdHJhY2suY2xvc2VzdCgnLnNjLXBsYXllcicpLFxuICAgICAgICB0cmFja0lkID0gJHRyYWNrLmRhdGEoJ3NjLXRyYWNrJykuaWQsXG4gICAgICAgIHBsYXkgPSAkcGxheWVyLmlzKCc6bm90KC5wbGF5aW5nKScpIHx8ICR0cmFjay5pcygnOm5vdCguYWN0aXZlKScpO1xuICAgIGlmIChwbGF5KSB7XG4gICAgICBvblBsYXkoJHBsYXllciwgdHJhY2tJZCk7XG4gICAgfWVsc2V7XG4gICAgICBvblBhdXNlKCRwbGF5ZXIpO1xuICAgIH1cbiAgICAkdHJhY2suYWRkQ2xhc3MoJ2FjdGl2ZScpLnNpYmxpbmdzKCdsaScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAkKCcuYXJ0d29ya3MgbGknLCAkcGxheWVyKS5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBpbmRleCA9PT0gdHJhY2tJZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICB2YXIgc2NydWIgPSBmdW5jdGlvbihub2RlLCB4UG9zKSB7XG4gICAgdmFyICRzY3J1YmJlciA9ICQobm9kZSkuY2xvc2VzdCgnLnNjLXRpbWUtc3BhbicpLFxuICAgICAgICAkYnVmZmVyID0gJHNjcnViYmVyLmZpbmQoJy5zYy1idWZmZXInKSxcbiAgICAgICAgJGF2YWlsYWJsZSA9ICRzY3J1YmJlci5maW5kKCcuc2Mtd2F2ZWZvcm0tY29udGFpbmVyIGltZycpLFxuICAgICAgICAkcGxheWVyID0gJHNjcnViYmVyLmNsb3Nlc3QoJy5zYy1wbGF5ZXInKSxcbiAgICAgICAgcmVsYXRpdmUgPSBNYXRoLm1pbigkYnVmZmVyLndpZHRoKCksICh4UG9zICAtICRhdmFpbGFibGUub2Zmc2V0KCkubGVmdCkpIC8gJGF2YWlsYWJsZS53aWR0aCgpO1xuICAgIG9uU2VlaygkcGxheWVyLCByZWxhdGl2ZSk7XG4gIH07XG5cbiAgdmFyIG9uVG91Y2hNb3ZlID0gZnVuY3Rpb24oZXYpIHtcbiAgICBpZiAoZXYudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHNjcnViKGV2LnRhcmdldCwgZXYudGFyZ2V0VG91Y2hlcyAmJiBldi50YXJnZXRUb3VjaGVzLmxlbmd0aCAmJiBldi50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFgpO1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cblxuICAvLyBzZWVraW5nIGluIHRoZSBsb2FkZWQgdHJhY2sgYnVmZmVyXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljaycsJy5zYy10aW1lLXNwYW4nLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgc2NydWIodGhpcywgZXZlbnQucGFnZVgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pXG4gICAgLm9uKCd0b3VjaHN0YXJ0JywnLnNjLXRpbWUtc3BhbicsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICBldmVudC5vcmlnaW5hbEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSlcbiAgICAub24oJ3RvdWNoZW5kJywnLnNjLXRpbWUtc3BhbicsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICBldmVudC5vcmlnaW5hbEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgLy8gY2hhbmdpbmcgdm9sdW1lIGluIHRoZSBwbGF5ZXJcbiAgdmFyIHN0YXJ0Vm9sdW1lVHJhY2tpbmcgPSBmdW5jdGlvbihub2RlLCBzdGFydEV2ZW50KSB7XG4gICAgdmFyICRub2RlID0gJChub2RlKSxcbiAgICAgICAgb3JpZ2luWCA9ICRub2RlLm9mZnNldCgpLmxlZnQsXG4gICAgICAgIG9yaWdpbldpZHRoID0gJG5vZGUud2lkdGgoKSxcbiAgICAgICAgZ2V0Vm9sdW1lID0gZnVuY3Rpb24oeCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgoeCAtIG9yaWdpblgpL29yaWdpbldpZHRoKSoxMDApO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGUgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICRkb2MudHJpZ2dlcih7dHlwZTogJ3NjUGxheWVyOm9uVm9sdW1lQ2hhbmdlJywgdm9sdW1lOiBnZXRWb2x1bWUoZXZlbnQucGFnZVgpfSk7XG4gICAgICAgIH07XG4gICAgJG5vZGUuYmluZCgnbW91c2Vtb3ZlLnNjLXBsYXllcicsIHVwZGF0ZSk7XG4gICAgdXBkYXRlKHN0YXJ0RXZlbnQpO1xuICB9O1xuXG4gIHZhciBzdG9wVm9sdW1lVHJhY2tpbmcgPSBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICAgICQobm9kZSkudW5iaW5kKCdtb3VzZW1vdmUuc2MtcGxheWVyJyk7XG4gIH07XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ21vdXNlZG93bicsJy5zYy12b2x1bWUtc2xpZGVyJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHN0YXJ0Vm9sdW1lVHJhY2tpbmcodGhpcywgZXZlbnQpO1xuICAgIH0pXG4gICAgLm9uKCdtb3VzZXVwJywnLnNjLXZvbHVtZS1zbGlkZXInLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgc3RvcFZvbHVtZVRyYWNraW5nKHRoaXMsIGV2ZW50KTtcbiAgICB9KTtcblxuICAkZG9jLmJpbmQoJ3NjUGxheWVyOm9uVm9sdW1lQ2hhbmdlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAkKCdzcGFuLnNjLXZvbHVtZS1zdGF0dXMnKS5jc3Moe3dpZHRoOiBldmVudC52b2x1bWUgKyAnJSd9KTtcbiAgfSk7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyB0aGUgZGVmYXVsdCBBdXRvLUluaXRpYWxpemF0aW9uXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgaWYoJC5pc0Z1bmN0aW9uKCQuc2NQbGF5ZXIuZGVmYXVsdHMub25Eb21SZWFkeSkpe1xuICAgICAgJC5zY1BsYXllci5kZWZhdWx0cy5vbkRvbVJlYWR5KCk7XG4gICAgfVxuICB9KTtcblxufSkoalF1ZXJ5KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9zY3JpcHRzL2xpYnMvc2MtcGxheWVyLmpzIiwiLypcbiogICBKYXZhU2NyaXB0IGludGVyZmFjZSBmb3IgdGhlIFNvdW5kQ2xvdWQgUGxheWVyIHdpZGdldFxuKiAgIEF1dGhvcjogTWF0YXMgUGV0cmlrYXMsIG1hdGFzQHNvdW5kY2xvdWQuY29tXG4qICAgQ29weXJpZ2h0IChjKSAyMDA5ICBTb3VuZENsb3VkIEx0ZC5cbiogICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4qICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiovXG4oZnVuY3Rpb24oKXtcbiAgdmFyIGlzSUUgPSAoL21zaWUvaSkudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhKC9vcGVyYS9pKS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICBcbiAgdmFyIHNvdW5kY2xvdWQgPSB3aW5kb3cuc291bmRjbG91ZCA9IHtcbiAgICB2ZXJzaW9uOiBcIjAuMVwiLFxuICAgIGRlYnVnOiBmYWxzZSxcbiAgICBfbGlzdGVuZXJzOiBbXSxcbiAgICAvLyByZS1kaXNwYXRjaGVzIHdpZGdldCBldmVudHMgaW4gdGhlIERPTSwgdXNpbmcgSlMgbGlicmFyeSBzdXBwb3J0LCB0aGUgZXZlbnRzIGFsc28gc2hvdWxkIGJ1YmJsZSB1cCB0aGUgRE9NXG4gICAgX3JlZGlzcGF0Y2g6IGZ1bmN0aW9uKGV2ZW50VHlwZSwgZmxhc2hJZCwgZGF0YSkge1xuICAgICAgdmFyIHBsYXllck5vZGUsXG4gICAgICAgICAgbHNucnMgID0gdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0gfHwgW10sXG4gICAgICAgICAgLy8gY29uc3RydWN0IHRoZSBjdXN0b20gZXZlbnRUeXBlICBlLmcuICdzb3VuZGNsb3VkOm9uUGxheWVyUmVhZHknXG4gICAgICAgICAgY3VzdG9tRXZlbnRUeXBlID0gJ3NvdW5kY2xvdWQ6JyArIGV2ZW50VHlwZTtcblxuICAgICAgdHJ5e1xuICAgICAgICAvLyBmaW5kIHRoZSBmbGFzaCBwbGF5ZXIsIG1pZ2h0IHRocm93IGFuIGV4Y2VwdGlvblxuICAgICAgICBwbGF5ZXJOb2RlID0gdGhpcy5nZXRQbGF5ZXIoZmxhc2hJZCk7XG4gICAgICB9Y2F0Y2goZSl7XG4gICAgICAgIGlmKHRoaXMuZGVidWcgJiYgd2luZG93LmNvbnNvbGUpe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3VuYWJsZSB0byBkaXNwYXRjaCB3aWRnZXQgZXZlbnQgJyArIGV2ZW50VHlwZSArICcgZm9yIHRoZSB3aWRnZXQgaWQgJyArIGZsYXNoSWQsIGRhdGEsIGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIHJlLWRpc3BhdGNoIFNvdW5kQ2xvdWQgZXZlbnRzIHVwIGluIHRoZSBET01cbiAgICAgIGlmKHdpbmRvdy5qUXVlcnkpe1xuICAgICAgICAvLyBpZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCB0cmlnZ2VyIHRoZSBjdXN0b20gZXZlbnRcbiAgICAgICAgalF1ZXJ5KHBsYXllck5vZGUpLnRyaWdnZXIoY3VzdG9tRXZlbnRUeXBlLCBbZGF0YV0pO1xuICAgICAgfWVsc2UgaWYod2luZG93LlByb3RvdHlwZSl7XG4gICAgICAgIC8vIGlmIFByb3RvdHlwZS5qcyBpcyBhdmFpbGFibGUsIGZpcmUgdGhlIGN1c3RvbSBldmVudFxuICAgICAgICAkKHBsYXllck5vZGUpLmZpcmUoY3VzdG9tRXZlbnRUeXBlLCBkYXRhKTtcbiAgICAgIH1lbHNle1xuICAgICAgICAvLyBUT0RPIGFkZCBtb3JlIEpTIGxpYnJhcmllcyB0aGF0IHN1cHBvcnQgY3VzdG9tIERPTSBldmVudHNcbiAgICAgIH1cbiAgICAgIC8vIGlmIHRoZXJlIGFyZSBhbnkgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgdG8gdGhpcyBldmVudCwgdHJpZ2dlciB0aGVtIGFsbFxuICAgICAgZm9yKHZhciBpID0gMCwgbCA9IGxzbnJzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICBsc25yc1tpXS5hcHBseShwbGF5ZXJOb2RlLCBbcGxheWVyTm9kZSwgZGF0YV0pO1xuICAgICAgfVxuICAgICAgLy8gbG9nIHRoZSBldmVudHMgaW4gZGVidWcgbW9kZVxuICAgICAgaWYodGhpcy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSl7XG4gICAgICAgIGNvbnNvbGUubG9nKGN1c3RvbUV2ZW50VHlwZSwgZXZlbnRUeXBlLCBmbGFzaElkLCBkYXRhKTtcbiAgICAgIH1cblxuICAgIH0sXG4gICAgLy8geW91IGNhbiBhZGQgbXVsdGlwbGUgbGlzdGVuZXJzIHRvIGEgY2VydGFpbiBldmVudFxuICAgIC8vIGUuZy4gc291bmRjbG91ZC5hZGRFdmVudExpc3RlbmVyKCdvblBsYXllclJlYWR5JywgbXlGdW5jdGlvbk9uZSk7XG4gICAgLy8gICAgICBzb3VuZGNsb3VkLmFkZEV2ZW50TGlzdGVuZXIoJ29uUGxheWVyUmVhZHknLCBteUZ1bmN0aW9uVHdvKTtcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbihldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICBpZighdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0pe1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0ucHVzaChjYWxsYmFjayk7XG4gICAgfSxcbiAgICAvLyB5b3UgY2FuIGFsc28gcmVtb3ZlIHRoZSBmdW5jdGlvbiBsaXN0ZW5lciBpZiBlLmcgeW91IHdhbnQgdG8gdHJpZ2dlciBpdCBvbmx5IG9uY2VcbiAgICAvLyBzb3VuZGNsb3VkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29uTWVkaWFQbGF5JywgbXlGdW5jdGlvbk9uZSk7XG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGxzbnJzID0gdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0gfHwgW107XG4gICAgICBmb3IodmFyIGkgPSAwLCBsID0gbHNucnMubGVuZ3RoOyBpIDwgbDsgaSArPSAxKSB7XG4gICAgICAgIGlmKGxzbnJzW2ldID09PSBjYWxsYmFjayl7XG4gICAgICAgICAgbHNucnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBnZXQgd2lkZ2V0IG5vZGUgYmFzZWQgb24gaXRzIGlkIChpZiBvYmplY3QgdGFnKSBvciBuYW1lIChpZiBlbWJlZCB0YWcpXG4gICAgLy8gaWYgeW91J3JlIHVzaW5nIFNXRk9iamVjdCBvciBvdGhlciBkeW5hbWljIEZsYXNoIGdlbmVyYXRvcnMsIHBsZWFzZSBtYWtlIHN1cmUgdGhhdCB5b3Ugc2V0IHRoZSBpZCBwYXJhbWV0ZXJcbiAgICAvLyAgb25seSBpZiB0aGUgRE9NIGhhcyBhbiBpZC9uYW1lIGl0J3MgcG9zc2libGUgdG8gY2FsbCBwbGF5ZXIncyBtZXRob2RzLlxuICAgIC8vIEltcG9ydGFudCE6IGJlY2F1c2Ugb2YgdGhlIGJ1ZyBpbiBPcGVyYSBicm93c2VyLCB0aGUgRmxhc2ggY2FuJ3QgZ2V0IGl0cyBvd24gaWRcbiAgICAvLyBzbyB0aGUgZ2VuZXJhdG9yIHNob3VsZCBzZXQgaXQgYWRkaXRpb25hbGx5IHRocm91Z2ggZmxhc2h2YXJzIHBhcmFtZXRlciAnb2JqZWN0X2lkJ1xuICAgIGdldFBsYXllcjogZnVuY3Rpb24oaWQpe1xuICAgICAgdmFyIGZsYXNoO1xuICAgICAgdHJ5e1xuICAgICAgICBpZighaWQpe1xuICAgICAgICAgIHRocm93IFwiVGhlIFNvdW5kQ2xvdWQgV2lkZ2V0IERPTSBvYmplY3QgbmVlZHMgYW4gaWQgYXRyaWJ1dGUsIHBsZWFzZSByZWZlciB0byBTb3VuZENsb3VkIFdpZGdldCBBUEkgZG9jdW1lbnRhdGlvbi5cIjtcbiAgICAgICAgfVxuICAgICAgICBmbGFzaCA9IGlzSUUgPyB3aW5kb3dbaWRdIDogZG9jdW1lbnRbaWRdO1xuICAgICAgICBpZihmbGFzaCl7XG4gICAgICAgICAgaWYoZmxhc2guYXBpX2dldEZsYXNoSWQpe1xuICAgICAgICAgICAgcmV0dXJuIGZsYXNoO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhyb3cgXCJUaGUgU291bmRDbG91ZCBXaWRnZXQgRXh0ZXJuYWwgSW50ZXJmYWNlIGlzIG5vdCBhY2Nlc3NpYmxlLiBDaGVjayB0aGF0IGFsbG93c2NyaXB0YWNjZXNzIGlzIHNldCB0byAnYWx3YXlzJyBpbiBlbWJlZCBjb2RlXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICB0aHJvdyBcIlRoZSBTb3VuZENsb3VkIFdpZGdldCB3aXRoIGFuIGlkIFwiICsgaWQgKyBcIiBjb3VsZG4ndCBiZSBmb3VuZFwiO1xuICAgICAgICB9XG4gICAgICB9Y2F0Y2goZSl7XG4gICAgICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIGZpcmVkIHdoZW4gd2lkZ2V0IGhhcyBsb2FkZWQgaXRzIGRhdGEgYW5kIGlzIHJlYWR5IHRvIGFjY2VwdCBjYWxscyBmcm9tIG91dHNpZGVcbiAgICAvLyB0aGUgd2lkZ2V0IHdpbGwgY2FsbCB0aGVzZSBmdW5jdGlvbnMgb25seSBpZiBpbiBpdCdzIGZsYXNodmFycyB0aGVyZSdzIGEgcGFyYW1ldGVyIGVuYWJsZV9hcGk9dHJ1ZVxuICAgIC8vIEBmbGFzaElkOiB0aGUgd2lkZ2V0IGlkLCBiYXNpY2FsbHkgdGhlIEZsYXNoIG5vZGUgc2hvdWxkIGJlIGFjY2Vzc2libGUgdG8gSlMgd2l0aCBzb3VuZGNsb3VkLmdldFBsYXllcihmbGFzaElkKVxuICAgIC8vIEBkYXRhOiBhbiBvYmplY3QgY29udGFpbmluZyAubWVkaWFVcmkgKGVnLiAnaHR0cDovL2FwaS5zb3VuZGNsb3VkLmNvbS90cmFja3MvNDk5MzEnKSAubWVkaWFJZCAoZS5nLiAnNDUzMicpXG4gICAgLy8gaW4gYnVmZmVyaW5nIGV2ZW50cyBkYXRhIGNvbnRhaW5zIGFsc28gLnBlcmNlbnQgPSAoZS5nLiAnOTknKVxuICAgIG9uUGxheWVyUmVhZHk6IGZ1bmN0aW9uKGZsYXNoSWQsIGRhdGEpIHtcbiAgICAgIHRoaXMuX3JlZGlzcGF0Y2goJ29uUGxheWVyUmVhZHknLCBmbGFzaElkLCBkYXRhKTtcbiAgICB9LFxuICAgIC8vIGZpcmVkIHdoZW4gd2lkZ2V0IHN0YXJ0cyBwbGF5aW5nIGN1cnJlbnQgdHJhY2sgKGZpcmVkIG9ubHkgb25jZSBwZXIgdHJhY2spXG4gICAgb25NZWRpYVN0YXJ0IDogZnVuY3Rpb24oZmxhc2hJZCwgZGF0YSkge1xuICAgICAgdGhpcy5fcmVkaXNwYXRjaCgnb25NZWRpYVN0YXJ0JywgZmxhc2hJZCwgZGF0YSk7XG4gICAgfSxcbiAgICAvLyBmaXJlZCB3aGVuIHRoZSB0cmFjay9wbGF5bGlzdCBoYXMgZmluaXNoZWQgcGxheWluZ1xuICAgIG9uTWVkaWFFbmQgOiBmdW5jdGlvbihmbGFzaElkLCBkYXRhKSB7XG4gICAgICB0aGlzLl9yZWRpc3BhdGNoKCdvbk1lZGlhRW5kJywgZmxhc2hJZCwgZGF0YSk7XG4gICAgfSxcbiAgICAvLyBmaXJlZCB3aGVuIHdpZGdldCBzdGFydHMgcGxheWluZyBjdXJyZW50IHRyYWNrIChmaXJlZCBvbiBldmVyeSBwbGF5LCBzZWVrKVxuICAgIG9uTWVkaWFQbGF5IDogZnVuY3Rpb24oZmxhc2hJZCwgZGF0YSkge1xuICAgICAgdGhpcy5fcmVkaXNwYXRjaCgnb25NZWRpYVBsYXknLCBmbGFzaElkLCBkYXRhKTtcbiAgICB9LFxuICAgIC8vIGZpcmVkIHdoZW4gdHJhY2sgd2FzIHBhdXNlZFxuICAgIG9uTWVkaWFQYXVzZSA6IGZ1bmN0aW9uKGZsYXNoSWQsIGRhdGEpIHtcbiAgICAgIHRoaXMuX3JlZGlzcGF0Y2goJ29uTWVkaWFQYXVzZScsIGZsYXNoSWQsIGRhdGEpO1xuICAgIH0sXG4gICAgLy8gZmlyZWQgd2hlbiB0aGUgd2lkZ2V0IGlzIHN0aWxsIGJ1ZmZlcmluZywgbWVhbnMgeW91IGNhbid0IHNlZWsgaW4gdGhlIHRyYWNrIGZ1bGx5IHlldFxuICAgIG9uTWVkaWFCdWZmZXJpbmcgOiBmdW5jdGlvbihmbGFzaElkLCBkYXRhKSB7XG4gICAgICB0aGlzLl9yZWRpc3BhdGNoKCdvbk1lZGlhQnVmZmVyaW5nJywgZmxhc2hJZCwgZGF0YSk7XG4gICAgfSxcbiAgICAvLyBmaXJlZCB3aGVuIHRoZSB1c2VyIHNlZWtzIGluIHRoZSB0cmFja1xuICAgIG9uTWVkaWFTZWVrIDogZnVuY3Rpb24oZmxhc2hJZCwgZGF0YSkge1xuICAgICAgdGhpcy5fcmVkaXNwYXRjaCgnb25NZWRpYVNlZWsnLCBmbGFzaElkLCBkYXRhKTtcbiAgICB9LFxuICAgIC8vIGZpcmVkIHdoZW4gdGhlIHdpZGdldCBpcyBkb25lIGJ1ZmZlcmluZyBhbmQgdGhlIHdob2xlIHRyYWNrIGxlbmd0aCBpcyBzZWVrYWJsZVxuICAgIG9uTWVkaWFEb25lQnVmZmVyaW5nIDogZnVuY3Rpb24oZmxhc2hJZCwgZGF0YSkge1xuICAgICAgdGhpcy5fcmVkaXNwYXRjaCgnb25NZWRpYURvbmVCdWZmZXJpbmcnLCBmbGFzaElkLCBkYXRhKTtcbiAgICB9LFxuICAgIC8vIGZpcmVkIHdoZW4gdGhlIHdpZGdldCBjYW4ndCBnZXQgdGhlIHJlcXVlc3RlZCBkYXRhIGZyb20gdGhlIHNlcnZlciAodGhlIHJlc291cmNlIGlzIHJlbW92ZWQsIGhpZGRlbiwgZXRjLilcbiAgICBvblBsYXllckVycm9yIDogZnVuY3Rpb24oZmxhc2hJZCwgZGF0YSkge1xuICAgICAgdGhpcy5fcmVkaXNwYXRjaCgnb25QbGF5ZXJFcnJvcicsIGZsYXNoSWQsIGRhdGEpO1xuICAgIH1cbiAgfTtcbiAgXG59KSgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcmVzb3VyY2VzL3NjcmlwdHMvbGlicy9zb3VuZGNsb3VkLnBsYXllci5hcGkuanMiLCJpbXBvcnQgRmFzdENsaWNrIGZyb20gJ2Zhc3RjbGljayc7XG5pbXBvcnQgZG9tcmVhZHkgZnJvbSAnZG9tcmVhZHknO1xuXG5pbXBvcnQgZWUgZnJvbSAnLi9jb21wb25lbnRzL2VlJztcblxuaW1wb3J0ICcuL2NvbXBvbmVudHMvYWJvdXQnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvYWNjb3JkaW9uLW5hdic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9jYXJvdXNlbHMnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvcHJlbG9hZGVyJztcbi8vIGltcG9ydCAnLi9jb21wb25lbnRzL3Ntb290aC1zY3JvbGxiYXInO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvYmctbXVzaWMnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvbWl4Y2xvdWQtcGxheWVyJztcblxuaW1wb3J0ICcuL2xpYnMvc291bmRjbG91ZC5wbGF5ZXIuYXBpJztcbmltcG9ydCAnLi9saWJzL3NjLXBsYXllcic7XG5cbkZhc3RDbGljay5hdHRhY2goZG9jdW1lbnQuYm9keSk7XG5cbmRvbXJlYWR5KCgpID0+IHtcbiAgZWUuZW1pdCgnaW5pdCcpO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvc2NyaXB0cy9tYWluLmpzIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9zdHlsZXMvbWFpbi5zY3NzXG4vLyBtb2R1bGUgaWQgPSAuL3Jlc291cmNlcy9zdHlsZXMvbWFpbi5zY3NzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=